// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
#include <bse/bsecxxmodule.idl>
namespace Bse {
class LatencyTest : Effect {
  Info    authors     = "Stefan Westerfeld";
  Info    license     = _("GNU Lesser General Public License");
  Info    category    = _("/Misc/Latency Test");
  Info    blurb       = _("This module is an automated midi latency tester.\n\n"
			  "It writes midi events on a certain channel on a certain device,"
			  " regularily. You are supposed to set this up in a way that beast"
			  " will receive these midi events and produce some sound upon receiving"
			  "them.\n"
			  "After sending a midi event, the latency tester will count the number"
			  " of samples until it sees some signal on its input channel. From"
			  " that number a latency is computed and printed (or logged, if you specified a log file)");
  group _("Test configuration") {
    Real   bpm = (_("Beats per Minute"), _("The speed at which test events (quarter notes) are generated"),
                  120, 10, 1000, 5, STANDARD);
    Real   threshold_db = Gain (_("Threshold [dB]"),
				_("Input signal needs to be louder than this to be counted as active"),
				-24, -96, 0, 1, STANDARD ":scale");
    String logfile_name	= (_("Log File Name"), _("When set, the latency information will be written to this log file, stdout otherwise."),
                           "", STANDARD);
  };
  group _("MIDI setup") {
    Int	   midi_note	= Note (_("Note"), NULL, BSE_KAMMER_NOTE, STANDARD);
    Int    midi_channel = (_("Midi Output Channel"), _("The midi output device where the tester sends its events"),
                           1, 1, 16, 1, STANDARD);
    String midi_output	= (_("Midi Output Device"),
                           _("The midi output device where the tester sends its events. "
                             "This may be a named pipe (see man 1 mkfifo) which can be used "
                             "with the OSS midi driver. If the name starts out with a \"$\", "
                             "it is interpreted as an environment variable name and expanded."),
                           "/tmp/midi-fifo", STANDARD);
  };
  IStream audio_in   = (_("Audio In"), _("Test signal input, which the latency tester waits for"));
  OStream audio_out  = (_("Audio Out"), _("Test signal output"));
};
} // Bse
