@DOC-VARIABLE-DEFINITIONS@
name    = GXK-Functions
blurb   = Gtk+ Extension Kit Function Reference
package = BEAST-0.4.2
date    = 29 Oct 2002
image   = gxk-functions

@DOC-TITLE@
GXK-Functions

@DOC-HEAD@
GXK-Functions 29 Oct 2002 BEAST-0.4.2

@DOC-NAME@
GXK-Functions - Gtk+ Extension Kit Function Reference

@DOC-SYNOPSIS@
@STRONG gxk_dialog_new@ (@EMPH pointer_loc@, @EMPH alive_object@, @EMPH flags@, @EMPH title@, @EMPH child@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 30

@DOC-VARIABLE-DEFINITIONS@
type = gpointer\ \ \ \ \ \ \ 
typeraw = gpointer       
@DOC-PARAMETER@
pointer_loc
@DOC-PARDESC@
pointer to nullify upon dialog destruction

@DOC-VARIABLE-DEFINITIONS@
type = GtkObject*\ \ \ \ \ 
typeraw = GtkObject*     
@DOC-PARAMETER@
alive_object
@DOC-PARDESC@
object which upon destruction, takes the dialog with it

@DOC-VARIABLE-DEFINITIONS@
type = GxkDialogFlags\ 
typeraw = GxkDialogFlags 
@DOC-PARAMETER@
flags
@DOC-PARDESC@
dialog flags

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*\ \ \ 
typeraw = const gchar*   
@DOC-PARAMETER@
title
@DOC-PARDESC@
window title for the dialog

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*\ \ \ \ \ 
typeraw = GtkWidget*     
@DOC-PARAMETER@
child
@DOC-PARDESC@
child to pack into the dialog

@DOC-VARIABLE-DEFINITIONS@
retspace = 30


@DOC-DESCRIPTION@
Create a new configurable dialog. Possible values for the flags are: @EMPH GXK_DIALOG_HIDE_ON_DELETE@: only hide and not desroy the dialog upon window manager delete events; @EMPH GXK_DIALOG_STATUS_SHELL@: the dialog has a status bar and acts as a shell window for primary application data; @EMPH GXK_DIALOG_MODAL@: the dialog is modal while visible; @EMPH GXK_DIALOG_POPUP_POS@: popup the dialog below mouse pointer; @EMPH GXK_DIALOG_DELETE_BUTTON@: add a "Close" button to the dialog (not recommended for GXK_DIALOG_STATUS_SHELL dialogs, which usually have menus).  
@DOC-SYNOPSIS@
@STRONG gxk_dialog_set_title@ (@EMPH dialog@, @EMPH title@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 21

@DOC-VARIABLE-DEFINITIONS@
type = GxkDialog*\ \ 
typeraw = GxkDialog*  
@DOC-PARAMETER@
dialog
@DOC-PARDESC@
valid GxkDialog

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
title
@DOC-PARDESC@
dialog window manager title

@DOC-VARIABLE-DEFINITIONS@
retspace = 21


@DOC-DESCRIPTION@
Change the dialog's window manager title and role.  
@DOC-SYNOPSIS@
@STRONG gxk_dialog_add_flags@ (@EMPH dialog@, @EMPH flags@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 24

@DOC-VARIABLE-DEFINITIONS@
type = GxkDialog*\ \ \ \ \ 
typeraw = GxkDialog*     
@DOC-PARAMETER@
dialog
@DOC-PARDESC@
valid GxkDialog

@DOC-VARIABLE-DEFINITIONS@
type = GxkDialogFlags\ 
typeraw = GxkDialogFlags 
@DOC-PARAMETER@
flags
@DOC-PARDESC@
additional flags to set on the dialog.

@DOC-VARIABLE-DEFINITIONS@
retspace = 24


@DOC-DESCRIPTION@
Alter dialog flags, see @STRONG gxk_dialog_new()@.  
@DOC-SYNOPSIS@
@STRONG gxk_dialog_clear_flags@ (@EMPH dialog@, @EMPH flags@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 24

@DOC-VARIABLE-DEFINITIONS@
type = GxkDialog*\ \ \ \ \ 
typeraw = GxkDialog*     
@DOC-PARAMETER@
dialog
@DOC-PARDESC@
valid GxkDialog

@DOC-VARIABLE-DEFINITIONS@
type = GxkDialogFlags\ 
typeraw = GxkDialogFlags 
@DOC-PARAMETER@
flags
@DOC-PARDESC@
flags to unset on the dialog.

@DOC-VARIABLE-DEFINITIONS@
retspace = 24


@DOC-DESCRIPTION@
Alter dialog flags, see @STRONG gxk_dialog_new()@.  
@DOC-SYNOPSIS@
@STRONG gxk_dialog_get_child@ (@EMPH dialog@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GxkDialog*
typeraw = GxkDialog*
@DOC-PARAMETER@
dialog
@DOC-PARDESC@
valid GxkDialog

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
Retrive the primary child of the dialog.  
@DOC-SYNOPSIS@
@STRONG gxk_dialog_set_child@ (@EMPH dialog@, @EMPH child@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GxkDialog*
typeraw = GxkDialog*
@DOC-PARAMETER@
dialog
@DOC-PARDESC@
valid GxkDialog

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
child
@DOC-PARDESC@
new child

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
Change the dialog's primary child to @EMPH child@. Destroys the old child if any.  
@DOC-SYNOPSIS@
@STRONG gxk_dialog_get_status_window@ ();

@DOC-VARIABLE-DEFINITIONS@
parspace = 11

@DOC-VARIABLE-DEFINITIONS@
retspace = 11

@DOC-RETURNS@
a valid GxkDialog or @EMPH NULL@

@DOC-DESCRIPTION@
Retrive the most recently entered GxkDialog if any.  
@DOC-SYNOPSIS@
@STRONG gxk_dialog_remove_actions@ (@EMPH dialog@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GxkDialog*
typeraw = GxkDialog*
@DOC-PARAMETER@
dialog
@DOC-PARDESC@
valid GxkDialog

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
Remove all action buttons setup for this dialog.  
@DOC-SYNOPSIS@
@STRONG gxk_dialog_action*@ (@EMPH dialog@, @EMPH action@, @EMPH callback@, @EMPH data@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 11

@DOC-VARIABLE-DEFINITIONS@
type = 
typeraw = 
@DOC-PARAMETER@
dialog
@DOC-PARDESC@
valid GxkDialog

@DOC-VARIABLE-DEFINITIONS@
type = 
typeraw = 
@DOC-PARAMETER@
action
@DOC-PARDESC@
button label or stock ID

@DOC-VARIABLE-DEFINITIONS@
type = 
typeraw = 
@DOC-PARAMETER@
callback
@DOC-PARDESC@
callback function for button activation

@DOC-VARIABLE-DEFINITIONS@
type = 
typeraw = 
@DOC-PARAMETER@
data
@DOC-PARDESC@
callback data

@DOC-VARIABLE-DEFINITIONS@
retspace = 11


@DOC-DESCRIPTION@
Add a new (stock) button to a dialog.  
@DOC-SYNOPSIS@
@STRONG gxk_status_bar_create@ ();

@DOC-VARIABLE-DEFINITIONS@
parspace = 11

@DOC-VARIABLE-DEFINITIONS@
retspace = 11

@DOC-RETURNS@
status bar container

@DOC-DESCRIPTION@
Create a status bar suitable to be packed into windows with status bar support.  
@DOC-SYNOPSIS@
@STRONG gxk_status_clear@ ();

@DOC-VARIABLE-DEFINITIONS@
parspace = 3

@DOC-VARIABLE-DEFINITIONS@
retspace = 3


@DOC-DESCRIPTION@
Clear the current status bar.  
@DOC-SYNOPSIS@
@STRONG gxk_status_set@ (@EMPH percentage@, @EMPH message@, @EMPH status_msg@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 25

@DOC-VARIABLE-DEFINITIONS@
type = gfloat\ \ \ \ \ \ 
typeraw = gfloat      
@DOC-PARAMETER@
percentage
@DOC-PARDESC@
progress percentage

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
message
@DOC-PARDESC@
message to be displayed

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
status_msg
@DOC-PARDESC@
error status

@DOC-VARIABLE-DEFINITIONS@
retspace = 25


@DOC-DESCRIPTION@
Set the current status bar message, progress percentage (usually 0% - 100% or one of the special values: @EMPH GXK_STATUS_ERROR@, @EMPH GXK_STATUS_WAIT@, @EMPH GXK_STATUS_IDLE@, @EMPH GXK_STATUS_IDLE_HINT@ or @EMPH GXK_STATUS_PROGRESS@) and error status.  
@DOC-SYNOPSIS@
@STRONG gxk_status_printf@ (@EMPH percentage@, @EMPH status_msg@, @EMPH message_fmt@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 14

@DOC-VARIABLE-DEFINITIONS@
type = 
typeraw = 
@DOC-PARAMETER@
percentage
@DOC-PARDESC@
progress percentage

@DOC-VARIABLE-DEFINITIONS@
type = 
typeraw = 
@DOC-PARAMETER@
status_msg
@DOC-PARDESC@
error status

@DOC-VARIABLE-DEFINITIONS@
type = 
typeraw = 
@DOC-PARAMETER@
message_fmt
@DOC-PARDESC@
printf style message to be displayed

@DOC-VARIABLE-DEFINITIONS@
retspace = 14


@DOC-DESCRIPTION@
Similar to @STRONG gxk_status_set()@ but supports construction of the message through a @STRONG printf(3)@ style argument list.  
@DOC-SYNOPSIS@
@STRONG gxk_status_errnoprintf@ (@EMPH libc_errno@, @EMPH message_fmt@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 14

@DOC-VARIABLE-DEFINITIONS@
type = 
typeraw = 
@DOC-PARAMETER@
libc_errno
@DOC-PARDESC@
errno value

@DOC-VARIABLE-DEFINITIONS@
type = 
typeraw = 
@DOC-PARAMETER@
message_fmt
@DOC-PARDESC@
printf style message to be displayed

@DOC-VARIABLE-DEFINITIONS@
retspace = 14


@DOC-DESCRIPTION@
Similar to @STRONG gxk_status_printf()@ but figures the error status automatically from the passed in @EMPH libc_errno@.  
@DOC-SYNOPSIS@
@STRONG gxk_status_window_push@ (@EMPH widget@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 18

@DOC-VARIABLE-DEFINITIONS@
type = gpointer\ 
typeraw = gpointer 
@DOC-PARAMETER@
widget
@DOC-PARDESC@
status bar window

@DOC-VARIABLE-DEFINITIONS@
retspace = 18


@DOC-DESCRIPTION@
Push a window onto the stack of windows that have the current status bar.  
@DOC-SYNOPSIS@
@STRONG gxk_status_window_pop@ ();

@DOC-VARIABLE-DEFINITIONS@
parspace = 3

@DOC-VARIABLE-DEFINITIONS@
retspace = 3


@DOC-DESCRIPTION@
Pop the most recently pushed window from the status bar window stack.  
@DOC-SYNOPSIS@
@STRONG gxk_size_width@ (@EMPH icon_size@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 24

@DOC-VARIABLE-DEFINITIONS@
type = GtkIconSize\ 
typeraw = GtkIconSize 
@DOC-PARAMETER@
icon_size
@DOC-PARDESC@
image size id

@DOC-VARIABLE-DEFINITIONS@
retspace = 24

@DOC-RETURNS@
image size width

@DOC-DESCRIPTION@
Return the width of a specific image size.  
@DOC-SYNOPSIS@
@STRONG gxk_size_height@ (@EMPH icon_size@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 24

@DOC-VARIABLE-DEFINITIONS@
type = GtkIconSize\ 
typeraw = GtkIconSize 
@DOC-PARAMETER@
icon_size
@DOC-PARDESC@
image size id

@DOC-VARIABLE-DEFINITIONS@
retspace = 24

@DOC-RETURNS@
image size height

@DOC-DESCRIPTION@
Return the height of a specific image size.  
@DOC-SYNOPSIS@
@STRONG gxk_stock_image@ (@EMPH stock_icon_id@, @EMPH icon_size@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 28

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
stock_icon_id
@DOC-PARDESC@
stock name

@DOC-VARIABLE-DEFINITIONS@
type = GtkIconSize\ 
typeraw = GtkIconSize 
@DOC-PARAMETER@
icon_size
@DOC-PARDESC@
image size

@DOC-VARIABLE-DEFINITIONS@
retspace = 28

@DOC-RETURNS@
a visible GtkImage widget or @EMPH NULL@

@DOC-DESCRIPTION@
Create a GtkImage widget with a stock image of a certain size, or return @EMPH NULL@ if the image doesn't exist. The returned image widget correctly displays the stock icon, honouring prelight and sensitivity state of the widget.  
@DOC-SYNOPSIS@
@STRONG gxk_stock_button@ (@EMPH stock_id@, @EMPH label@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 23

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
stock_id
@DOC-PARDESC@
stock name

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
label
@DOC-PARDESC@
button text

@DOC-VARIABLE-DEFINITIONS@
retspace = 23

@DOC-RETURNS@
a visible GtkButton widget

@DOC-DESCRIPTION@
Create a GtkButton widget with a stock image and custom label text.  
@DOC-SYNOPSIS@
@STRONG gxk_stock_button_child@ (@EMPH stock_id@, @EMPH label@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 23

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
stock_id
@DOC-PARDESC@
stock name

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
label
@DOC-PARDESC@
button text

@DOC-VARIABLE-DEFINITIONS@
retspace = 23

@DOC-RETURNS@
a visible widget suitable as GtkButton child

@DOC-DESCRIPTION@
This function does the same as @STRONG gxk_stock_button()@ except for creating the actual button. The button's child is instead returned to the caller, this might e.g. be usefull if a button is created containing multiple children which are shown only selectively during runtime.  
@DOC-SYNOPSIS@
@STRONG gxk_stock_register_icon@ (@EMPH icon@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 26

@DOC-VARIABLE-DEFINITIONS@
type = const\ GxkStockIcon*
typeraw = const GxkStockIcon*
@DOC-PARAMETER@
icon
@DOC-PARDESC@
a validly filled out GxkStockIcon

@DOC-VARIABLE-DEFINITIONS@
retspace = 26


@DOC-DESCRIPTION@
Register a new stock icon from an inlined pixbuf. The inlined pixbuf pixels are not copied, so the caller must make sure for the data to remain valid.  
@DOC-SYNOPSIS@
@STRONG gxk_stock_register_icons@ (@EMPH n_icons@, @EMPH icons@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 29

@DOC-VARIABLE-DEFINITIONS@
type = guint\ \ \ \ \ \ \ \ \ \ \ \ \ \ 
typeraw = guint              
@DOC-PARAMETER@
n_icons
@DOC-PARDESC@
number of icons to register

@DOC-VARIABLE-DEFINITIONS@
type = const\ GxkStockIcon*
typeraw = const GxkStockIcon*
@DOC-PARAMETER@
icons
@DOC-PARDESC@
a validly filled out array of GxkStockIcon

@DOC-VARIABLE-DEFINITIONS@
retspace = 29


@DOC-DESCRIPTION@
For all @EMPH n_icons@ contained in @EMPH icons@, call @STRONG gxk_stock_register_icon()@.  
@DOC-SYNOPSIS@
@STRONG gxk_stock_register_action@ (@EMPH action@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 30

@DOC-VARIABLE-DEFINITIONS@
type = const\ GxkStockAction*
typeraw = const GxkStockAction*
@DOC-PARAMETER@
action
@DOC-PARDESC@
a validly filled out GxkStockAction

@DOC-VARIABLE-DEFINITIONS@
retspace = 30


@DOC-DESCRIPTION@
Register a new stock action. The new stock action @EMPH action-@>stock_id is registered with an action label of @EMPH action-@>label and the stock icon @EMPH action-@>stock_fallback. If @EMPH action-@>label is @EMPH NULL@, @EMPH action-@>stock_fallback must not be @EMPH NULL@, and @EMPH action-@>stock_id becomes merely an alias of @EMPH action-@>stock_fallback.  
@DOC-SYNOPSIS@
@STRONG gxk_stock_register_actions@ (@EMPH n_actions@, @EMPH actions@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 33

@DOC-VARIABLE-DEFINITIONS@
type = guint\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
typeraw = guint                
@DOC-PARAMETER@
n_actions
@DOC-PARDESC@
number of actions to register

@DOC-VARIABLE-DEFINITIONS@
type = const\ GxkStockAction*
typeraw = const GxkStockAction*
@DOC-PARAMETER@
actions
@DOC-PARDESC@
a validly filled out array of GxkStockAction

@DOC-VARIABLE-DEFINITIONS@
retspace = 33


@DOC-DESCRIPTION@
For all @EMPH n_actions@ contained in @EMPH actions@, call @STRONG gxk_stock_register_action()@.  
@DOC-SYNOPSIS@
@STRONG gxk_stock_fallback_pixbuf@ (@EMPH stock_id@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 23

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
stock_id
@DOC-PARDESC@
stock name

@DOC-VARIABLE-DEFINITIONS@
retspace = 23

@DOC-RETURNS@
this @EMPH stock_id@'s pixbuf (or @EMPH NULL@ for invalid stock ids)

@DOC-DESCRIPTION@
Return the pixbuf associated with @EMPH stock_id@, the pixbuf is owned by the stock system and persists throughout runtime. To display stock icons in widgets use @STRONG gxk_stock_image()@ and not this pixbuf.  
@DOC-SYNOPSIS@
@STRONG gxk_stock_icon_window@ (@EMPH stock_id@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 23

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
stock_id
@DOC-PARDESC@
a valid stock icon name

@DOC-VARIABLE-DEFINITIONS@
retspace = 23

@DOC-RETURNS@
a window showing the stock icon

@DOC-DESCRIPTION@
Create a window displaying a stock icon which is transparent according to the icon's alpha mask. Such windows are mostly usefull to implement drag-and-drop operations with stock icons.  
@DOC-SYNOPSIS@
@STRONG gxk_text_view_enter_browse_mode@ (@EMPH tview@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 20

@DOC-VARIABLE-DEFINITIONS@
type = GtkTextView*
typeraw = GtkTextView*
@DOC-PARAMETER@
tview
@DOC-PARDESC@
a GtkTextView object

@DOC-VARIABLE-DEFINITIONS@
retspace = 20


@DOC-DESCRIPTION@
Install key press handlers on a text view which allow scrolling its contents into any direction.  
@DOC-SYNOPSIS@
@STRONG gxk_text_view_leave_browse_mode@ (@EMPH tview@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 20

@DOC-VARIABLE-DEFINITIONS@
type = GtkTextView*
typeraw = GtkTextView*
@DOC-PARAMETER@
tview
@DOC-PARDESC@
a GtkTextView object

@DOC-VARIABLE-DEFINITIONS@
retspace = 20


@DOC-DESCRIPTION@
Deinstall key press handlers previously installed with @STRONG gxk_text_view_enter_browse_mode()@.  
@DOC-SYNOPSIS@
@STRONG gxk_text_view_cursor_to_start@ (@EMPH tview@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 20

@DOC-VARIABLE-DEFINITIONS@
type = GtkTextView*
typeraw = GtkTextView*
@DOC-PARAMETER@
tview
@DOC-PARDESC@
a GtkTextView object

@DOC-VARIABLE-DEFINITIONS@
retspace = 20


@DOC-DESCRIPTION@
Move the insertion and selection bound mark to the start of the text view's buffer and keep the cursor on screen.  
@DOC-SYNOPSIS@
@STRONG gxk_text_view_cursor_to_end@ (@EMPH tview@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 20

@DOC-VARIABLE-DEFINITIONS@
type = GtkTextView*
typeraw = GtkTextView*
@DOC-PARAMETER@
tview
@DOC-PARDESC@
a GtkTextView object

@DOC-VARIABLE-DEFINITIONS@
retspace = 20


@DOC-DESCRIPTION@
Move the insertion and selection bound mark to the end of the text view's buffer and keep the cursor on screen.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_create@ (@EMPH flags@, @EMPH string@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 28

@DOC-VARIABLE-DEFINITIONS@
type = GxkScrollTextFlags\ 
typeraw = GxkScrollTextFlags 
@DOC-PARAMETER@
flags
@DOC-PARDESC@
scroll text flags

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*\ \ \ \ \ \ \ 
typeraw = const gchar*       
@DOC-PARAMETER@
string
@DOC-PARDESC@
default contents

@DOC-VARIABLE-DEFINITIONS@
retspace = 28


@DOC-DESCRIPTION@
Create a non-editable scrollable text view. Behaviour and apperance can be tweaked by specifying various @EMPH flags@ combinations out of: GXK_SCROLL_TEXT_MONO_SPACED - use a fixed width font; GXK_SCROLL_TEXT_CENTER - center @EMPH string@; GXK_SCROLL_TEXT_NO_WRAP - disallow word wrapping of @EMPH string@; GXK_SCROLL_TEXT_SHEET_BG - use white as default background (similar to lists, trees and text widgets) instead of the normal grey widget background; GXK_SCROLL_TEXT_NAVIGATABLE - add a navigation bar and allow the user to navigate through clickable links.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_clear@ (@EMPH sctext@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
sctext
@DOC-PARDESC@
a scroll text widget as returned from @STRONG gxk_scroll_text_create()@

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
Clear the textual contents of this @EMPH sctext@ and reset the indentation level.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_set@ (@EMPH sctext@, @EMPH string@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 21

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*\ \ 
typeraw = GtkWidget*  
@DOC-PARAMETER@
sctext
@DOC-PARDESC@
a scroll text widget as returned from @STRONG gxk_scroll_text_create()@

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
string
@DOC-PARDESC@
the new text to be displayed

@DOC-VARIABLE-DEFINITIONS@
retspace = 21


@DOC-DESCRIPTION@
Replace the textual contents of this @EMPH sctext@ with @EMPH string@.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_set_tsm@ (@EMPH sctext@, @EMPH string@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 21

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*\ \ 
typeraw = GtkWidget*  
@DOC-PARAMETER@
sctext
@DOC-PARDESC@
a scroll text widget as returned from @STRONG gxk_scroll_text_create()@

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
string
@DOC-PARDESC@
the new text to be displayed in tag-span-markup

@DOC-VARIABLE-DEFINITIONS@
retspace = 21


@DOC-DESCRIPTION@
Replace the textual contents of this @EMPH sctext@ with @EMPH string@, where @EMPH string@ is marked up with tag-span-markup.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_append@ (@EMPH sctext@, @EMPH string@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 21

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*\ \ 
typeraw = GtkWidget*  
@DOC-PARAMETER@
sctext
@DOC-PARDESC@
a scroll text widget as returned from @STRONG gxk_scroll_text_create()@

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
string
@DOC-PARDESC@
the text to be displayed

@DOC-VARIABLE-DEFINITIONS@
retspace = 21


@DOC-DESCRIPTION@
Append @EMPH string@ to the textual contents of this @EMPH sctext@.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_append_tsm@ (@EMPH sctext@, @EMPH string@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 21

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*\ \ 
typeraw = GtkWidget*  
@DOC-PARAMETER@
sctext
@DOC-PARDESC@
a scroll text widget as returned from @STRONG gxk_scroll_text_create()@

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
string
@DOC-PARDESC@
the text to be displayed in tag-span-markup

@DOC-VARIABLE-DEFINITIONS@
retspace = 21


@DOC-DESCRIPTION@
Append @EMPH string@ to the textual contents of this @EMPH sctext@, where @EMPH string@ is marked up with tag-span-markup.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_append_file@ (@EMPH sctext@, @EMPH file_name@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 24

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*\ \ 
typeraw = GtkWidget*  
@DOC-PARAMETER@
sctext
@DOC-PARDESC@
a scroll text widget as returned from @STRONG gxk_scroll_text_create()@

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
file_name
@DOC-PARDESC@
file holding the text to be displayed

@DOC-VARIABLE-DEFINITIONS@
retspace = 24


@DOC-DESCRIPTION@
Append the contents of @EMPH file_name@ to the textual contents of this @EMPH sctext@.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_append_file_tsm@ (@EMPH sctext@, @EMPH file_name@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 24

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*\ \ 
typeraw = GtkWidget*  
@DOC-PARAMETER@
sctext
@DOC-PARDESC@
a scroll text widget as returned from @STRONG gxk_scroll_text_create()@

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
file_name
@DOC-PARDESC@
file holding the text to be displayed in tag-span-markup

@DOC-VARIABLE-DEFINITIONS@
retspace = 24


@DOC-DESCRIPTION@
Append the contents of @EMPH file_name@ to the textual contents of this @EMPH sctext@, where those contents are marked up with tag-span-markup.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_aprintf@ (@EMPH sctext@, @EMPH text_fmt@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 11

@DOC-VARIABLE-DEFINITIONS@
type = 
typeraw = 
@DOC-PARAMETER@
sctext
@DOC-PARDESC@
a scroll text widget as returned from @STRONG gxk_scroll_text_create()@

@DOC-VARIABLE-DEFINITIONS@
type = 
typeraw = 
@DOC-PARAMETER@
text_fmt
@DOC-PARDESC@
@STRONG printf(3)@ style format string

@DOC-VARIABLE-DEFINITIONS@
retspace = 11


@DOC-DESCRIPTION@
Append @EMPH text_fmt@ to the textual contents of this @EMPH sctext@.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_get_text_view@ (@EMPH sctext@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
sctext
@DOC-PARDESC@
a scroll text widget as returned from @STRONG gxk_scroll_text_create()@

@DOC-VARIABLE-DEFINITIONS@
retspace = 19

@DOC-RETURNS@
a GtkTextView widget

@DOC-DESCRIPTION@
Return the internally used GtkTextView of this @EMPH sctext@.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_push_indent@ (@EMPH sctext@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
sctext
@DOC-PARDESC@
a scroll text widget as returned from @STRONG gxk_scroll_text_create()@

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
Increment the global indentation level, which affects overall indentation of text added with @STRONG gxk_scroll_text_append()@ and friends.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_pop_indent@ (@EMPH sctext@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
sctext
@DOC-PARDESC@
a scroll text widget as returned from @STRONG gxk_scroll_text_create()@

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
Decrement the global indentation level after a previous increment with @STRONG gxk_scroll_text_push_indent()@.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_display@ (@EMPH sctext@, @EMPH uri@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 21

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*\ \ 
typeraw = GtkWidget*  
@DOC-PARAMETER@
sctext
@DOC-PARDESC@
a scroll text widget as returned from @STRONG gxk_scroll_text_create()@

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
uri
@DOC-PARDESC@
resource locator

@DOC-VARIABLE-DEFINITIONS@
retspace = 21


@DOC-DESCRIPTION@
Load and display the resource from @EMPH uri@ without altering the navigation history.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_advance@ (@EMPH sctext@, @EMPH uri@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 21

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*\ \ 
typeraw = GtkWidget*  
@DOC-PARAMETER@
sctext
@DOC-PARDESC@
a scroll text widget as returned from @STRONG gxk_scroll_text_create()@

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
uri
@DOC-PARDESC@
resource locator

@DOC-VARIABLE-DEFINITIONS@
retspace = 21


@DOC-DESCRIPTION@
Relative to the url currently being displayed load and display the possibly partial (relative) url @EMPH uri@. Navigation history is affected.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_enter@ (@EMPH sctext@, @EMPH uri@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 21

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*\ \ 
typeraw = GtkWidget*  
@DOC-PARAMETER@
sctext
@DOC-PARDESC@
a scroll text widget as returned from @STRONG gxk_scroll_text_create()@

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
uri
@DOC-PARDESC@
resource locator

@DOC-VARIABLE-DEFINITIONS@
retspace = 21


@DOC-DESCRIPTION@
Load and display the url @EMPH uri@. Navigation history is affected.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_set_index@ (@EMPH sctext@, @EMPH uri@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 21

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*\ \ 
typeraw = GtkWidget*  
@DOC-PARAMETER@
sctext
@DOC-PARDESC@
a scroll text widget as returned from @STRONG gxk_scroll_text_create()@

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
uri
@DOC-PARDESC@
resource locator

@DOC-VARIABLE-DEFINITIONS@
retspace = 21


@DOC-DESCRIPTION@
Affect what uri is being displayed by pressing on the "Index" navigation button.  
@DOC-SYNOPSIS@
@STRONG gxk_scroll_text_rewind@ (@EMPH sctext@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
sctext
@DOC-PARDESC@
a scroll text widget as returned from @STRONG gxk_scroll_text_create()@

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
Go back in navigation history as far as possible.  
@DOC-SYNOPSIS@
@STRONG gxk_toolbar_new@ (@EMPH nullify_pointer@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 27

@DOC-VARIABLE-DEFINITIONS@
type = gpointer\ 
typeraw = gpointer 
@DOC-PARAMETER@
nullify_pointer
@DOC-PARDESC@
location of a pointer to nullify or @EMPH NULL@

@DOC-VARIABLE-DEFINITIONS@
retspace = 27

@DOC-RETURNS@
newly created toolbar

@DOC-DESCRIPTION@
Create a new toolbar and setup handlers to nullify @EMPH nullify_pointer@ once the toolbar is destructed.  
@DOC-SYNOPSIS@
@STRONG gxk_toolbar_append@ (@EMPH self@, @EMPH child_type@, @EMPH name@, @EMPH tooltip@, @EMPH icon@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 29

@DOC-VARIABLE-DEFINITIONS@
type = GxkToolbar*\ \ \ \ \ 
typeraw = GxkToolbar*     
@DOC-PARAMETER@
self
@DOC-PARDESC@
a toolbar as returned from @STRONG gxk_toolbar_new()@

@DOC-VARIABLE-DEFINITIONS@
type = GxkToolbarChild\ 
typeraw = GxkToolbarChild 
@DOC-PARAMETER@
child_type
@DOC-PARDESC@
child type

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*\ \ \ \ 
typeraw = const gchar*    
@DOC-PARAMETER@
name
@DOC-PARDESC@
name of the child wiget (underscores indicate hotkeys)

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*\ \ \ \ 
typeraw = const gchar*    
@DOC-PARAMETER@
tooltip
@DOC-PARDESC@
tooltip to be displayed with this child

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*\ \ \ \ \ \ 
typeraw = GtkWidget*      
@DOC-PARAMETER@
icon
@DOC-PARDESC@
image widget for buttons or a custom widget

@DOC-VARIABLE-DEFINITIONS@
retspace = 29

@DOC-RETURNS@
newly created toolbar child

@DOC-DESCRIPTION@
Append a new child to the toolbar, named @EMPH name@, with tooltip @EMPH tooltip@ and containing @EMPH icon@. @EMPH icon@ is usually an image widget, unless @EMPH GXK_TOOLBAR_WIDGET@ or one of its variants was specified as child type. The possible child types are: @EMPH GXK_TOOLBAR_SPACE@ - add a vertical space; @EMPH GXK_TOOLBAR_SEPARATOR@ - add a vertical seperator; @EMPH GXK_TOOLBAR_BUTTON@ - add a button widget; @EMPH GXK_TOOLBAR_TRUNC_BUTTON@ - like @EMPH GXK_TOOLBAR_BUTTON@, but clip the @EMPH name@ label if it width exceeds the button size; @EMPH GXK_TOOLBAR_EXTRA_BUTTON@ - like @EMPH GXK_TOOLBAR_BUTTON@, but leave the button's size alone, it is not made homogeneous with other toolbar children. @EMPH GXK_TOOLBAR_TOGGLE@ - add a toggle button widget; @EMPH GXK_TOOLBAR_TRUNC_TOGGLE@ - like @EMPH GXK_TOOLBAR_TRUNC_BUTTON@ for toggle buttons; @EMPH GXK_TOOLBAR_EXTRA_TOGGLE@ - like @EMPH GXK_TOOLBAR_EXTRA_BUTTON@ for toggle buttons; @EMPH GXK_TOOLBAR_WIDGET@ - treat @EMPH icon@ as a custom widget, and don't put it into a button, toggle button or other activatable container; GXK_TOOLBAR_TRUNC_WIDGET - like @EMPH GXK_TOOLBAR_TRUNC_BUTTON@ for custom widgets; GXK_TOOLBAR_EXTRA_WIDGET - like @EMPH GXK_TOOLBAR_EXTRA_BUTTON@ for custom widgets; GXK_TOOLBAR_FILL_WIDGET - like @EMPH GXK_TOOLBAR_EXTRA_WIDGET@ but extra unused space of the toolbar is given to this child.  
@DOC-SYNOPSIS@
@STRONG gxk_toolbar_append_stock@ (@EMPH self@, @EMPH child_type@, @EMPH name@, @EMPH tooltip@, @EMPH stock_id@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 29

@DOC-VARIABLE-DEFINITIONS@
type = GxkToolbar*\ \ \ \ \ 
typeraw = GxkToolbar*     
@DOC-PARAMETER@
self
@DOC-PARDESC@
a toolbar as returned from @STRONG gxk_toolbar_new()@

@DOC-VARIABLE-DEFINITIONS@
type = GxkToolbarChild\ 
typeraw = GxkToolbarChild 
@DOC-PARAMETER@
child_type
@DOC-PARDESC@
child type

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*\ \ \ \ 
typeraw = const gchar*    
@DOC-PARAMETER@
name
@DOC-PARDESC@
name of the child wiget (underscores indicate hotkeys)

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*\ \ \ \ 
typeraw = const gchar*    
@DOC-PARAMETER@
tooltip
@DOC-PARDESC@
tooltip to be displayed with this child

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*\ \ \ \ 
typeraw = const gchar*    
@DOC-PARAMETER@
stock_id
@DOC-PARDESC@
stock name

@DOC-VARIABLE-DEFINITIONS@
retspace = 29

@DOC-RETURNS@
newly created toolbar child

@DOC-DESCRIPTION@
Like @STRONG gxk_toolbar_append()@ but create the icon widget from @EMPH stock_id@.  
@DOC-SYNOPSIS@
@STRONG gxk_toolbar_append_choice@ (@EMPH self@, @EMPH child_type@, @EMPH choice_func@, @EMPH data@, @EMPH data_free@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 35

@DOC-VARIABLE-DEFINITIONS@
type = GxkToolbar*\ \ \ \ \ \ \ \ \ \ 
typeraw = GxkToolbar*          
@DOC-PARAMETER@
self
@DOC-PARDESC@
a toolbar as returned from @STRONG gxk_toolbar_new()@

@DOC-VARIABLE-DEFINITIONS@
type = GxkToolbarChild\ \ \ \ \ \ 
typeraw = GxkToolbarChild      
@DOC-PARAMETER@
child_type
@DOC-PARDESC@
child type (one for the button variants)

@DOC-VARIABLE-DEFINITIONS@
type = GxkToolbarChoiceFunc\ 
typeraw = GxkToolbarChoiceFunc 
@DOC-PARAMETER@
choice_func
@DOC-PARDESC@
callback notified if the choice changes

@DOC-VARIABLE-DEFINITIONS@
type = gpointer\ \ \ \ \ \ \ \ \ \ \ \ \ 
typeraw = gpointer             
@DOC-PARAMETER@
data
@DOC-PARDESC@
extra data argument to the callback

@DOC-VARIABLE-DEFINITIONS@
type = GDestroyNotify\ \ \ \ \ \ \ 
typeraw = GDestroyNotify       
@DOC-PARAMETER@
data_free
@DOC-PARDESC@
callback to destroy @EMPH data@

@DOC-VARIABLE-DEFINITIONS@
retspace = 35

@DOC-RETURNS@
newly created toolbar choice child

@DOC-DESCRIPTION@
Create and append a new toolbar child which offers a choice menu of various options to the user.  
@DOC-SYNOPSIS@
@STRONG gxk_toolbar_choice_add@ (@EMPH widget@, @EMPH name@, @EMPH tooltip@, @EMPH icon@, @EMPH choice@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 22

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*\ \ 
typeraw = GtkWidget*  
@DOC-PARAMETER@
widget
@DOC-PARDESC@
a toolbar child as returned from @STRONG gxk_toolbar_append_choice()@

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
name
@DOC-PARDESC@
name of the choice child wiget

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
tooltip
@DOC-PARDESC@
tooltip to be displayed with this choice child

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*\ \ 
typeraw = GtkWidget*  
@DOC-PARAMETER@
icon
@DOC-PARDESC@
image widget for this choice

@DOC-VARIABLE-DEFINITIONS@
type = guint\ \ \ \ \ \ \ 
typeraw = guint       
@DOC-PARAMETER@
choice
@DOC-PARDESC@
unique integer id to identify this choice

@DOC-VARIABLE-DEFINITIONS@
retspace = 22

@DOC-RETURNS@
newly created toolbar choice child

@DOC-DESCRIPTION@
Add a choice variant to a toolbar choice child.  
@DOC-SYNOPSIS@
@STRONG gxk_toolbar_choice_set@ (@EMPH widget@, @EMPH name@, @EMPH tooltip@, @EMPH icon@, @EMPH choice@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 22

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*\ \ 
typeraw = GtkWidget*  
@DOC-PARAMETER@
widget
@DOC-PARDESC@
a toolbar child as returned from @STRONG gxk_toolbar_append_choice()@

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
name
@DOC-PARDESC@
name of the choice child wiget

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
tooltip
@DOC-PARDESC@
tooltip to be displayed with this choice child

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*\ \ 
typeraw = GtkWidget*  
@DOC-PARAMETER@
icon
@DOC-PARDESC@
image widget for this choice

@DOC-VARIABLE-DEFINITIONS@
type = guint\ \ \ \ \ \ \ 
typeraw = guint       
@DOC-PARAMETER@
choice
@DOC-PARDESC@
unique integer id to identify this choice

@DOC-VARIABLE-DEFINITIONS@
retspace = 22

@DOC-RETURNS@
newly created toolbar choice child

@DOC-DESCRIPTION@
Add a choice variant to a toolbar choice child and make this variant the currently selected one.  
@DOC-SYNOPSIS@
@STRONG gxk_type_register_generated@ (@EMPH n_entries@, @EMPH entries@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 35

@DOC-VARIABLE-DEFINITIONS@
type = guint\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
typeraw = guint                  
@DOC-PARAMETER@
n_entries
@DOC-PARDESC@
number of generated types to register

@DOC-VARIABLE-DEFINITIONS@
type = const\ GxkTypeGenerated*
typeraw = const GxkTypeGenerated*
@DOC-PARAMETER@
entries
@DOC-PARDESC@
GxkTypeGenerated type descriptions

@DOC-VARIABLE-DEFINITIONS@
retspace = 35


@DOC-DESCRIPTION@
Register each of the generated type entries with the type system. Currently supported parent types are @EMPH G_TYPE_ENUM@ and @EMPH G_TYPE_FLAGS@ in which cases the @EMPH type_data@ member must point to a @EMPH NULL@ terminated array of GEnumValue or GFlagValue structures. No extra copying is performed, so the passed in structures have to persist throughout runtime.  
@DOC-SYNOPSIS@
@STRONG g_object_set_long@ (@EMPH object@, @EMPH name@, @EMPH v_long@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 21

@DOC-VARIABLE-DEFINITIONS@
type = gpointer\ \ \ \ 
typeraw = gpointer    
@DOC-PARAMETER@
object
@DOC-PARDESC@
a valid GObject

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
name
@DOC-PARDESC@
name of the long value to set

@DOC-VARIABLE-DEFINITIONS@
type = glong\ \ \ \ \ \ \ 
typeraw = glong       
@DOC-PARAMETER@
v_long
@DOC-PARDESC@
the actual value

@DOC-VARIABLE-DEFINITIONS@
retspace = 21


@DOC-DESCRIPTION@
Convenience variant of @STRONG g_object_set_data()@ to set a long instead of a pointer.  
@DOC-SYNOPSIS@
@STRONG g_object_get_long@ (@EMPH object@, @EMPH name@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 21

@DOC-VARIABLE-DEFINITIONS@
type = gpointer\ \ \ \ 
typeraw = gpointer    
@DOC-PARAMETER@
object
@DOC-PARDESC@
a valid GObject

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
name
@DOC-PARDESC@
name of the long value to retrive

@DOC-VARIABLE-DEFINITIONS@
retspace = 21

@DOC-RETURNS@
the actual value

@DOC-DESCRIPTION@
Convenience variant of @STRONG g_object_get_data()@ to retrive a long instead of a pointer.  
@DOC-SYNOPSIS@
@STRONG gxk_widget_make_insensitive@ (@EMPH widget@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
widget
@DOC-PARDESC@
a valid GtkWidget

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
This function is euqivalent to gtk_widget_set_sensitive (@EMPH widget@, @STRONG FALSE@); It exists as a convenient signal connection callback.  
@DOC-SYNOPSIS@
@STRONG gxk_widget_make_sensitive@ (@EMPH widget@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
widget
@DOC-PARDESC@
a valid GtkWidget

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
This function is euqivalent to gtk_widget_set_sensitive (@EMPH widget@, @STRONG TRUE@); It exists as a convenient signal connection callback.  
@DOC-SYNOPSIS@
@STRONG gxk_idle_show_widget@ (@EMPH widget@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
widget
@DOC-PARDESC@
a valid widget

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
Defer showing this widget until the next idle handler is run. This is usefull if other things are pending which need to be processed first, for instance hiding other toplevels.  
@DOC-SYNOPSIS@
@STRONG gxk_widget_showraise@ (@EMPH widget@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
widget
@DOC-PARDESC@
a valid widget

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
Show the widget. If the widget is a toplevel, also raise its window to top.  
@DOC-SYNOPSIS@
@STRONG gxk_toplevel_delete@ (@EMPH widget@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
widget
@DOC-PARDESC@
a widget having a toplevel

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
This function is usefull to produce the exact same effect as if the user caused window manager triggered window deletion on the toplevel of @EMPH widget@.  
@DOC-SYNOPSIS@
@STRONG gxk_toplevel_activate_default@ (@EMPH widget@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
widget
@DOC-PARDESC@
a widget having a toplevel

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
Activate the default widget of the toplevel of @EMPH widget@.  
@DOC-SYNOPSIS@
@STRONG gxk_toplevel_hide@ (@EMPH widget@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
widget
@DOC-PARDESC@
a widget having a toplevel

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
Hide the toplevel of @EMPH widget@.  
@DOC-SYNOPSIS@
@STRONG gxk_widget_modify_as_title@ (@EMPH widget@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
widget
@DOC-PARDESC@
a valid GtkWidget

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
Modify the widget and it's style, so that it is insensitive, but doesn't quite look that way. Usefull for inactive title menu items in menus.  
@DOC-SYNOPSIS@
@STRONG gxk_widget_modify_bg_as_base@ (@EMPH widget@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
widget
@DOC-PARDESC@
a valid GtkWidget

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
Modify the widget's background to look like the background of a text or list widget (usually white). This is usefull if a hbox or similar widget is used to "simulate" a list, text, or similar widget.  
@DOC-SYNOPSIS@
@STRONG gxk_widget_modify_base_as_bg@ (@EMPH widget@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
widget
@DOC-PARDESC@
a valid GtkWidget

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
Modify the widget's base background (used by list and text widgets) to look like an ordinary widget background. This is usefull if a list, text or similar widget shouldn't stand out as such, e.g. when the GtkTextView widget displaying a long non-editable text should look similar to a GtkLabel.  
@DOC-SYNOPSIS@
@STRONG gxk_widget_force_bg_clear@ (@EMPH widget@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 19

@DOC-VARIABLE-DEFINITIONS@
type = GtkWidget*
typeraw = GtkWidget*
@DOC-PARAMETER@
widget
@DOC-PARDESC@
a valid GtkWidget

@DOC-VARIABLE-DEFINITIONS@
retspace = 19


@DOC-DESCRIPTION@
Enforce drawing of a widget's background. Some widgets do not explicitely draw their background, but simply draw themsleves on top of their parent's background. This function forces the widget into drawing its background according to its style settings.  
@DOC-SYNOPSIS@
@STRONG gxk_signal_handler_pending@ (@EMPH instance@, @EMPH detailed_signal@, @EMPH callback@, @EMPH data@);

@DOC-VARIABLE-DEFINITIONS@
parspace = 30

@DOC-VARIABLE-DEFINITIONS@
type = gpointer\ \ \ \ 
typeraw = gpointer    
@DOC-PARAMETER@
instance
@DOC-PARDESC@
object instance with signals

@DOC-VARIABLE-DEFINITIONS@
type = const\ gchar*
typeraw = const gchar*
@DOC-PARAMETER@
detailed_signal
@DOC-PARDESC@
signal name

@DOC-VARIABLE-DEFINITIONS@
type = GCallback\ \ \ 
typeraw = GCallback   
@DOC-PARAMETER@
callback
@DOC-PARDESC@
custom callback function

@DOC-VARIABLE-DEFINITIONS@
type = gpointer\ \ \ \ 
typeraw = gpointer    
@DOC-PARAMETER@
data
@DOC-PARDESC@
callback data

@DOC-VARIABLE-DEFINITIONS@
retspace = 30

@DOC-RETURNS@
whether callback is connected

@DOC-DESCRIPTION@
Find out whether a specific @EMPH callback@ is pending for a specific signal on an instance. @EMPH TRUE@ is returned if the @EMPH callback@ is found, @EMPH FALSE@ otherwise.  
