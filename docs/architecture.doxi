@doxer_dnl      # emacs: -*- mode: texinfo; texinfo-open-quote: "\""; texinfo-close-quote: "\""; -*-
@doxer_set{rvstamp,git_author_date,parse_date} $Date$
@include @doxer_get{DOXI_INCLUDE_FILE}
@doxer_set{title}	BEAST - Project Architecture

@titlesection
@doctitle		@beast - Project Architecture
@*
@docauthor              Tim Janik
@docauthor              Stefan Westerfeld
@*
@center 		Document revised: @doxer_get{rvstamp}
@*

This document provides an architectural overview of the @beast
audio synthesis package and related components.

@tocsection Table of Contents

@section Programs and Libraries

@center @image{images/beast-progs.png, Programs and Libraries}
@*

@enumerate
@item SFIDL - The IDL compiler (@uri{sfidl.1.html,sfidl(1)}) used for language bindings and plugins
@item BseWaveTool - A small program to generate multi-sample .BSEWAVE files
@item BEAST - a Gtk+ based GUI front-end (@uri{beast.1.html,beast(1)}) for @bse
@item GXK - a library containing extensions to Gtk+, such as XML-parser for widget templates or an action administration system
@item BSESCM - a Guile based scheme shell (@uri{bsescm.1.html,bsescm(1)}) for @bse
@item @bse - synthesis and sequencing library
@item @sfi - Interface library, consisting of:
@itemize
@item a value abstractiong SfiValue (based on GValue)
@item a serializable parameter abstraction based on GParamSpec
@item a threading abstraction SfiThread (based on GThread)
@item primitive type implementations (record, sequenzes, rings)
@item a glue layer to allow function calls and signals across process boundaries
@item a simple communication layer based on SfiValue for process boundaries
@item basic serialization mechanisms to allow implementations of persistent object storage
@item miscellaneous utilities.
@done
@item GLib-Extra - utility functions which are subject to be folded back into GLib at some point.
@done

@section Components

@center @image{images/beast-components.png, Components}
@*

@enumerate
@item BSESCM - a Guile based scheme shell (@uri{bsescm.1.html,bsescm(1)}) for @bse used for scripting @beast and to run standalone scripts
@item @beast - a Gtk+ based GUI front-end (@uri{beast.1.html,beast(1)}) for @bse
@item @bse - the sequencing and synthesis core, consisting of:
@itemize
@item Plugin interface
@item MIDI Event processing logic
@item MIDI File import
@item Undo/redo stack
@item Object framework
@item Glue layer + scripting objects
@item Song, track, part, mixer and wave objects
@item Synthesis networks
@item Sequencer (seperately threaded)
@item Synthesis Engine (seperately threaded)
@item Input output drivers for PCM and MIDI
@item OSS MIDI and PCM driver
@item Standard synthesis modules
@done
@done

@section Samples and Wave Files

Sample Data is organized at three levels:

@enumerate
@item Wave Chunks - a chunk contains one sample
@item Waves - multiple chunks can be put into a wave; this allows storing different samples
              which should be played for different notes
@item Wave Libraries - multiple waves can be put into a wave library
@done

@subsection Extra Information (XInfo Strings) for Wave Files

XInfos consist of a list of "key=value" pairs.
Values need to be valid UTF-8 strings, while keys may consist only
of the lowercase letters 'a'-'z', the digits '0'-'9' and a dash '-'.

@subsubsection Wave Chunk specific XInfos

@itemize
@item @strong{label} - The user visible name for this wave chunk.
@item @strong{blurb} - A comment describing this wave chunk.
@item @strong{osc-freq} -
	Note frequency (oscillator frequency) the chunk should be played back at.
	In other words, the note that was played when the chunk was recorded.
@item @strong{loop-type} -
	The loop type needs to be set to indicate that the sample should be looped. Possible values are:
@enumerate
  @item "none" - no loop
  @item "jump" - plays from loop start to loop end, then jumps back to loop start
  @item "ping-pong" - plays from loop start to loop end and then backwards from loop end to loop start
@done
@item @strong{loop-start} -
	The offset in samples for the start of the loop.
@item @strong{loop-end} -
	The offset in samples for the end of the loop.
@item @strong{loop-count} -
	A maximum limit for how often the loop should be repeated.
@item @strong{volume} -
	This can be used to adjust the volume of a wave chunk without changing
	the raw/compressed audio data actually stored. When omitted, it
	defaults to 1.0 (no volume adjustment). Other values are for instance
	0.5 (play sample half as loud, corresponding to a -6dB adjustment) and
	0.25 (corresponds to a -12dB adjustment). The range of valid volume
	adjustments is: 0 < volume <= 1.0, any other value will be ignored.
@item @strong{gus-patch-envelope} -
	Contains the envelope points for a GUS Patch envelope.
@done

@subsubsection Wave specific XInfos

@itemize
@item @strong{label} - The user visible name for this wave.
@item @strong{blurb} - A comment describing this wave.
@item @strong{authors} - A list of the authors who participated in creating the wave file.
@item @strong{license} - The license specifiing redistribution and other legal terms for the wave file.
@item @strong{blurb} - A descriptive text for the wave file.
@item @strong{play-type} -
	Indicates the set of required play back facilities for a wave.
	Supported values are:
@enumerate
  @item wave-mono - for mono wave files,
  @item gus-patch - for GUS Patches (which need a special envelope).
@done
@done

@subsubsection Wave Library specific XInfos

There are currently no XInfos defined for Wave Libraries, because Wave Libraries are not
yet supported.
