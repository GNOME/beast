dnl ************************************
dnl *** include special BEAST macros ***
dnl ************************************
builtin(include, acbeast.m4)dnl

#
# Configure script for BSE-ALSA
#
AC_INIT
AC_CONFIG_SRCDIR([bsepcmdevice-alsa.c])
AC_CONFIG_AUX_DIR(.)
AM_CONFIG_HEADER(configure.h)
AC_PREREQ(2.57)

#
# Package version numbers
#
AC_DIVERT_BEFORE_HELP([
PACKAGE_MAJOR_VERSION=0
PACKAGE_MINOR_VERSION=7
PACKAGE_MICRO_VERSION=2
PACKAGE_INTERFACE_AGE=0
PACKAGE_BINARY_AGE=0
])
dnl#
dnl# Making releases:
dnl#   PACKAGE_MICRO_VERSION += 1;
dnl#   PACKAGE_INTERFACE_AGE += 1;
dnl#   PACKAGE_BINARY_AGE += 1;
dnl# if any functions have been added, set PACKAGE_INTERFACE_AGE to 0.
dnl# if backwards compatibility has been broken,
dnl# set PACKAGE_BINARY_AGE _and_ PACKAGE_INTERFACE_AGE to 0.
dnl# PACKAGE_RELEASE_CANDIDATE may contain rc[0-9]+ or nothing
PACKAGE_RELEASE_CANDIDATE= #rc1

# version number setup
PACKAGE_VERSION=$PACKAGE_MAJOR_VERSION.$PACKAGE_MINOR_VERSION.$PACKAGE_MICRO_VERSION
if test -n "$PACKAGE_RELEASE_CANDIDATE" ; then
    PACKAGE_VERSION=$PACKAGE_VERSION-$PACKAGE_RELEASE_CANDIDATE
fi
AC_SUBST(PACKAGE_MAJOR_VERSION)
AC_SUBST(PACKAGE_MINOR_VERSION)
AC_SUBST(PACKAGE_MICRO_VERSION)
AC_SUBST(PACKAGE_INTERFACE_AGE)
AC_SUBST(PACKAGE_BINARY_AGE)
AC_SUBST(PACKAGE_VERSION)

# compute libtool versions
LT_RELEASE=$PACKAGE_MAJOR_VERSION.$PACKAGE_MINOR_VERSION
LT_CURRENT=`expr $PACKAGE_MICRO_VERSION - $PACKAGE_INTERFACE_AGE`
LT_REVISION=$PACKAGE_INTERFACE_AGE
LT_AGE=`expr $PACKAGE_BINARY_AGE - $PACKAGE_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

dnl figure debugging default, prior to $ac_help setup
dnl
AC_DIVERT_BEFORE_HELP([
if test `expr $PACKAGE_MINOR_VERSION \% 2 \| $PACKAGE_MAJOR_VERSION \< 1` = 1 ; then
        debug_default=yes
else
        debug_default=minimum
fi
])

# architecture information
AC_CANONICAL_TARGET
AC_DEFINE_UNQUOTED(PACKAGE_ARCH_NAME, "$target", [Architecture Description])

# initialize automake, don't define PACKAGE and VERSION
AM_INIT_AUTOMAKE(bse-alsa, $PACKAGE_VERSION, no-define)

# in case we have subdirectories.
AC_PROG_MAKE_SET
# Disable automatic maintainer mode.
AM_MAINTAINER_MODE

# declare --enable-* args and collect ac_help strings
AC_ARG_ENABLE(debug,       [  --enable-debug=[no/minimum/yes] turn on debugging [default=$debug_default]],,enable_debug=$debug_default)
AC_ARG_ENABLE(devel-rules, [  --enable-devel-rules=[no/yes]   turn on developer build rules],,)
# $enable_devel_rules

dnl setup DEBUG defaults
if test "x$enable_debug" = "xyes"; then
  DEBUG_FLAGS="-g -DG_ENABLE_DEBUG"
else if test "x$enable_debug" = "xno"; then
  DEBUG_FLAGS="-DG_DISABLE_CHECKS -DG_DISABLE_CAST_CHECKS" # -DG_DISABLE_ASSERT
else
  DEBUG_FLAGS="-DG_DISABLE_CAST_CHECKS"
fi fi
if test -z "$CFLAGS"; then
  CFLAGS="$DEBUG_FLAGS"
else
  CFLAGS="$CFLAGS $DEBUG_FLAGS"
fi
if test -z "$CXXFLAGS"; then
  CXXFLAGS="$DEBUG_FLAGS"
else
  CXXFLAGS="$CXXFLAGS $DEBUG_FLAGS"
fi

dnl Foreign defaults:
MC_IF_VAR_EQ(enable_static, yes, , enable_static=no)
MC_IF_VAR_EQ(enable_shared, no, , enable_shared=yes)


dnl
dnl Define package requirements.
dnl
AC_DEFUN([AC_LIBBSE_CHECK],
[
    dnl We need BSE, GLib, etc.
    PKG_CHECK_MODULES(BSE, bse >= 0.7.1)
    AC_SUBST(BSE_CFLAGS)
    AC_SUBST(BSE_LIBS)

    dnl --- BSE Drivers directory ---
    AC_MSG_CHECKING([for BSE Driver installation directory])
    bsedriverinstalldir=`$PKG_CONFIG --variable=driverdir bse`
    AC_MSG_RESULT([$bsedriverinstalldir])
    if test -z "$bsedriverinstalldir" ; then
      AC_MSG_ERROR([failed to find installation directory])
    fi
    AC_SUBST(bsedriverinstalldir)
])
AC_DEFUN([AC_ASOUND_CHECK],
[
    saved_cflags="$CFLAGS"
    saved_cxxflags="$CXXFLAGS"
    saved_ldflags="$LDFLAGS"
    CFLAGS="$CFLAGS $BSE_CFLAGS" dnl *** automatically search for libasound under the BSE prefix
    CXXFLAGS="$CFLAGS $BSE_CFLAGS"
    LDFLAGS="$LDFLAGS $BSE_LIBS"
    AC_LANG_SAVE

    dnl --- find asoundlib.h ---
    found_asoundlibh=0
    AC_CHECK_HEADERS(alsa/asoundlib.h, found_asoundlibh=1)
    if test $found_asoundlibh = 0 ; then
	AC_MSG_ERROR([failed to detect asoundlib.h, ALSA not present?])
    fi

    dnl --- check for ALSA >= 1.0.5 ---
    AC_MSG_CHECKING([for ALSA with version >= 1.0])
    found_alsa1=0
    AC_TRY_COMPILE([#include <alsa/asoundlib.h>],[
            #if SND_LIB_MAJOR >= 1
		/* ALSA >= 1.0 present */
	    #else
		#error ALSA version <= 1.0
	    #endif
    ], [ found_alsa1=1; AC_MSG_RESULT(present); ], [ AC_MSG_RESULT(not present); ])
    if test $found_alsa1 = 0; then
	AC_MSG_ERROR([ALSA version 1.0.5 is required to build this package])
    fi
    
    dnl --- check for -lasound ---
    found_libasound=0
    dnl snd_asoundlib_version() was introduced in ALSA 1.0.5
    cflags=$CFLAGS
    ldflags=$LDFLAGS
    CFLAGS=""
    LDFLAGS=""
    AC_CHECK_LIB(asound, snd_asoundlib_version, ALSA_LIBS="-lasound"; found_libasound=1)
    CFLAGS="$cflags"
    LDFLAGS="$ldflags"
    if test $found_libasound = 0; then
	AC_MSG_ERROR([ALSA version 1.0.5 is required to build this package])
    fi
    AC_SUBST(ALSA_LIBS)

    AC_LANG_RESTORE
    CFLAGS="$saved_cflags"
    CXXFLAGS="$saved_cxxflags"
    LDFLAGS="$saved_ldflags"
])

# check compilers and their behaviour, setup CFLAGS
MC_PROG_CC_WITH_CFLAGS
MC_PROG_CXX_WITH_CXXFLAGS
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP
AC_C_CONST
AC_C_INLINE
AC_HEADER_STDC

# Checks for programs
AC_PROG_INSTALL
AC_PROG_LN_S

# initialize libtool, we need dynamic module support
AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL

# Figure build requirement
AC_MSG_CHECKING(whether make is GNU Make)
if $ac_make --version 2>/dev/null | grep '^GNU Make ' >/dev/null ; then
        AC_MSG_RESULT(yes)
else
        AC_MSG_RESULT(no)
        AC_MSG_ERROR(This package requires GNU Make)
fi

# Check requirement sets
AC_LIBBSE_CHECK
AC_ASOUND_CHECK

# Automake @VARIABLE@ exports.
AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

# create output files
AC_CONFIG_FILES([
Makefile
])

AC_OUTPUT
