Interface integration work:

- move primitive types from BSE (GSL) to SFI (constants, notes, time stamps)
- complete validation for records and sequences
- get sfidl to generate code into a different namespace
- deal with GValue returns of NULL in generated code
- handle non-validated sequences and records in generation code (things
  can be demarshalled in non-validated form after incompatible changes)
- cleanup helper/util code in sfitype.h
- move BswLockFuncs into SFI, feature this with sfi_init()
- wrap sfi_init() in C API wrapper code
- sfi_pspec_rec should check that only sfi types are used 
- sfi_pspec_rec_validate should convert occuring enums in choices
- choice type should have validation function

SERIALIZATION:
- serialization of homogeneous sequences could store the field type code only once
- typed record serialization needs to honour indent for sfi_value_store_param()
- need pspec test in testsfi serialization for all three serial-test types

sfidl:
  parsing:
    - plural generator
  code generation:
    - namespace substitution that works for both, C and C++
    - restructure name generation to example-based output:
      foo-bar, foo_bar, fooBar, FOO_BAR, FooBar
  C language binding:
    - review ParamSpec/Record primitive types
    - fix const gchar* in wrapper arguments
  Qt language binding:
    - everything

binary marshaller:
  - implementation
  - test

vim:set ts=8 sts=2 sw=2:
