Sun Dec  1 02:18:42 2002  Tim Janik  <timj@gtk.org>

	* sfiparam.[hc]: new param spec int derived type pspec note which
	allowes for void notes and comes with its own validation implementation.

Sun Dec  1 01:32:11 2002  Stefan Westerfeld  <stefan@space.twc.de>

	* sfidl-parser.cc sfidl.cc sfidl.h testidl.sfidl: use capitalized
	keywords for In, Out, Constant, Info ; fixed const char* in C
	language binding

Sun Dec  1 00:04:48 2002  Stefan Westerfeld  <stefan@space.twc.de>

	* sfidl-options.* sfidl.cc Makefile.am: restructured options again

Sun Nov 24 03:21:07 2002  Tim Janik  <timj@gtk.org>

	* sfidl-options.cc: reverted stefan's last change, which broke
	client side init function generation.

Sun Nov 24 02:21:09 2002  Tim Janik  <timj@gtk.org>

	* sfidl.cc: store SfiChoiceValue arrays in addition to
	GEnumValue arrays.

	* sfiparams.[hc]:
	(sfi_pspec_copy_commons): extend copying of common fields.
	(sfi_pspec_test_all_hints): new hint test fnction.

Tue Nov 12 03:50:44 2002  Tim Janik  <timj@gtk.org>

	* sfiprimitives.[hc]: implement sequence and record convenience
	getters.

	* sfiparams.[hc]: define SfiChoiceValues in terms of
	SfiChoiceValue (structure with name and blurb) instead of
	GEnumValue.
	introduce sfi_pspec_{g|s}et_owner().
	get rid of sfi_pspec_get_choice_value_list().
	implement sfi_pspec_to_rec() and sfi_pspec_from_rec().
	(sfi_categorize_type): SFI_TYPE_PSPEC is not a boxed type,
	but a seperate fundamental.

	* sfiserial.c: implement serialization of pspecs as records.

	* testsfi.c: fixed up choice serialization tests. extended
	serialization tests to serialize pspecs and added serialization
	test code for all defined pspecs.

Thu Nov 14 10:51:51 2002  Stefan Westerfeld  <stefan@space.twc.de>

	* sfidl.cc: fixed code generation for class names starting
	with two uppercase letters like "BseSNet".

Wed Nov 13 23:21:13 2002  Stefan Westerfeld  <stefan@space.twc.de>

	* sfidl.cc sfidl-options.cc: completed codegeneration for
	client C language binding: prefix method names when
	--c-client-prefix is given, conversion code for choices,
	procedure prototypes, no more init function and similar
	stuff the client doesn't need.

Wed Nov 13 19:43:59 2002  Stefan Westerfeld  <stefan@space.twc.de>

	* sfidl.cc: neutral element initialization on missing fields
	from_rec, made copy_shallow complain on getting null pointer
	arguments.

Wed Nov  6 19:25:08 2002  Tim Janik  <timj@gtk.org>

	* sfiserial.c: get entirely rid of "nil" as identifier, it's
	not recommended in scheme either and may clash with choices.
	eliminated prefixing of arbitrary constructs with '\''.
	fix choice parsing error handling. fixed sequence and record
	indentation.

	* sfiparams.h: use 'C' as type letter for choices, to preserve
	'c' for the slight possibility of a future introduction of chars.

Tue Nov  5 08:13:51 2002  Tim Janik  <timj@gtk.org>

	* sfivalues.c (sfi_value_enum2choice): convert to scheme names
	by default.

Mon Nov  4 11:38:56 2002  Tim Janik  <timj@gtk.org>

	* sfitypes.[hc]: remove SfiBoxedToRec, SfiBoxedFromRec,
	SfiBoxedToSeq and SfiBoxedFromSeq fields from record and sequence
	info, as the value transforms do the job already.

	* sfidl.cc: remove unneeded code generation.

	* sfidl-parser.h: 
	* sfidl-namespace.h: start comments with one asterisk, not two
	which is a special token used by the documentation parser.

Mon Nov  4 07:32:22 2002  Tim Janik  <timj@gtk.org>

	* sfiglueproxy.c (signal_quark): canonify signal names.

	* sfivalues.c: G_TYPE_PARAM is it's own base type and not derived
	from G_TYPE_BOXED, fixed code acordingly.

	* sfiglue.[hc]: don't export the supported signals in SfiGlueIFace.

Sun Nov  3 19:23:29 2002  Stefan Westerfeld  <stefan@space.twc.de>

	* sfidl-parser.*: added preprocessing code to handle #include
	directives and C++ style comments.

	* sfidl-options.*: new -I option to add directories to the
	include search path.

	* sfidl.cc: limit code generation to those types that were not
	defined in an included file.

Sun Nov  3 13:55:41 2002  Stefan Westerfeld  <stefan@space.twc.de>

	* sfidl-options.* sfidl-parser.* sfidl-namespace.* sfidl.cc
	Makefile.am: cleanup: moved the parser and the option handling
	into seperate classes/files ; std namespace related fixes

Sat Nov  2 00:17:31 2002  Tim Janik  <timj@gtk.org>

	* sfiglue.c (sfi_glue_gc_add): don't warn about multiple adding
	of ref counted objects to the gc.

	* sfiglueproxy.c (signals_compare): fix quark comparison.

	* sfiglue.[hc]: started to revamp context API. we need thread
	support in Sfi to complete this though.

	* sfivalues.c (sfi_choice2enum): fallback to 0 instead
	of the first enum value if the choice can't be matched
	(like sfi_value_choice2enum()).

	* sfiglueproxy.c (default_glue_marshal): properly swap proxy and
	data argument if rerquested.

Fri Nov  1 17:55:46 2002  Tim Janik  <timj@gtk.org>

	* sfiglueproxy.c (sfi_glue_proxy_is_a): spew no warning if proxy==0.

Sun Nov  3 00:00:12 2002  Stefan Westerfeld  <stefan@space.twc.de>

	* sfidl.cc: long options, finally (--sfk-core-header and such)

	* Makefile.am: switch to sfidl long options

Sat Nov  2 22:03:56 2002  Stefan Westerfeld  <stefan@space.twc.de>

	* sfidl.cc: register enums for choices at the glib type system
	when the -b option is given ; pspec_Rec -> pspec_RecBoxed to
	resolve conflicts with "real" Rec param specs

	* testidl.sfidl testsfi.c: more test code testing the type system
	registration and the behaviour of choices in records

Fri Nov  1 23:58:18 2002  Stefan Westerfeld  <stefan@space.twc.de>

	* sfidl.cc: changed the C language binding for choices to "real"
	enums instead of representing them as strings

	* sfivalues.[hc]: implemented sfi_value_choice_genum, sfi_choice2enum
	and sfi_enum2choice for conversion between choices and type system
	known enums as required by sfidl

	* testidl.sfidl testsfi.c: added a choice in a record for testing

Fri Nov  1 01:28:12 2002  Tim Janik  <timj@gtk.org>

	* sfiglueproxy.[hc]: add weak refs and the usual signal connection
	variants.

Thu Oct 31 23:16:41 2002  Stefan Westerfeld  <stefan@space.twc.de>

	* sfidl.cc: more work on clientside C language binding: procedures,
	methods ; first version of Rec/PSpec primitive types.
	
	* testsfi.c testidl.sfidl: added a test for Rec/PSpec primitive
	types ; there is still a name clash here (sfidl_pspec_Rec) which
	needs to be resolved (see comment in testidl.sfidl)

Thu Oct 31 18:16:14 2002  Stefan Westerfeld  <stefan@space.twc.de>

	* sfidl.cc sfitypes.h: parsing for constants, properties, infos;
	code generation for constants (-c option) and info lines used in
	sequences and records ; string concatenation ; forward declarations
	for classes.

	* testidl.sfidl testsfi.c Makefile.am: added a test for
	generation of #defines for constants

Mon Oct 28 04:46:58 2002  Tim Janik  <timj@gtk.org>

	* sfiglueproxy.c: for now, spew real warnings if invalid proxy ids
	are being used.

Sun Oct 27 23:00:25 2002  Stefan Westerfeld <stefan@space.twc.de>

	* sfidl.cc: enum is now called choice in sfidl files,
	record, enum and sequence don't have a typedef any longer,
	use sfidl_pspec_Int and similar instead of sfi_pspec_Int

	* testidl.sfidl: removed typedef to match new sfidl syntax

	* testsfi.c: sfi_pspec_* -> sfidl_pspec_*

Sun Oct 27 22:38:25 2002  Stefan Westerfeld <stefan@space.twc.de>

	* sfidl.cc: added new code generation target for c++/qt (-g option
	to select target), started procedure code generation (-p option)

Sun Oct 27 19:26:37 2002  Stefan Westerfeld <stefan@space.twc.de>

	* sfiparams.c: fixed pspec_flags to convert sfi string hints
	to GParamFlags properly.

Sun Oct 27 16:17:32 2002  Tim Janik  <timj@gtk.org>

	* sfiparams.[hc]: implement sfi_pspec_get_log_scale(),
	sfi_pspec_set_log_scale() and sfi_pspec_log_scale().

	* sfiustore.[hc]: new files, providing a unique-id -> data pointer
	lookup map.

	* sfiglueproxy.[hc]: new files, providing glue layer proxy
	functionality. parts from sfiglue.[hc], sfiglusignal.c, bswproxy.[hc]
	and bswsignal.[hc] got moved and/or reimplemented here.

	* sfigluesignal.c: removed.

	* sfiglue.[hc]: proxy related vtable changes.

	* sfiprimitives.[hc]: provide convenience setters for records
	and sequences.

	* sfivcall.[hc]: const fixes.

	* Makefile.am: reorder stuff for better streamlining during
	compilation process. fix testidl.[hc] generation.

Thu Oct 24 18:04:51 2002  Tim Janik  <timj@gtk.org>

	* gbsearcharray.h: added this file here from BSE (should go into
	GLib someday, but not for automatic includes anyway).

Sun Oct 27 00:54:52 2002  Stefan Westerfeld <stefan@space.twc.de>

	* sfidl.cc: do proper code generation for proxy types.

Sun Oct 27 00:33:24 2002  Stefan Westerfeld <stefan@space.twc.de>

	* sfidl.cc: parse procedures / classes / signals.

Wed Oct 23 20:39:56 2002  Stefan Westerfeld <stefan@space.twc.de>

	* sfidl.cc: generate resize functions for sequences.

Wed Oct 23 20:28:01 2002  Tim Janik  <timj@gtk.org>

	* sfiprimitives.h: provide convenience setters for record fields.

Wed Oct 23 19:25:40 2002  Tim Janik  <timj@gtk.org>

	* sfivalues.[hc]:
	* sfiparams.[hc]: s/param_spec/pspec/ due to stefan's command.
	introduce pspec primitive (serialization lacking).

Mon Oct 21 22:19:04 2002  Tim Janik  <timj@gtk.org>

	* sfiglue.[hc]:
	* sfigluecodec.[hc]:
	* sfigluesignal.c:
	moved glue layer to SFI.

Mon Oct 21 16:16:35 2002  Tim Janik  <timj@gtk.org>

	* sfivcall.[hc]: implement sfi_vcall_void(), a GValue based
	function call marshaller (void returns) with up to 5 arguments.

	* sfimarshal.[hcl]*: get rid of this.

Sun Oct 20 19:06:14 2002  Tim Janik  <timj@gtk.org>

	* sfidl.cc: generate data for boxed types after function definitions.

	* sfidl.cc: generate static GValueTransform functions for boxed<->SfiSeq
	and boxed<->SfiRec, passed on to sfi_boxed_make_sequence() and
	sfi_boxed_make_record().

	* sfiparams.c:
	(param_rec_validate): fix empty field creation.
	(sfi_param_spec_time): fix hints.
	(sfi_param_spec_note): fix hints.

	* sfiserial.c: minor syntax tweaks.

	* sfitypes.[hc]: add support for GValueTransform registration
	for boxed sequence and record types.

	* sfivalues.c (sfi_value_choice2enum): fallback to 0 as enum
	value if no pspec default is given, and we fail completely at
	matching the given choice pattern. we use 0 despite enum class
	contents here, it can later be fixed up through validation.

Fri Oct 18 04:39:00 2002  Tim Janik  <timj@gtk.org>

	* sfiserial.[hc]: removed cruft. use GScanner 64bit int parsing instead
	of identifier hack. implemented sfi_value_store_param() and
	sfi_value_parse_param_rest().

	* sfiparams.c (param_rec_values_cmp): handle type mismatch of field
	pspec and value.

Sat Oct 12 19:30:42 2002  Tim Janik  <timj@gtk.org>

	* glib-extra.[hc]: implemented 64bit-safe GScanner, using
	strtoull() code from glibc.

Sat Oct 12 01:03:24 2002  Tim Janik  <timj@gtk.org>

	* sfinote.[hc]: fixup error handling when parsing notes.

	* sfiparams.[hc]: add cmp/validate implementations for bblock,
	fblock, seq and rec.

	* sfiprimitives.[hc]: support sorting of record fields and use binary
	lookups for field access.

	* sfiserial.[hc]: implement sfi_value_store_typed() and
	sfi_value_parse_typed() for all SFI types.

	* sfitime.[hc]: fixup error handling when parsing date/time.

	* sfitypes.h: add type specific constants.

	* testsfi.c: check serialization facilities.

Thu Oct 10 18:25:40 2002  Tim Janik  <timj@gtk.org>

	* sfidl.cc (parseParamDefHints): stringify unsigned longs with %lu (not
	%ld), stringify doubles with %.20g to preserve precision, handle
	unexpected tokens by simple returning the expected token so we
	actually trigger a scanning error.

Wed Oct  9 13:59:00 2002  Stefan Westerfeld <stefan@space.twc.de>

	* sfidl.cc: conceptually changed the way setting up defaults for
	sequences to the way it works for records. you have per-type
	defaults now, thus the syntax has changed to

	typedef sequence {
	  Int ids @= ("ID", "", 0, 0, G_MAXINT, 1, ":readwrite");
	} IDSeq;

	(minor cleanups): make -l work. don't generate code on parse error.
	parse class Foo {}; properly. removed unused code.

Tue Oct  8 19:25:24 2002  Stefan Westerfeld <stefan@space.twc.de>

	* sfidl.cc: support registering boxed types for each record and
	each sequence type (-b), make #line number directives optional (-l)

Sun Oct  6 08:04:55 2002  Tim Janik  <timj@gtk.org>

	* sfiprimitives.[hc]: add sfi_seq_clear().
	
	* sfitypes.[hc]: introduce sfi_boxed_make_record(),
	sfi_boxed_make_sequence(), sfi_boxed_get_record_info() and
	sfi_boxed_get_sequence_info() to support boxed<->rec and seq
	transformations.
	 
	* sfiparams.[hc]: remove non-serializable pspecs Object and Enum.
	set hints via sfi_pspec_set_static_hints() in the constructors,
	so we can map these (partially) onto flags.
	provide accessors for pspec hints. cleanup serializable param spec
	categories. renamed a few things for consistency.
	
	* sfivalues.[hc]: same here, remove object and enum values.
	added sfi_value_lstring() and sfi_value_lchoice().

Sat Oct  5 02:07:57 2002  Tim Janik  <timj@gtk.org>

	* glib-extra.[hc]: add type name conversion functions.

	* sfiprimitives.[hc]: add sfi_bblock_new_sized(),
	sfi_fblock_new_sized(), sfi_bblock_resize() and sfi_fblock_resize().

	* sfidl.cc (parse): sync this with GValue types (missed out Proxy).

	* sfidl-namespace.cc (qualify): output warnigns with g_warning().

	* sfidl.cc: remove pointless namespacing in generated code,
	fix sfi_value_*() uses. fix one more hardcoded "element"
	sequence memeber.

Fri Oct  4 13:08:29 2002  Stefan Westerfeld <stefan@space.twc.de>

	* sfidl.cc: support optionally specifying the name of the sequence
	elements for the C binding (typedef sequence<Int notes> NoteSeq).

Fri Oct  4 12:41:33 2002  Stefan Westerfeld <stefan@space.twc.de>

	* sfidl.cc: generate conversion functions for sequences/records
	from/to SfiSeq*/SfiRec* instead of from/to GValue*.

Fri Oct  4 11:30:07 2002  Stefan Westerfeld <stefan@space.twc.de>

	* sfidl.cc: support namespace substitution (sfidl -n Bse/Bsw)

Fri Oct  4 10:01:53 2002  Tim Janik  <timj@gtk.org>

	* sfiparams.c: pass nick and blurb of "" as NULL into GLib pspecs.
	
	* sfivalues.h: fix SFI_VALUE_HOLDS_NOTE() and SFI_VALUE_HOLDS_TIME().

Fri Oct  4 08:53:29 2002  Tim Janik  <timj@gtk.org>

	* sfinote.c (sfi_note_from_string): default to kammer note
	instead of SFI_NOTE_VOID if the note is unparsable.

	* testsfi.c: new file, executed by make check.
	currently contains small tests for notes and time.

	* sfinote.[hc]: midi note definitions and string conversion
	routines.

	* sfidl.cc: we don't need sfi functions, so include just
	glib-extra.h.

Fri Oct  4 05:13:39 2002  Tim Janik  <timj@gtk.org>

	* sfidl.cc: call sequence elements "element" not
	"content" in the generated pspecs.
	(run): print seq/rec prototypes after structure definitions.
	generate "#line" directive before param_spec creation to make
	compiler warnings somewhat meaningfull.

Fri Oct  4 02:06:15 2002  Tim Janik  <timj@gtk.org>

	* sfidl.cc (createTypeCode): support SfiBBlock.

	* sfiprimitives.[hc]: add SfiBBlock, a block of bytes,
	similar to SfiFBlock.

	* sfivalues.[hc]: implement BBlock values.
	
	* sfiparams.[hc]: implement BBlock pspecs.

Fri Oct  4 01:18:21 2002  Stefan Westerfeld <stefan@space.twc.de>

        * sfi/sfidl.cc: generate proper default initialization for sequences
	when @= is omitted (instead of segfaulting), FBlock support, cleanup:
	add name of arguments/arrays by the caller, not by createTypeCode

Thu Oct  3 23:31:26 2002  Tim Janik  <timj@gtk.org>

	* sfi/: new subdirectory and library. in preparation for SFK (synthesis
	fusion kit), this is the underlying interface library SFI (syntheis
	fusion kit interface).

	* sfidl.cc: .sfidl code generator by Stefan.
	* sfidl-namespace.[hc]*: auxillary files for sfidl.cc.

	* sfiserial.[hc]: preliminary parsing/serialization code.

	* sfiparams.[hc]: pspec implementations, corresponding to the Sfi values.

	* sfivalues.[hc]: wrappers for supported GValue types and implementaitons
	of Sfi specific value types.

	* sfitime.[hc]: some preliminary time handling routines.

	* sfiprimitives.[hc]: fundamental structure implementations, such as
	record, sequence and float sequences (for performance reasons implemented
	as a block of floats).

	* sfitypes.[hc]: miscellaneous type decls and yet-to-clean-up auxillary
	functions.

	* glib-extra.[hc]: GLib compatibility code, add-ons or extensions.
