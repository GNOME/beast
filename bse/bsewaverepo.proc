// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
#include <bse/bseplugin.hh>
#include <bse/bseprocedure.hh>
#include <bse/bsewaverepo.hh>
#include <bse/bseloader.hh>
#include <bse/bsewave.hh>
#include "bsecxxplugin.hh"
#include "bsebuiltin_externs.cc"

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <errno.h>


/* --- auxlillary functions --- */
static Bse::Error
load_file (BseWaveRepo *wrepo,
	   const gchar *file_name,
           BseWave    **wave_p)
{
  gchar *fname = g_path_get_basename (file_name);
  BseWave *wave = (BseWave*) bse_object_new (BSE_TYPE_WAVE, "uname", fname, NULL);
  g_free (fname);
  Bse::Error error = bse_wave_load_wave_file (wave, file_name, NULL, NULL, NULL, TRUE);
  if (wave->n_wchunks)
    {
      bse_container_add_item (BSE_CONTAINER (wrepo), BSE_ITEM (wave));
      *wave_p = wave;
      error = Bse::Error::NONE;
    }
  else
    {
      if (!error)
        error = Bse::Error::WAVE_NOT_FOUND;
      *wave_p = NULL;
    }
  g_object_unref (wave);
  return error;
}


/* --- procedures --- */
AUTHORS	= "Tim Janik <timj@gtk.org>";
LICENSE = "GNU Lesser General Public License";


METHOD (BseWaveRepo, load-file) {
  HELP	= "Load wave from file";
  IN    = bse_param_spec_object ("wave_repo", "Wave Repo", NULL,
				 BSE_TYPE_WAVE_REPO, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_string ("file_name", "File Name", "The file to import waves from",
			    NULL, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", "Error", NULL,
				BSE_TYPE_ERROR_TYPE, Bse::Error::NONE,
				SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseWaveRepo *self = (BseWaveRepo*) bse_value_get_object (in_values++);
  const char *file_name = sfi_value_get_string (in_values++);
  BseUndoStack *ustack;
  Bse::Error error;
  BseWave *wave;

  /* check parameters */
  if (!BSE_IS_WAVE_REPO (self) || !file_name)
    return Bse::Error::PROC_PARAM_INVAL;

  ustack = bse_item_undo_open (self, "load-wave");
  error = load_file (self, file_name, &wave);
  if (wave)
    bse_item_push_undo_proc (self, "remove-wave", wave);
  bse_item_undo_close (ustack);

  /* set output parameters */
  g_value_set_enum (out_values++, int (error));

  return Bse::Error::NONE;
}

METHOD (BseWaveRepo, remove-wave) {
  HELP  = "Remove a wave from repository";
  IN    = bse_param_spec_object ("wave_repo", "Wave Repo", NULL,
				 BSE_TYPE_WAVE_REPO, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_object ("wave", "Wave", NULL,
				 BSE_TYPE_WAVE, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseWaveRepo *self = (BseWaveRepo*) bse_value_get_object (in_values++);
  BseItem *child    = (BseItem*) bse_value_get_object (in_values++);
  BseUndoStack *ustack;

  /* check parameters */
  if (!BSE_IS_WAVE_REPO (self) || !BSE_IS_WAVE (child) ||
      child->parent != BSE_ITEM (self))
    return Bse::Error::PROC_PARAM_INVAL;

  /* action */
  ustack = bse_item_undo_open (self, "remove-wave %s", bse_object_debug_name (child));
  /* remove object references */
  bse_container_uncross_undoable (BSE_CONTAINER (self), child);
  /* how to get rid of the item once backed up */
  bse_item_push_redo_proc (self, "remove-wave", child);
  /* remove (without redo queueing) */
  bse_container_remove_backedup (BSE_CONTAINER (self), child, ustack);
  /* done */
  bse_item_undo_close (ustack);

  return Bse::Error::NONE;
}
