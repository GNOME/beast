/* BSE - Bedevilled Sound Engine	-*-mode: c;-*-
 * Copyright (C) 2000-2002 Tim Janik
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 */
#include <bse/bseplugin.h>
#include <bse/bseprocedure.h>
#include <bse/bsewaverepo.h>
#include <bse/gslloader.h>

#include <bse/bsewave.h>


/* --- auxlillary functions --- */
static BseErrorType
load_file (BseWaveRepo *wrepo,
	   const gchar *file_name)
{
  GslErrorType error;
  GslWaveFileInfo *finfo;
  GslWaveDsc *wdsc;
  BseWave *wave;
  gchar *fname;
  guint i;
  
  finfo = gsl_wave_file_info_load (file_name, &error);
  if (!finfo)
    return error;
  if (finfo->n_waves != 1)
    {
      gsl_wave_file_info_unref (finfo);
      return BSE_ERROR_FORMAT_UNKNOWN;
    }
  
  wdsc = gsl_wave_dsc_load (finfo, 0, &error);
  gsl_wave_file_info_unref (finfo);
  if (!wdsc)
    return error;
  
  fname = g_path_get_basename (file_name);
  wave = g_object_new (BSE_TYPE_WAVE,
		       "uname", fname,
		       NULL);
  g_free (fname);
  for (i = 0; i < wdsc->n_chunks; i++)
    {
      GslWaveChunk *wchunk = gsl_wave_chunk_create (wdsc, i, error ? NULL : &error);
      
      if (wchunk)
	bse_wave_add_chunk (wave, wchunk);
    }
  bse_wave_set_locator (wave, file_name, wdsc->name);
  
  gsl_wave_dsc_free (wdsc);
  
  if (wave->n_wchunks)
    {
      bse_container_add_item (BSE_CONTAINER (wrepo), BSE_ITEM (wave));
      error = GSL_ERROR_NONE;
    }
  else
    error = BSE_ERROR_WAVE_NOT_FOUND;
  g_object_unref (wave);
  
  return error;
}


/* --- procedures --- */
AUTHORS	= "Tim Janik <timj@gtk.org>";
CRIGHTS = "Copyright (C) 2001-2002 Tim Janik";


METHOD (BseWaveRepo, load-file) {
  HELP	= "Load Wave from file";
  IN    = bse_param_spec_object ("wave_repo", "Wave Repo", NULL,
				 BSE_TYPE_WAVE_REPO, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_string ("file_name", "File Name", "The file to import waves from",
			    NULL, SFI_PARAM_DEFAULT);
  OUT   = bse_param_spec_genum ("error", "Error", NULL,
				BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE,
				SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseWaveRepo *wrepo    = (BseWaveRepo*) bse_value_get_object (in_values++);
  gchar *file_name      = sfi_value_get_string (in_values++);
  BseErrorType error;
  
  /* check parameters */
  if (!BSE_IS_WAVE_REPO (wrepo) || !file_name)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  error = load_file (wrepo, file_name);
  
  /* set output parameters */
  g_value_set_enum (out_values++, error);
  
  return BSE_ERROR_NONE;
}

METHOD (BseWaveRepo, remove-wave) {
  HELP  = "Remove a wave from repository";
  IN    = bse_param_spec_object ("wave_repo", "Wave Repo", NULL,
				 BSE_TYPE_WAVE_REPO, SFI_PARAM_DEFAULT);
  IN    = bse_param_spec_object ("wave", "Wave", NULL,
				 BSE_TYPE_WAVE, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseWaveRepo *wrepo = (BseWaveRepo*) bse_value_get_object (in_values++);
  BseItem *wave      = (BseItem*) bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_WAVE_REPO (wrepo) || !BSE_IS_WAVE (wave) ||
      wave->parent != BSE_ITEM (wrepo))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  bse_container_remove_item (BSE_CONTAINER (wrepo), wave);
  
  /* set output parameters */
  
  return BSE_ERROR_NONE;
}
