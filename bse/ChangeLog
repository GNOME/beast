Fri Oct 29 11:27:47 1999  Tim Janik  <timj@gtk.org>

	* bseplugin.c: minor const correctness fixes.

Fri Oct 15 02:09:24 1999  Tim Janik  <timj@gtk.org>

	* bsemain.c (bse_parse_args): added --bse-debug and --bse-no-debug args
	and featuring of BSE_DEBUG and BSE_NO_DEBUG environment variables.

	* bseobject.c: wrapped up NOTIFY and OBJECTS debugging stuff.

	* bsetype.c: wrapped up CLASSES debugging stuff.

Fri Oct 15 00:20:30 1999  Tim Janik  <timj@gtk.org>

	* icons/Makefile.am: 
	* icons/Makefile.icons: setup ./icons subdirectory.

Fri Oct 15 00:00:41 1999  Tim Janik  <timj@gtk.org>

	* bsesnet.c: add category with ugly test-icon for an internal object.

Thu Oct 14 23:28:27 1999  Tim Janik  <timj@gtk.org>

	* bseutils.[hc]: added bse_icon_from_pixdata() to create a new icon
	structure from a pixdata buffer (and decode the run-length encoding).

Wed Oct 13 06:05:55 1999  Tim Janik  <timj@gtk.org>

	* Makefile.am: adapted some stuff so loging domains and fallback
	plugin names are featured for builtin plugins as well.

Tue Oct 12 20:15:34 1999  Tim Janik  <timj@gtk.org>

	* bseplugin.[hc]: recognize predefined plugin names, only evaluate
	plugin-name specification for strings for builtin_* plugins, create
	their symbols from their underscored file name.
	removed some export stuff.
	added object type support for plugins.

	* bseexports.h: moved lots of new stuff here, fixed up object types.

	* mkbuiltinlist.pl: output the actuall file name of builtin plugins
	as symbol part (with non-identifier chars converted into '_').

Fri Oct 8 15:04:40 1999  Tim Janik  <timj@gtk.org>

	* bseprocedure.[hc]: removed proecedure category implementation,
	adapted code to work with bsecategories.[hc].

Thu Oct  7 00:17:38 1999  Tim Janik  <timj@gtk.org>

	* glib-extra.[hc]:
	nuked g_pattern_spec_init() and g_pattern_spec_free_segs() in favour of
	g_pattern_spec_new() and g_pattern_spec_free() which create and free a
	newly allocated structure. also cleverly optimized g_pattern_spec_new()
	by counting tail and head wildcards and jokers. from these numbers, we
	can make better judgement whether to match from tail or head and also
	got rid of a bunch of strchr() calls.

Wed Oct  6 23:53:07 1999  Tim Janik  <timj@gtk.org>

	* bsecategories.[hc]: new files, implementing a more general
	categorization approach. intended to take over the procedure category
	administration and feature object categories as well (see also
	docs/bse-categories.txt on this topic).

Tue Oct  5 13:49:57 1999  Tim Janik  <timj@gtk.org>

	* bseexports.h: added export structure for objects.
	* bseplugin.h: extended macro magic to feature object types.
	* bseplugin.c: register, reinit, unload and complete exported
	and builtin object types.

Fri Oct  1 07:29:32 1999  Tim Janik  <timj@gtk.org>

	* bsemaster.c (bse_master_do_cycle): added ability to mix multiple
	stereo songs together.

	* some const corrections.

Thu Sep 30 09:18:58 1999  Tim Janik  <timj@gtk.org>

	* bsesample.c (bse_sample_do_shutdown): 
	* bsepattern.c (bse_pattern_do_shutdown): 
	* bseinstrument.c (bse_instrument_do_shutdown): 
	* bsesong.c (bse_song_do_shutdown): 
	* bseproject.c (bse_project_do_shutdown):
	remove/release items/objects in shutdown handler, rather than destroy.

	* bseobject.c (bse_object_unlock): release global lock *after* the
	->unlocked class method has been invoked.

	* bseobject.[hc]: changed destruction mechanism to using an intermediate
	->shutdown method. this eases class destruction, shutdown is invoked
	prior to the object's destroy notification and one ref_count is at least
	being held. once the final reference count dropps, the ->destroy method
	is actually invoked.
	(bse_object_set_valist): 
	(bse_object_set_param): check for non-destroyed object first.

	* bsecontainer.[hc] (bse_container_add_item_unrefed): new function for
	containers to manage (non-destroyed) items, without holding and extra
	ref count on them, we use destroy notification from BseItem for cleanup.

	* bseitem.c (bse_item_do_shutdown): remove item from container in
	->shutdown instead of ->destroy.

	* bsesource.c: added some !destroyed checks.
	(bse_source_do_shutdown): use ->shutdown instead of ->destroy.

Sat Sep 27 12:30:02 1999  Tim Janik  <timj@gtk.org>

	* bsesnet.[hc]: new super type to manage source networks (skeleton
	only).

Wed Sep 22 06:24:00 1999  Tim Janik  <timj@gtk.org>

	* bsetype.[hc]: lots of code cleanups and bug fixes over the last few
	days. significantly changed allocation system, so TypeNodes are not
	themselves relocatable anymore (certain structure parts are though).
	nodes get allocated with their supers list in one peace now.

Thu Sep 16 09:14:19 1999  Tim Janik  <timj@gtk.org>

	* bsetype.[hc]: started out on bse_type_class_lastref() as a
	preparation for delayed destruction.
	we need to catch FIXMEs.

Mon Sep 13 05:19:17 1999  Tim Janik  <timj@gtk.org>

	* Makefile.am: minor autogeneration fixups, use cp instead of mv.

1999-06-03    <timj@dhcpd7.redhat.com>

	* bsesong.c: fix typo.

1999-05-31    <timj@dhcpd7.redhat.com>

	* bsepcmstream-oss.c (pcm_stream_oss_set_dsp): ignore failing fragment
	size settigns for now, so we work with the OSS driver.
	
1999-05-28  Tim Janik  <timj@couch.wilmington.net>

	* bsepattern.c (save_note): don't prefix seq ids with an 0, which
	would make them octal nombers.

Mon May 17 02:52:49 1999  Tim Janik  <timj@gtk.org>

	* bunch of Makefile and configure changes so make distcheck works.
	BSE is version 0.2.0 now.

Sat May 15 23:23:05 1999  Tim Janik  <timj@gtk.org>
	* bsesongmixer.c (bse_mixer_activate_voice): don't set notes on inactive
	voices.

Wed May  5 09:16:41 1999  Tim Janik  <timj@gtk.org>

	* bseeffect*.[hc]: started out on effect objects, they are fairly
	lightweight (and somewhat uncommon) objects, in that they are managed
	by BsePattern and in principle serve as simple operators and id
	containers only. the reason to implement them as real objects, rather
	than plain auxillary structures is to provide the convenient BseObject
	facilities, i.e. a generalized parameter interface for GUI generation
	and state restauration as well as basic locking facilities during
	playing.
	next step is to featured effects in the song sequencer.

Wed May  4 16:43:45 1999  Tim Janik  <timj@gtk.org>

	* nuked inappropriate ChangeLog stuff (about 15 entries over the
	last year). To sum it up, BSE implements its own type system now,
	which features a bunch of different fundamental types, e.g. the
	generic parameters, enumeration and flags classes, objects with
	single inheritance, multiple interfaces and procedure classes.
	the generic parameter interface is used to route most of the setting
	and getting of BSE objects through a central point, which serves for
	object state recording to implement undo facilities and to serialize
	objects (though there are some tweaks to that since we have to feature
	inter-object links in the trees). the type system is layed out in a
	dynamic fashion, so that new types can be registerd by third party
	plugins and get their implementation loaded (and unloaded) on demand.
	the basic infra structure for modular synthesis sources and filters
	is also in place, though BseSong doesn't currently integrate very
	nicely into that and it deserves some serious testing.

Tue Mar 24 04:28:26 1998  Tim Janik  <timj@gtk.org>

	* started ChangeLog.
