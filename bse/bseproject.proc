/* BSE - Bedevilled Sound Engine	-*-mode: c;-*-
 * Copyright (C) 2000-2001 Tim Janik
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */
#include        <bse/bseplugin.h>
#include        <bse/bseprocedure.h>
#include        <bse/bseproject.h>
#include        <bse/bsestorage.h>
#include        <bse/bsesong.h>
#include        <bse/bsewaverepo.h>
#include        <bse/bsesnet.h>
#include        <bse/bsemidisynth.h>
#include        <bse/bsedatapocket.h>
#include        <bse/bswprivate.h>


AUTHOR	= "Tim Janik <timj@gtk.org>";
CRIGHTS	= "Tim Janik";
DATE	= "2001";


METHOD (BseProject, is_playing) {
  HELP	= "Check whether a project is currently playing";
  IN	= g_param_spec_object ("project", "Project", NULL,
			       BSE_TYPE_PROJECT, BSE_PARAM_DEFAULT);
  OUT	= g_param_spec_boolean ("is_playing", "Is Playing", NULL,
				FALSE, BSE_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	GValue            *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = g_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */

  /* set output parameters */
  g_value_set_boolean (out_values++, BSE_SOURCE_PREPARED (project));
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, restore-from-file, "File/Restore") {
  HELP	= "Load a project from file";
  IN	= g_param_spec_object ("project", "Project", NULL,
			       BSE_TYPE_PROJECT, BSE_PARAM_DEFAULT);
  IN	= g_param_spec_string ("file-name", "File", NULL,
			       NULL, BSE_PARAM_DEFAULT);
  OUT	= g_param_spec_enum ("error", "Error", NULL,
			     BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE,
			     BSE_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	GValue            *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = g_value_get_object (in_values++);
  gchar *file_name = g_value_get_string (in_values++);
  BseStorage *storage;
  BseErrorType error;
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project) || !file_name)
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  storage = bse_storage_new ();
  
  error = bse_storage_input_file (storage, file_name);
  if (!error)
    {
      bse_storage_set_path_resolver (storage, bse_project_path_resolver, project);
      error = bse_project_restore (project, storage);
    }
  bse_storage_destroy (storage);

  /* set output parameters */
  g_value_set_enum (out_values++, error);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, store-bse, "File/Store") {
  HELP	= "Save a project into a BSE file";
  IN	= g_param_spec_object ("project", "Project", NULL,
			       BSE_TYPE_PROJECT, BSE_PARAM_DEFAULT);
  IN	= g_param_spec_string ("file-name", "File", NULL,
			       NULL, BSE_PARAM_DEFAULT);
  IN	= g_param_spec_boolean ("self-contained", "Self Contained", NULL,
				FALSE, BSE_PARAM_DEFAULT);
  OUT	= g_param_spec_enum ("error", "Error", NULL,
			     BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE,
			     BSE_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	GValue            *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = g_value_get_object (in_values++);
  gchar *file_name = g_value_get_string (in_values++);
  gboolean self_contained = g_value_get_boolean (in_values++);
  BseErrorType error;
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project) || !file_name)
    return BSE_ERROR_PROC_PARAM_INVAL;

  error = bse_project_store_bse (project, file_name, self_contained);

  /* set output parameters */
  g_value_set_enum (out_values++, error);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, create-song) {
  HELP	= "Create a new song in project";
  IN	= g_param_spec_object ("project", "Project", NULL,
			       BSE_TYPE_PROJECT, BSE_PARAM_DEFAULT);
  OUT	= g_param_spec_object ("song", "Song", NULL,
			       BSE_TYPE_SONG, BSE_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	GValue            *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = g_value_get_object (in_values++);
  BseSong *song;
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  song = bse_object_new (BSE_TYPE_SONG,
			 NULL);
  bse_container_add_item (BSE_CONTAINER (project), BSE_ITEM (song));

  /* set output parameters */
  g_value_set_object (out_values++, G_OBJECT (song));
  g_object_unref (song);

  return BSE_ERROR_NONE;
}

METHOD (BseProject, ensure-wave-repo) {
  HELP	= "Ensure the project has a wave repository";
  IN	= g_param_spec_object ("project", "Project", NULL,
			       BSE_TYPE_PROJECT, BSE_PARAM_DEFAULT);
  OUT	= g_param_spec_object ("wrepo", "Wave Repo", NULL,
			       BSE_TYPE_WAVE_REPO, BSE_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	GValue            *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = g_value_get_object (in_values++);
  BseWaveRepo *wrepo = NULL;
  GSList *slist;

  /* check parameters */
  if (!BSE_IS_PROJECT (project))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  for (slist = project->supers; slist; slist = slist->next)
    if (BSE_IS_WAVE_REPO (slist->data))
      {
	wrepo = slist->data;
	break;
      }
  if (!wrepo)
    {
      wrepo = bse_object_new (BSE_TYPE_WAVE_REPO, NULL);
      bse_container_add_item (BSE_CONTAINER (project), BSE_ITEM (wrepo));
      g_object_unref (wrepo);
    }

  /* set output parameters */
  g_value_set_object (out_values++, G_OBJECT (wrepo));
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, get-data-pocket) {
  HELP	= "Retrive a specifically named data pocket for this project";
  IN	= g_param_spec_object ("project", "Project", NULL,
			       BSE_TYPE_PROJECT, BSE_PARAM_DEFAULT);
  IN	= g_param_spec_string ("name", "Name", NULL,
			       NULL, BSE_PARAM_DEFAULT);
  OUT	= g_param_spec_object ("data_pocket", "Data Pocket", NULL,
			       BSE_TYPE_DATA_POCKET, BSE_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	GValue            *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = g_value_get_object (in_values++);
  gchar *name = g_value_get_string (in_values++);
  BseItem *item;

  /* check parameters */
  if (!BSE_IS_PROJECT (project) || !name)
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  item = bse_project_find_item (project, BSE_TYPE_DATA_POCKET, name);
  if (!item)
    {
      item = g_object_new (BSE_TYPE_DATA_POCKET, "name", name, NULL);
      bse_container_add_item (BSE_CONTAINER (project), item);
      g_object_unref (item);
    }

  /* set output parameters */
  g_value_set_object (out_values++, item);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, create-snet) {
  HELP	= "Create a synthsizer network in project";
  IN	= g_param_spec_object ("project", "Project", NULL,
			       BSE_TYPE_PROJECT, BSE_PARAM_DEFAULT);
  OUT	= g_param_spec_object ("snet", "Synthesizer Network", NULL,
			       BSE_TYPE_SNET, BSE_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	GValue            *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = g_value_get_object (in_values++);
  BseSNet *snet;
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  snet = bse_object_new (BSE_TYPE_SNET,
			 NULL);
  bse_container_add_item (BSE_CONTAINER (project), BSE_ITEM (snet));
  
  /* set output parameters */
  g_value_set_object (out_values++, G_OBJECT (snet));
  g_object_unref (snet);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, create-midi-synth) {
  HELP	= "Create a MIDI synthesizer network in project";
  IN	= g_param_spec_object ("project", "Project", NULL,
			       BSE_TYPE_PROJECT, BSE_PARAM_DEFAULT);
  OUT	= g_param_spec_object ("midi_synth", "MIDI Synthesizer", NULL,
			       BSE_TYPE_MIDI_SYNTH, BSE_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	GValue            *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = g_value_get_object (in_values++);
  BseMidiSynth *midi_synth;
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  midi_synth = bse_object_new (BSE_TYPE_MIDI_SYNTH, NULL);
  bse_container_add_item (BSE_CONTAINER (project), BSE_ITEM (midi_synth));

  /* set output parameters */
  g_value_set_object (out_values++, G_OBJECT (midi_synth));
  g_object_unref (midi_synth);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, list-uloc-paths) {
  HELP  = ("List uloc paths for all items of a specified type within this project. "
	   "By their uloc paths, items are uniquely identifyable within a project.");
  IN    = g_param_spec_object ("project", NULL, NULL,
			       BSE_TYPE_PROJECT, BSE_PARAM_DEFAULT);
  IN    = g_param_spec_ulong ("item_type", NULL, NULL,
			      0, G_MAXLONG, 0, BSE_PARAM_DEFAULT);
  OUT   = g_param_spec_boxed ("uloc_paths", NULL, NULL,
			      BSW_TYPE_VITER_STRING,
			      BSE_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	GValue            *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = g_value_get_object (in_values++);
  GType type          = g_value_get_ulong (in_values++);

  /* check parameters */
  if (!BSE_IS_PROJECT (project) || !g_type_is_a (type, BSE_TYPE_ITEM))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* set output parameters */
  g_value_set_boxed_take_ownership (out_values++,
				    bse_project_make_uloc_paths (project, type));

  return BSE_ERROR_NONE;
}

METHOD (BseProject, find-item) {
  HELP  = "Find an item within a project, given its uloc path.";
  IN    = g_param_spec_object ("project", NULL, NULL,
			       BSE_TYPE_PROJECT, BSE_PARAM_DEFAULT);
  IN    = g_param_spec_string ("uloc_path", NULL, NULL,
			       NULL, BSE_PARAM_DEFAULT);
  OUT   = g_param_spec_object ("item", NULL, NULL,
			       BSE_TYPE_ITEM, BSE_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	GValue            *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = g_value_get_object (in_values++);
  const gchar *string = g_value_get_string (in_values++);

  /* check parameters */
  if (!BSE_IS_PROJECT (project) || !string)
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* set output parameters */
  g_value_set_object (out_values++, bse_project_item_from_uloc_path (project, string));

  return BSE_ERROR_NONE;
}

METHOD (BseProject, list-items-by-uloc) {
  HELP  = "Retrive all items of a specific type within a project with matching uloc";
  IN    = g_param_spec_object ("project", NULL, NULL,
			       BSE_TYPE_PROJECT, BSE_PARAM_DEFAULT);
  IN    = g_param_spec_ulong ("item_type", NULL, NULL,
			      0, G_MAXLONG, 0, BSE_PARAM_DEFAULT);
  IN    = g_param_spec_string ("uloc", NULL, NULL,
			       NULL, BSE_PARAM_DEFAULT);
  OUT   = g_param_spec_boxed ("item_list", NULL, NULL,
			      BSW_TYPE_VITER_PROXY,
			      BSE_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	GValue            *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = g_value_get_object (in_values++);
  GType type          = g_value_get_ulong (in_values++);
  const gchar *string = g_value_get_string (in_values++);
  GList *list, *free_list;
  BswVIter *iter;

  /* check parameters */
  if (!BSE_IS_PROJECT (project) || !string || !g_type_is_a (type, BSE_TYPE_ITEM))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  iter = bsw_viter_create (BSW_TYPE_VITER_PROXY, 1);
  free_list = bse_objects_list_by_uloc (type, string);
  for (list = free_list; list; list = list->next)
    if (bse_item_get_project (list->data) == project)
      {
	bsw_viter_append_object (iter, list->data);
	break;
      }
  g_list_free (free_list);

  /* set output parameters */
  g_value_set_boxed_take_ownership (out_values++, iter);

  return BSE_ERROR_NONE;
}
