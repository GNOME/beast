/* BSE - Bedevilled Sound Engine	-*-mode: c;-*-
 * Copyright (C) 2000-2003 Tim Janik
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 */
#include        <bse/bseplugin.h>
#include        <bse/bseprocedure.h>
#include        <bse/bseproject.h>
#include        <bse/bsestorage.h>
#include        <bse/bsesong.h>
#include        <bse/bsewaverepo.h>
#include        <bse/bsecsynth.h>
#include        <bse/bsemidisynth.h>
#include        <bse/bsedatapocket.h>


AUTHORS	= "Tim Janik <timj@gtk.org>";
CRIGHTS = "Copyright (C) 2001-2002 Tim Janik";


METHOD (BseProject, is-playing) {
  HELP	= "Check whether a project is currently playing";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  OUT	= sfi_pspec_bool ("is_playing", "Is Playing", "Whether the project is currently playing songs or synths",
			  FALSE, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  
  /* set output parameters */
  sfi_value_set_bool (out_values++, project->state == BSE_PROJECT_PLAYING);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, is-active) {
  HELP	= "Check whether a project is active";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  OUT	= sfi_pspec_bool ("is_active", NULL, "Whether the project is currently producing sound",
			  FALSE, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  
  /* set output parameters */
  sfi_value_set_bool (out_values++, project->state != BSE_PROJECT_INACTIVE);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, restore-from-file, "File/Restore") {
  HELP	= "Load a project from file";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_string ("file-name", "File", "Source file name",
			    NULL, SFI_PARAM_DEFAULT);
  OUT	= bse_param_spec_enum ("error", "Error", "Error indicating possible failures",
			       BSE_ERROR_NONE, BSE_TYPE_ERROR_TYPE,
			       SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = bse_value_get_object (in_values++);
  gchar *file_name = sfi_value_get_string (in_values++);
  BseStorage *storage;
  BseErrorType error;
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project) || !file_name)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  storage = g_object_new (BSE_TYPE_STORAGE, NULL);

  error = bse_storage_input_file (storage, file_name);
  if (!error)
    {
      // bse_storage_set_upath_resolver (storage, bse_project_upath_resolver, project);
      error = bse_project_restore (project, storage);
    }
  bse_storage_reset (storage);
  g_object_unref (storage);
  
  /* set output parameters */
  bse_value_set_enum (out_values++, error);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, store-bse, "File/Store") {
  HELP	= "Save a project into a BSE file";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_string ("file-name", "File", "Destination file name",
			    NULL, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_bool ("self-contained", "Self Contained",
			  "Whether references to other objects (e.g. samples) should "
			  "be stored or whether to include everything in a self-contained .bse file",
			  FALSE, SFI_PARAM_DEFAULT);
  OUT	= bse_param_spec_genum ("error", "Error", "Error indicating possible failures",
				BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE,
				SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = bse_value_get_object (in_values++);
  gchar *file_name = sfi_value_get_string (in_values++);
  gboolean self_contained = sfi_value_get_bool (in_values++);
  BseErrorType error;
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project) || !file_name)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  error = bse_project_store_bse (project, file_name, self_contained);
  
  /* set output parameters */
  g_value_set_enum (out_values++, error);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, create-song) {
  BLURB	= "Create a song for this project.";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  IN    = sfi_pspec_string ("name", "Name", "Song name",
			    NULL, SFI_PARAM_DEFAULT);
  OUT	= bse_param_spec_object ("song", "Song", "The new song",
				 BSE_TYPE_SONG, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = bse_value_get_object (in_values++);
  gchar *name         = sfi_value_get_string (in_values++);
  BseSong *song;
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  song = g_object_new (BSE_TYPE_SONG,
		       name ? "uname" : NULL, name,
		       NULL);
  bse_container_add_item (BSE_CONTAINER (project), BSE_ITEM (song));
  
  /* set output parameters */
  bse_value_set_object (out_values++, G_OBJECT (song));
  g_object_unref (song);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, ensure-wave-repo) {
  HELP	= "Ensure the project has a wave repository";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  OUT	= bse_param_spec_object ("wrepo", "Wave Repo", "The project's unique wave repo",
				 BSE_TYPE_WAVE_REPO, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = bse_value_get_object (in_values++);
  BseWaveRepo *wrepo = NULL;
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  wrepo = bse_project_get_wave_repo (project);
  if (!wrepo)
    {
      wrepo = g_object_new (BSE_TYPE_WAVE_REPO, NULL);
      bse_container_add_item (BSE_CONTAINER (project), BSE_ITEM (wrepo));
      g_object_unref (wrepo);
    }
  
  /* set output parameters */
  bse_value_set_object (out_values++, G_OBJECT (wrepo));
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, get-data-pocket) {
  HELP	= "Retrieve a specifically named data pocket for this project";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_string ("name", "Name", "Name of the data pocket",
			    NULL, SFI_PARAM_DEFAULT);
  OUT	= bse_param_spec_object ("data_pocket", "Data Pocket", "The data pocket",
				 BSE_TYPE_DATA_POCKET, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = bse_value_get_object (in_values++);
  gchar *name = sfi_value_get_string (in_values++);
  BseItem *item;
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project) || !name)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  item = bse_project_lookup_typed_item (project, BSE_TYPE_DATA_POCKET, name);
  if (!item)
    {
      item = g_object_new (BSE_TYPE_DATA_POCKET, "uname", name, NULL);
      bse_container_add_item (BSE_CONTAINER (project), item);
      g_object_unref (item);
    }
  
  /* set output parameters */
  bse_value_set_object (out_values++, item);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, create-csynth) {
  BLURB	= "Create a synthsizer network for this project.";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  IN    = sfi_pspec_string ("name", "Name", "Synth network name",
			    NULL, SFI_PARAM_DEFAULT);
  OUT	= bse_param_spec_object ("csynth", "Synthesizer Network", "New synth network",
				 BSE_TYPE_CSYNTH, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = bse_value_get_object (in_values++);
  gchar *name         = sfi_value_get_string (in_values++);
  BseCSynth *csynth;
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  csynth = g_object_new (BSE_TYPE_CSYNTH,
                         name ? "uname" : NULL, name,
                         NULL);
  bse_container_add_item (BSE_CONTAINER (project), BSE_ITEM (csynth));
  
  /* set output parameters */
  bse_value_set_object (out_values++, G_OBJECT (csynth));
  g_object_unref (csynth);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, create-midi-synth) {
  BLURB	= "Create a MIDI synthesizer network for this project.";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  IN    = sfi_pspec_string ("name", "Name", "MIDI synth name",
			    NULL, SFI_PARAM_DEFAULT);
  OUT	= bse_param_spec_object ("midi_synth", "MIDI Synthesizer", "New MIDI synth",
				 BSE_TYPE_MIDI_SYNTH, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = bse_value_get_object (in_values++);
  gchar *name         = sfi_value_get_string (in_values++);
  BseMidiSynth *midi_synth;
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  midi_synth = g_object_new (BSE_TYPE_MIDI_SYNTH,
			     name ? "uname" : NULL, name,
			     NULL);
  bse_container_add_item (BSE_CONTAINER (project), BSE_ITEM (midi_synth));
  
  /* set output parameters */
  bse_value_set_object (out_values++, G_OBJECT (midi_synth));
  g_object_unref (midi_synth);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, remove-snet) {
  BLURB	= "Remove an existing synthesizer network from this project.";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  IN	= bse_param_spec_object ("snet", "SNet", "Synthesizer Network",
				 BSE_TYPE_SNET, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseContainer *project = bse_value_get_object (in_values++);
  BseItem      *snet    = bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project) || !BSE_IS_SNET (snet) || snet->parent != (BseItem*) project)
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  if (!BSE_SOURCE_PREPARED (project))
    bse_container_remove_item (project, snet);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, list-uname-paths) {
  HELP  = ("List uname paths for all items of a specified type within this project. "
	   "By their uname paths, items are uniquely identifyable within a project.");
  IN    = bse_param_spec_object ("project", NULL, NULL,
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  IN    = sfi_pspec_string ("item_type", NULL, NULL,
			    NULL, SFI_PARAM_DEFAULT);
  OUT   = bse_param_spec_boxed ("uname_paths", "Uname Paths", NULL, BSE_TYPE_STRING_SEQ, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = bse_value_get_object (in_values++);
  const gchar *tname  = sfi_value_get_string (in_values++);
  GType type          = tname ? g_type_from_name (tname) : 0;
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project) || !g_type_is_a (type, BSE_TYPE_ITEM))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  bse_value_take_boxed (out_values++, bse_project_list_upaths (project, type));
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, find-item) {
  HELP  = "Find an item within a project, given its uname path.";
  IN    = bse_param_spec_object ("project", NULL, NULL,
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  IN    = sfi_pspec_string ("uname_path", NULL, NULL,
			    NULL, SFI_PARAM_DEFAULT);
  OUT   = bse_param_spec_object ("item", NULL, NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = bse_value_get_object (in_values++);
  const gchar *string = sfi_value_get_string (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project) || !string)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  bse_value_set_object (out_values++, bse_container_resolve_upath (BSE_CONTAINER (project), string));
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, match-items-by-uname) {
  HELP  = "Retrieve all items of a specific type within a project with matching uname";
  IN    = bse_param_spec_object ("project", NULL, NULL,
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  IN    = sfi_pspec_string ("item_type", NULL, NULL,
			    NULL, SFI_PARAM_DEFAULT);
  IN    = sfi_pspec_string ("uname", NULL, NULL,
			    NULL, SFI_PARAM_DEFAULT);
  OUT   = bse_param_spec_boxed ("item_list", "Item List", NULL, BSE_TYPE_PROXY_SEQ, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = bse_value_get_object (in_values++);
  const gchar *tname  = sfi_value_get_string (in_values++);
  const gchar *string = sfi_value_get_string (in_values++);
  GType type          = tname ? g_type_from_name (tname) : 0;
  GList *list, *free_list;
  BseProxySeq *pseq;
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project) || !string || !g_type_is_a (type, BSE_TYPE_ITEM))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  pseq = bse_proxy_seq_new ();
  free_list = bse_objects_list_by_uname (type, string);
  for (list = free_list; list; list = list->next)
    if (bse_item_get_project (list->data) == project)
      {
	bse_proxy_seq_append (pseq, BSE_OBJECT_ID (list->data));
	break;
      }
  g_list_free (free_list);
  
  /* set output parameters */
  bse_value_take_boxed (out_values++, pseq);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, get-supers) {
  HELP  = "Retrieve all supers of this project.";
  IN    = bse_param_spec_object ("project", NULL, NULL,
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  OUT   = bse_param_spec_boxed ("super_list", NULL, NULL, BSE_TYPE_PROXY_SEQ, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = bse_value_get_object (in_values++);
  BseProxySeq *pseq;
  GSList *slist;
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  pseq = bse_proxy_seq_new ();
  for (slist = project->supers; slist; slist = slist->next)
    bse_proxy_seq_append (pseq, BSE_OBJECT_ID (slist->data));
  
  /* set output parameters */
  bse_value_take_boxed (out_values++, pseq);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, can-play) {
  HELP	= "Check whether project playback would makes sense.";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  OUT	= sfi_pspec_bool ("can_play", "Can Play", "Whether project playback makes sense",
			  FALSE, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *project = bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PROJECT (project))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_set_bool (out_values++, project->supers != NULL);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, get-state) {
  HELP	= "Retrieve the current project state.";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  OUT	= bse_param_spec_genum ("state", "State", "Project playback/activation state",
				BSE_TYPE_PROJECT_STATE, BSE_PROJECT_INACTIVE, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *self = bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PROJECT (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  g_value_set_enum (out_values++, self->state);
  
  return BSE_ERROR_NONE;
}

METHOD (BseProject, activate) {
  HELP	= "Activate a project, precondition to start playback.";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  OUT	= bse_param_spec_genum ("error", "Error", NULL,
				BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE,
				SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *self = bse_value_get_object (in_values++);
  BseErrorType error;

  /* check parameters */
  if (!BSE_IS_PROJECT (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  error = bse_project_activate (self);

  g_value_set_enum (out_values++, error);

  return BSE_ERROR_NONE;
}

METHOD (BseProject, start-playback) {
  HELP	= "Start playback in an activated project.";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *self = bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_PROJECT (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  bse_project_start_playback (self);

  return BSE_ERROR_NONE;
}

METHOD (BseProject, stop-playback) {
  HELP	= "Stop project playback.";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *self = bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_PROJECT (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  bse_project_stop_playback (self);

  return BSE_ERROR_NONE;
}

METHOD (BseProject, deactivate) {
  HELP	= "Deactivate the project, automatically stop playback.";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *self = bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_PROJECT (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  bse_project_deactivate (self);

  return BSE_ERROR_NONE;
}

METHOD (BseProject, play) {
  HELP	= "Activate a project and start project playback (and already playing project is first halted).";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  OUT	= bse_param_spec_genum ("error", "Error", NULL,
				BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE,
				SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *self = bse_value_get_object (in_values++);
  BseErrorType error;

  /* check parameters */
  if (!BSE_IS_PROJECT (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  error = bse_project_activate (self);
  if (!error)
    {
      if (self->state == BSE_PROJECT_PLAYING)
	bse_project_stop_playback (self);
      bse_project_start_playback (self);
    }

  g_value_set_enum (out_values++, error);

  return BSE_ERROR_NONE;
}

METHOD (BseProject, stop) {
  HELP	= "Stop project playback and deactivate project.";
  IN	= bse_param_spec_object ("project", "Project", "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *self = bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_PROJECT (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  bse_project_deactivate (self);

  return BSE_ERROR_NONE;
}

METHOD (BseProject, auto-deactivate) {
  HELP	= "Automatically deactivate a project once playback stopped.";
  IN	= bse_param_spec_object ("project", NULL, "The project",
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("msec_delay", NULL, "Delay for deactivation in milliseconds",
			 0, -1, G_MAXINT, 1000, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseProject *self  = bse_value_get_object (in_values++);
  gint64      msecs = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_PROJECT (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  self->deactivate_usecs = msecs < 0 ? -1 : msecs * 1000;

  return BSE_ERROR_NONE;
}
