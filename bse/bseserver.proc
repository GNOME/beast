/* BSE - Bedevilled Sound Engine	-*-mode: c;-*-
 * Copyright (C) 2000-2001 Tim Janik
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 *
 * bseserver.proc: BSE Server procedures
 */
#include        <bse/bseplugin.h>
#include        <bse/bseprocedure.h>
#include        <bse/bseserver.h>
#include        <bse/bseproject.h>
#include        <bse/gslloader.h>
#include        <bse/bswprivate.h>


AUTHOR	= "Tim Janik <timj@gtk.org>";
CRIGHTS	= "Tim Janik";
DATE	= "2001";


METHOD (BseServer, use-new-project) {
  HELP	= "Create a new project, owned by the caller";
  IN	= g_param_spec_object ("server", "Server", NULL,
 			       BSE_TYPE_SERVER, BSE_PARAM_DEFAULT);
  IN	= g_param_spec_string ("name", "Project Name", NULL,
			       NULL, BSE_PARAM_DEFAULT);
  OUT	= g_param_spec_object ("project", "Project", NULL,
			       BSE_TYPE_PROJECT, BSE_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      GValue            *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server     = (BseServer*) g_value_get_object (in_values++);
  gchar *name           = g_value_get_string (in_values++);
  BseProject *project;
  
  /* check parameters */
  if (!BSE_IS_SERVER (server) || !name || bse_server_find_project (server, name))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* create project */
  project = bse_server_create_project (server, name);
  bse_item_exec_void_proc (project, "use");
  bse_object_unref (project);
  
  /* set output parameters */
  g_value_set_object (out_values++, G_OBJECT (project));
  
  return BSE_ERROR_NONE;
}

METHOD (BseServer, run-project) {
  HELP	= "Process a project to generate sound";
  IN	= g_param_spec_object ("server", "Server", NULL,
 			       BSE_TYPE_SERVER, BSE_PARAM_DEFAULT);
  IN	= g_param_spec_object ("project", "Project", NULL,
			       BSE_TYPE_PROJECT, BSE_PARAM_DEFAULT);
  OUT   = g_param_spec_enum ("error", "Error", NULL,
			     BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE,
			     BSE_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      GValue            *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server	= (BseServer*) g_value_get_object (in_values++);
  BseProject *project	= (BseProject*) g_value_get_object (in_values++);
  BseErrorType error = 0;
  
  /* check parameters */
  if (!BSE_IS_SERVER (server) || !BSE_IS_PROJECT (project))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* check that we have running MIDI/PCM devices */
  if (!server->dev_use_count)
    error = bse_server_activate_devices (server);
  
  /* if project is currently playing, halt it */
  if (!error && BSE_SOURCE_PREPARED (project))
    {
      bse_project_stop_playback (project);
      g_return_val_if_fail (server->dev_use_count > 0, BSE_ERROR_INTERNAL);
      server->dev_use_count--;
    }

  /* (re-)start project playback */
  if (!error)
    {
      bse_project_start_playback (project);
      server->dev_use_count++;
    }

  /* set output parameters */
  g_value_set_enum (out_values++, error);
  
  return BSE_ERROR_NONE;
}

METHOD (BseServer, halt-project) {
  HELP	= "Stop processing a project generating sound";
  IN	= g_param_spec_object ("server", "Server", NULL,
 			       BSE_TYPE_SERVER, BSE_PARAM_DEFAULT);
  IN	= g_param_spec_object ("project", "Project", NULL,
			       BSE_TYPE_PROJECT, BSE_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      GValue            *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server	= g_value_get_object (in_values++);
  BseProject *project	= g_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_SERVER (server) || !BSE_IS_PROJECT (project))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* if project is currently playing, halt it */
  if (BSE_SOURCE_PREPARED (project))
    {
      bse_project_stop_playback (project);
      g_return_val_if_fail (server->dev_use_count > 0, BSE_ERROR_INTERNAL);
      server->dev_use_count--;
      if (!server->dev_use_count)
	bse_server_suspend_devices (server);
    }
  
  return BSE_ERROR_NONE;
}

METHOD (BseServer, can-load) {
  HELP	= "Check whether a loader can be found for a wave file";
  IN	= g_param_spec_object ("server", "Server", NULL,
 			       BSE_TYPE_SERVER, BSE_PARAM_DEFAULT);
  IN    = g_param_spec_string ("file_name", "File Name", "The file to find a loader for",
			       NULL, BSE_PARAM_DEFAULT);
  OUT   = g_param_spec_boolean ("can-load", NULL, NULL,
				FALSE, BSE_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      GValue            *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server	= g_value_get_object (in_values++);
  gchar *file_name	= g_value_get_string (in_values++);
  GslWaveFileInfo *finfo;

  /* check parameters */
  if (!BSE_IS_SERVER (server) || !file_name)
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* find a loader */
  finfo = gsl_wave_file_info_load (file_name, NULL);
  g_value_set_boolean (out_values++, finfo != NULL);
  if (finfo)
    gsl_wave_file_info_free (finfo);
  
  return BSE_ERROR_NONE;
}

METHOD (BseServer, describe-note) {
  HELP	= "Describe a note, providing information about its octave, half tone, frequency, etc.";
  IN	= g_param_spec_object ("server", "Server", NULL,
 			       BSE_TYPE_SERVER, BSE_PARAM_DEFAULT);
  IN    = bse_param_spec_uint ("note", "Note", NULL,
			       BSE_MIN_NOTE, BSE_MAX_NOTE,
			       BSE_KAMMER_NOTE, 1,
			       BSE_PARAM_DEFAULT);
  IN    = bse_param_spec_int ("fine_tune", "Fine Tune", NULL,
			      BSE_MIN_FINE_TUNE, BSE_MAX_FINE_TUNE,
			      0, 1, BSE_PARAM_DEFAULT);
  OUT   = g_param_spec_boxed ("note-description", NULL, NULL,
			      BSW_TYPE_NOTE_DESCRIPTION, BSE_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      GValue            *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server	= g_value_get_object (in_values++);
  gint       note	= g_value_get_uint (in_values++);
  gint       fine_tune	= g_value_get_int (in_values++);
  BswNoteDescription *info;

  /* check parameters */
  if (!BSE_IS_SERVER (server))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* describe note */
  info = bsw_note_description (note, fine_tune);

  /* set output parameters */
  g_value_set_boxed_take_ownership (out_values++, info);
  
  return BSE_ERROR_NONE;
}

METHOD (BseServer, note-from-freq) {
  HELP	= "Describe a note, given its frequency.";
  IN	= g_param_spec_object ("server", "Server", NULL,
 			       BSE_TYPE_SERVER, BSE_PARAM_DEFAULT);
  IN    = bse_param_spec_float ("freq", "Frequency", NULL,
				0, BSE_MAX_FREQUENCY,
				BSE_KAMMER_FREQ_f, 10.0,
				BSE_PARAM_DEFAULT);
  OUT   = g_param_spec_boxed ("note-description", NULL, NULL,
			      BSW_TYPE_NOTE_DESCRIPTION, BSE_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      GValue            *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server	= g_value_get_object (in_values++);
  gfloat     freq	= g_value_get_float (in_values++);
  BswNoteDescription *info;
  gint note;

  /* check parameters */
  if (!BSE_IS_SERVER (server))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* describe note */
  note = bse_note_from_freq (freq);
  info = bsw_note_description (note, 0);

  /* set output parameters */
  g_value_set_boxed_take_ownership (out_values++, info);
  
  return BSE_ERROR_NONE;
}

METHOD (BseServer, note-from-string) {
  HELP	= "Describe a note, given its name and octave offset.";
  IN	= g_param_spec_object ("server", "Server", NULL,
 			       BSE_TYPE_SERVER, BSE_PARAM_DEFAULT);
  IN    = bse_param_spec_string ("name", "Name", NULL,
				 "", BSE_PARAM_DEFAULT);
  OUT   = g_param_spec_boxed ("note-description", NULL, NULL,
			      BSW_TYPE_NOTE_DESCRIPTION, BSE_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      GValue            *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server	= g_value_get_object (in_values++);
  gchar     *name     	= g_value_get_string (in_values++);
  BswNoteDescription *info;
  gint note;

  /* check parameters */
  if (!BSE_IS_SERVER (server) || !name)
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* describe note */
  note = bse_note_from_string (name);
  info = bsw_note_description (note, 0);

  /* set output parameters */
  g_value_set_boxed_take_ownership (out_values++, info);
  
  return BSE_ERROR_NONE;
}

METHOD (BseServer, construct-note) {
  HELP	= "Describe a note, given its half tone, octave and fine tune.";
  IN	= g_param_spec_object ("server", "Server", NULL,
 			       BSE_TYPE_SERVER, BSE_PARAM_DEFAULT);
  IN    = bse_param_spec_uint ("half-tone", NULL, NULL,
			       0, 11,
			       9, 1, BSE_PARAM_DEFAULT);
  IN    = bse_param_spec_int ("octave", NULL, NULL,
			      BSE_MIN_OCTAVE, BSE_MAX_OCTAVE,
			      BSE_KAMMER_OCTAVE, 1, BSE_PARAM_DEFAULT);
  IN    = bse_param_spec_int ("fine_tune", "Fine Tune", NULL,
			      BSE_MIN_FINE_TUNE, BSE_MAX_FINE_TUNE,
			      0, 1, BSE_PARAM_DEFAULT);
  OUT   = g_param_spec_boxed ("note-description", NULL, NULL,
			      BSW_TYPE_NOTE_DESCRIPTION, BSE_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      GValue            *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server	= g_value_get_object (in_values++);
  guint      half_tone	= g_value_get_uint (in_values++);
  gint       octave	= g_value_get_int (in_values++);
  gint       fine_tune	= g_value_get_int (in_values++);
  BswNoteDescription *info;
  gint note;

  /* check parameters */
  if (!BSE_IS_SERVER (server))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* describe note */
  note = BSE_NOTE_GENERIC (half_tone, octave);
  info = bsw_note_description (note, fine_tune);

  /* set output parameters */
  g_value_set_boxed_take_ownership (out_values++, info);
  
  return BSE_ERROR_NONE;
}
