/* BSE - Bedevilled Sound Engine	-*-mode: c;-*-
 * Copyright (C) 2000-2003 Tim Janik
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 */
#include <bse/bseplugin.h>
#include <bse/bseprocedure.h>
#include <bse/bseserver.h>
#include <bse/bseproject.h>
#include <bse/gslloader.h>
#include <bse/bsemidinotifier.h>
#include <bse/bsemidievent.h>
#include <bse/bsejanitor.h>
#include <bse/bsescripthelper.h>
#include <bse/bsegconfig.h>
#include <bse/bseladspa.h>
#include "PKG_config.h"
#include <string.h>


AUTHORS	= "Tim Janik <timj@gtk.org>";
CRIGHTS = "Copyright (C) 2001-2002 Tim Janik";


METHOD (BseServer, use-new-project) {
  HELP	= "Create a new project, owned by the caller (name is modified to be unique if necessary)";
  IN	= bse_param_spec_object ("server", "Server", NULL,
				 BSE_TYPE_SERVER, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_string ("name", "Project Name", NULL,
			    NULL, SFI_PARAM_DEFAULT);
  OUT	= bse_param_spec_object ("project", "Project", NULL,
				 BSE_TYPE_PROJECT, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server     = (BseServer*) bse_value_get_object (in_values++);
  gchar *name           = sfi_value_get_string (in_values++);
  gchar *uname;
  guint num = 1;
  BseProject *project;
  
  /* check parameters */
  if (!BSE_IS_SERVER (server) || !name)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* enforce unique name */
  uname = g_strdup (name);
  while (bse_server_find_project (server, uname))
    {
      g_free (uname);
      uname = g_strdup_printf ("%s-%u", name, num++);
    }
  
  /* create project */
  project = bse_server_create_project (server, uname);
  g_free (uname);
  bse_item_use (BSE_ITEM (project));
  g_object_unref (project);
  
  /* set output parameters */
  bse_value_set_object (out_values++, G_OBJECT (project));
  
  return BSE_ERROR_NONE;
}

METHOD (BseServer, get-midi-notifier) {
  HELP	= "Retrieve the global midi notifier object.";
  IN	= bse_param_spec_object ("server", "Server", NULL,
				 BSE_TYPE_SERVER, SFI_PARAM_DEFAULT);
  OUT	= bse_param_spec_object ("midi_notifier", "Midi Notifier", NULL,
				 BSE_TYPE_MIDI_NOTIFIER, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *self = bse_value_get_object (in_values++);
  BseMidiReceiver *midi_receiver;
  BseMidiNotifier *notifier;
  
  /* check parameters */
  if (!BSE_IS_SERVER (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  midi_receiver = bse_server_get_midi_receiver (self, "default");
  notifier = bse_midi_receiver_get_notifier (midi_receiver);
  if (!notifier)
    {
      notifier = g_object_new (BSE_TYPE_MIDI_NOTIFIER, NULL);
      bse_midi_receiver_set_notifier (midi_receiver, notifier);
      g_object_unref (notifier);
    }
  
  /* set output parameters */
  bse_value_set_object (out_values++, G_OBJECT (notifier));
  
  return BSE_ERROR_NONE;
}

METHOD (BseServer, can-load) {
  HELP	= "Check whether a loader can be found for a wave file";
  IN	= bse_param_spec_object ("server", "Server", NULL,
				 BSE_TYPE_SERVER, SFI_PARAM_DEFAULT);
  IN    = sfi_pspec_string ("file_name", "File Name", "The file to find a loader for",
			    NULL, SFI_PARAM_DEFAULT);
  OUT   = sfi_pspec_bool ("can-load", NULL, NULL,
			  FALSE, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server	= bse_value_get_object (in_values++);
  gchar *file_name	= sfi_value_get_string (in_values++);
  GslWaveFileInfo *finfo;
  
  /* check parameters */
  if (!BSE_IS_SERVER (server) || !file_name)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* find a loader */
  finfo = gsl_wave_file_info_load (file_name, NULL);
  sfi_value_set_bool (out_values++, finfo != NULL);
  if (finfo)
    gsl_wave_file_info_unref (finfo);
  
  return BSE_ERROR_NONE;
}

METHOD (BseServer, describe-note) {
  HELP	= "Describe a note, providing information about its octave, semitone, frequency, etc.";
  IN	= bse_param_spec_object ("server", "Server", NULL,
				 BSE_TYPE_SERVER, SFI_PARAM_DEFAULT);
  IN    = bse_pspec_note_simple ("note", "Note", NULL, SFI_PARAM_DEFAULT);
  IN    = bse_param_spec_fine_tune ("fine_tune", "Fine Tune", NULL);
  OUT   = bse_param_spec_boxed ("note-description", "Note Description", NULL,
			 BSE_TYPE_NOTE_DESCRIPTION, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server	= bse_value_get_object (in_values++);
  gint       note	= sfi_value_get_int (in_values++);
  gint       fine_tune	= sfi_value_get_int (in_values++);
  
  /* check parameters */
  if (!BSE_IS_SERVER (server))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* describe note */
  bse_value_take_boxed (out_values++, bse_note_description (note, fine_tune));
  
  return BSE_ERROR_NONE;
}

METHOD (BseServer, note-from-freq) {
  HELP	= "Describe a note, given its frequency.";
  IN	= bse_param_spec_object ("server", "Server", NULL,
				 BSE_TYPE_SERVER, SFI_PARAM_DEFAULT);
  IN    = sfi_pspec_real ("freq", "Frequency", NULL,
			  BSE_KAMMER_FREQUENCY_f,
			  0, BSE_MAX_FREQUENCY_f,
			  10.0, SFI_PARAM_DEFAULT);
  OUT   = bse_param_spec_boxed ("note-description", "Note Description", NULL,
			 BSE_TYPE_NOTE_DESCRIPTION, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server	= bse_value_get_object (in_values++);
  gfloat     freq	= sfi_value_get_real (in_values++);
  gint note;
  
  /* check parameters */
  if (!BSE_IS_SERVER (server))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* describe note */
  note = bse_note_from_freq (freq);
  bse_value_take_boxed (out_values++, bse_note_description (note, 0));
  
  return BSE_ERROR_NONE;
}

METHOD (BseServer, note-from-string) {
  HELP	= "Describe a note, given its name and octave offset.";
  IN	= bse_param_spec_object ("server", "Server", NULL,
				 BSE_TYPE_SERVER, SFI_PARAM_DEFAULT);
  IN    = sfi_pspec_string ("name", "Name", NULL,
			    "", SFI_PARAM_DEFAULT);
  OUT   = bse_param_spec_boxed ("note-description", "Note Description", NULL,
			 BSE_TYPE_NOTE_DESCRIPTION, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server	= bse_value_get_object (in_values++);
  gchar     *name     	= sfi_value_get_string (in_values++);
  gint note;
  
  /* check parameters */
  if (!BSE_IS_SERVER (server) || !name)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* describe note */
  note = bse_note_from_string (name);
  bse_value_take_boxed (out_values++, bse_note_description (note, 0));
  
  return BSE_ERROR_NONE;
}

METHOD (BseServer, construct-note) {
  HELP	= "Describe a note, given its semitone, octave and fine tune.";
  IN	= bse_param_spec_object ("server", "Server", NULL,
				 BSE_TYPE_SERVER, SFI_PARAM_DEFAULT);
  IN    = sfi_pspec_int ("semitone", NULL, NULL,
			 9, 0, 11, 1,
			 SFI_PARAM_DEFAULT);
  IN    = bse_param_spec_octave ("octave", NULL, NULL);
  IN    = bse_param_spec_fine_tune ("fine_tune", "Fine Tune", NULL);
  OUT   = bse_param_spec_boxed ("note-description", "Note Description", NULL,
			 BSE_TYPE_NOTE_DESCRIPTION, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server	= bse_value_get_object (in_values++);
  guint      semitone	= sfi_value_get_int (in_values++);
  gint       octave	= sfi_value_get_int (in_values++);
  gint       fine_tune	= sfi_value_get_int (in_values++);
  gint note;
  
  /* check parameters */
  if (!BSE_IS_SERVER (server))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* describe note */
  note = BSE_NOTE_GENERIC (octave, semitone);
  bse_value_take_boxed (out_values++, bse_note_description (note, fine_tune));
  
  return BSE_ERROR_NONE;
}

METHOD (BseServer, n-scripts) {
  HELP	= "Return the number of scripts currently running on this server.";
  IN	= bse_param_spec_object ("server", "Server", NULL,
				 BSE_TYPE_SERVER, SFI_PARAM_DEFAULT);
  OUT   = sfi_pspec_int ("n_connections", NULL, "Number of Connections",
			 0, 0, G_MAXINT, 1,
			 SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server	= bse_value_get_object (in_values++);
  GSList *slist;
  guint n_scripts = 0;
  
  /* check parameters */
  if (!BSE_IS_SERVER (server))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* count script controls */
  for (slist = server->children; slist; slist = slist->next)
    if (BSE_IS_JANITOR (slist->data))
      n_scripts++;
  
  /* set output parameters */
  sfi_value_set_int (out_values++, n_scripts);
  
  return BSE_ERROR_NONE;
}

METHOD (BseServer, preferences-locked) {
  HELP	= "Returns whether the bse-preferences property is currently locked against modifications or not.";
  IN	= bse_param_spec_object ("server", "Server", NULL,
				 BSE_TYPE_SERVER, SFI_PARAM_DEFAULT);
  OUT   = sfi_pspec_bool ("locked", NULL, NULL,
			  FALSE, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server	= bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_SERVER (server))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_set_int (out_values++, bse_gconfig_locked ());
  
  return BSE_ERROR_NONE;
}

typedef struct _ScriptRegistration ScriptRegistration;
struct _ScriptRegistration
{
  gchar         *script;
  BseErrorType (*register_func) (const gchar *script,
				 BseJanitor **janitor_p);
  ScriptRegistration *next;
};

static gboolean	register_scripts (gpointer data);

static void
script_janitor_closed (BseJanitor *janitor,
		       BseServer  *server)
{
  bse_server_registration (server, BSE_REGISTER_SCRIPT, bse_janitor_get_script (janitor), NULL);
  bse_idle_normal (register_scripts, server);
}

static gboolean
register_scripts (gpointer data)
{
  BseServer *server = data;
  ScriptRegistration *scr = g_object_get_data (server, "script-registration-queue");
  BseJanitor *janitor = NULL;
  BseErrorType error;

  if (!scr)
    {
      bse_server_registration (server, BSE_REGISTER_DONE, NULL, NULL);
      return FALSE;
    }
  g_object_set_data (server, "script-registration-queue", scr->next);

  error = scr->register_func (scr->script, &janitor);
  if (!janitor)
    {
      bse_server_registration (server, BSE_REGISTER_SCRIPT, scr->script, bse_error_blurb (error));
      g_free (scr->script);
      g_free (scr);
      return TRUE;
    }
  g_object_connect (janitor, "signal::closed", script_janitor_closed, server, NULL);
  return FALSE;
}

METHOD (BseServer, register-scripts) {
  HELP	= "Register external scripts.";
  IN	= bse_param_spec_object ("server", "Server", NULL,
				 BSE_TYPE_SERVER, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  static gboolean registration_done = FALSE;
  /* extract parameter values */
  BseServer *server	       = bse_value_get_object (in_values++);
  const gchar *path            = BSE_PATH_SCRIPTS;
  ScriptRegistration *scr_list = NULL;
  GSList *free_list, *list;

  /* check parameters */
  if (!BSE_IS_SERVER (server))
    return BSE_ERROR_PROC_PARAM_INVAL;

  if (registration_done)
    {
      bse_server_registration (server, BSE_REGISTER_DONE, NULL, NULL);
      return BSE_ERROR_NONE;
    }
  registration_done = TRUE;

  list = bse_search_path_list_files (path, "*.scm", NULL, G_FILE_TEST_IS_REGULAR);
  free_list = g_slist_sort (list, (GCompareFunc) strcmp);
  for (list = free_list; list; list = list->next)
    {
      ScriptRegistration *scr = g_new0 (ScriptRegistration, 1);
      scr->script = list->data;
      scr->register_func = bse_script_file_register;
      scr->next = scr_list;
      scr_list = scr;
    }
  g_slist_free (free_list);

  g_object_set_data (server, "script-registration-queue", scr_list);
  bse_idle_normal (register_scripts, server);

  return BSE_ERROR_NONE;
}

static gboolean
register_plugins (gpointer data)
{
  BseServer *server = data;
  GSList *plugin_slist = g_object_get_data (server, "plugin-registration-queue");
  GSList *ladspa_slist = g_object_get_data (server, "ladspa-registration-queue");
  const gchar *error;

  if (plugin_slist)
    {
      g_object_set_data (server, "plugin-registration-queue", plugin_slist->next);
      error = bse_plugin_check_load (plugin_slist->data);
      bse_server_registration (server, BSE_REGISTER_PLUGIN, plugin_slist->data, error);
      g_free (plugin_slist->data);
      g_slist_free_1 (plugin_slist);
    }
  else if (ladspa_slist)
    {
      g_object_set_data (server, "ladspa-registration-queue", ladspa_slist->next);
      error = bse_ladspa_plugin_check_load (ladspa_slist->data);
      bse_server_registration (server, BSE_REGISTER_PLUGIN, ladspa_slist->data, error);
      g_free (ladspa_slist->data);
      g_slist_free_1 (ladspa_slist);
    }
  else
    {
      bse_server_registration (server, BSE_REGISTER_DONE, NULL, NULL);
      return FALSE;
    }
  return TRUE;
}

METHOD (BseServer, register-plugins) {
  HELP	= "Register core plugins.";
  IN	= bse_param_spec_object ("server", "Server", NULL,
				 BSE_TYPE_SERVER, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  static gboolean registration_done = FALSE;
  /* extract parameter values */
  BseServer *server	= bse_value_get_object (in_values++);
  gchar *paths;
  GSList *slist;

  /* check parameters */
  if (!BSE_IS_SERVER (server))
    return BSE_ERROR_PROC_PARAM_INVAL;

  if (registration_done)
    {
      bse_server_registration (server, BSE_REGISTER_DONE, NULL, NULL);
      return BSE_ERROR_NONE;
    }
  registration_done = TRUE;

  slist = bse_plugin_dir_list_files (BSE_PATH_PLUGINS);
  g_object_set_data (server, "plugin-registration-queue", slist);

  slist = bse_ladspa_plugin_dir_list_files (BSE_PATH_LADSPA);
  paths = g_getenv ("LADSPA_PATH");
  if (paths)
    {
      GSList *slist2 = bse_ladspa_plugin_dir_list_files (paths);
      slist = g_slist_concat (slist, slist2);
    }
  g_object_set_data (server, "ladspa-registration-queue", slist);
  bse_idle_normal (register_plugins, server);

  return BSE_ERROR_NONE;
}

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

METHOD (BseServer, save-preferences) {
  HELP	= "Request the bse-preferences property to be saved into BSE's configuration file.";
  IN	= bse_param_spec_object ("server", "Server", NULL,
				 BSE_TYPE_SERVER, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server = bse_value_get_object (in_values++);
  SfiWStore *wstore;
  gchar *file_name;
  GValue *value;
  SfiRec *rec;
  gint fd;
  
  /* check parameters */
  if (!BSE_IS_SERVER (server))
    return BSE_ERROR_PROC_PARAM_INVAL;

  file_name = g_strconcat (g_get_home_dir (), "/.bserc", NULL);
  fd = open (file_name,
	     O_WRONLY | O_CREAT | O_TRUNC, /* O_EXCL, */
	     0666);
  g_free (file_name);
  if (fd < 0)
    return BSE_ERROR_NONE;

  wstore = sfi_wstore_new ();
  sfi_wstore_printf (wstore, "; rc-file for BSE v%s\n", BSE_VERSION);

  /* store BseGConfig */
  sfi_wstore_puts (wstore, "\n; BseGConfig Dump\n");
  rec = bse_gconfig_to_rec (bse_global_config);
  value = sfi_value_rec (rec);
  sfi_wstore_put_param (wstore, value, bse_gconfig_pspec ());
  sfi_value_free (value);
  sfi_rec_unref (rec);
  sfi_wstore_puts (wstore, "\n");

  /* flush stuff to rc file */
  sfi_wstore_flush_fd (wstore, fd);
  sfi_wstore_destroy (wstore);
  close (fd);

  return BSE_ERROR_NONE;
}
