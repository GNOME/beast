// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
#include <bse/bseplugin.hh>
#include <bse/bseprocedure.hh>
#include <bse/bseserver.hh>
#include <bse/bseproject.hh>
#include <bse/bseloader.hh>
#include <bse/bsemidinotifier.hh>
#include <bse/bsemidievent.hh>
#include <bse/bsejanitor.hh>
#include <bse/bsescripthelper.hh>
#include <bse/bsegconfig.hh>
#include "topconfig.h"
#include <string.h>

AUTHORS	= "Tim Janik <timj@gtk.org>";
LICENSE = "GNU Lesser General Public License";


METHOD (BseServer, use-new-project) {
  HELP	= "Create a new project, owned by the caller (name is modified to be unique if necessary)";
  IN	= bse_param_spec_object ("server", "Server", NULL,
				 BSE_TYPE_SERVER, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_string ("name", "Project Name", NULL,
			    NULL, SFI_PARAM_STANDARD);
  OUT	= bse_param_spec_object ("project", "Project", NULL,
				 BSE_TYPE_PROJECT, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseServer *server = (BseServer*) bse_value_get_object (in_values++);
  const char *name = sfi_value_get_string (in_values++);
  gchar *uname;
  guint num = 1;
  BseProject *project;

  /* check parameters */
  if (!BSE_IS_SERVER (server) || !name)
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* enforce unique name */
  uname = g_strdup (name);
  while (bse_server_find_project (server, uname))
    {
      g_free (uname);
      uname = g_strdup_format ("%s-%u", name, num++);
    }

  /* create project */
  project = bse_server_create_project (server, uname);
  g_free (uname);
  bse_item_use (BSE_ITEM (project));
  g_object_unref (project);

  /* set output parameters */
  bse_value_set_object (out_values++, G_OBJECT (project));

  return BSE_ERROR_NONE;
}
