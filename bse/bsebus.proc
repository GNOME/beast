/* BSE - Bedevilled Sound Engine	-*-mode: c;-*-
 * Copyright (C) 2004 Tim Janik
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */
#include <bse/bseplugin.h>
#include <bse/bseprocedure.h>
#include <bse/bsebus.h>
#include <bse/bsetrack.h>
#include <bse/bsesong.h>
#include <bse/bseundostack.h>


AUTHORS	= "Tim Janik <timj@gtk.org>";
LICENSE = "Copyright (C) 2004 Tim Janik";


METHOD (BseBus, connect-track) {
  HELP  = _("Add a track to the input list of a bus.");
  IN    = bse_param_spec_object ("sbus", NULL, NULL, BSE_TYPE_BUS, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_object ("track", NULL, NULL, BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", NULL, NULL,
                                BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseBus *self = bse_value_get_object (in_values++);
  BseTrack   *track = bse_value_get_object (in_values++);
  BseErrorType error = BSE_ERROR_NONE;

  /* check parameters */
  if (!BSE_IS_BUS (self) || !BSE_IS_TRACK (track))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  if (!BSE_ITEM (self)->parent || BSE_ITEM (self)->parent != BSE_ITEM (track)->parent)
    error = BSE_ERROR_SOURCE_PARENT_MISMATCH;
  else
    {
      error = bse_bus_connect (self, BSE_SOURCE (track));
      if (!error)
        bse_item_push_undo_proc (self, "disconnect-track", track);
    }

  /* set output parameters */
  g_value_set_enum (out_values++, error);

  return BSE_ERROR_NONE;
}

METHOD (BseBus, disconnect-track) {
  HELP  = _("Remove a track from the input list of a bus.");
  IN    = bse_param_spec_object ("sbus", NULL, NULL, BSE_TYPE_BUS, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_object ("track", NULL, NULL, BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", NULL, NULL,
                                BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseBus *self = bse_value_get_object (in_values++);
  BseTrack   *track = bse_value_get_object (in_values++);
  BseErrorType error = BSE_ERROR_NONE;

  /* check parameters */
  if (!BSE_IS_BUS (self) || !BSE_IS_TRACK (track))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  if (!BSE_ITEM (self)->parent || BSE_ITEM (self)->parent != BSE_ITEM (track)->parent)
    error = BSE_ERROR_SOURCE_PARENT_MISMATCH;
  else
    {
      error = bse_bus_disconnect (self, BSE_SOURCE (track));
      if (!error)
        bse_item_push_undo_proc (self, "connect-track", track);
    }

  /* set output parameters */
  g_value_set_enum (out_values++, error);

  return BSE_ERROR_NONE;
}

METHOD (BseBus, connect-bus) {
  HELP  = _("Add a bus to the input list of a bus.");
  IN    = bse_param_spec_object ("sbus", NULL, NULL, BSE_TYPE_BUS, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_object ("bus", NULL, NULL, BSE_TYPE_BUS, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", NULL, NULL,
                                BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseBus *self = bse_value_get_object (in_values++);
  BseBus *bus = bse_value_get_object (in_values++);
  BseErrorType error = BSE_ERROR_NONE;

  /* check parameters */
  if (!BSE_IS_BUS (self) || !BSE_IS_BUS (bus))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  if (!BSE_ITEM (self)->parent || BSE_ITEM (self)->parent != BSE_ITEM (bus)->parent)
    error = BSE_ERROR_SOURCE_PARENT_MISMATCH;
  else
    {
      error = bse_bus_connect (self, BSE_SOURCE (bus));
      if (!error)
        bse_item_push_undo_proc (self, "disconnect-bus", bus);
    }

  /* set output parameters */
  g_value_set_enum (out_values++, error);

  return BSE_ERROR_NONE;
}

METHOD (BseBus, disconnect-bus) {
  HELP  = _("Remove a bus from the input list of a bus.");
  IN    = bse_param_spec_object ("sbus", NULL, NULL, BSE_TYPE_BUS, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_object ("bus", NULL, NULL, BSE_TYPE_BUS, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", NULL, NULL,
                                BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseBus *self = bse_value_get_object (in_values++);
  BseBus     *bus = bse_value_get_object (in_values++);
  BseErrorType error = BSE_ERROR_NONE;

  /* check parameters */
  if (!BSE_IS_BUS (self) || !BSE_IS_BUS (bus))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  if (!BSE_ITEM (self)->parent || BSE_ITEM (self)->parent != BSE_ITEM (bus)->parent)
    error = BSE_ERROR_SOURCE_PARENT_MISMATCH;
  else
    {
      error = bse_bus_disconnect (self, BSE_SOURCE (bus));
      if (!error)
        bse_item_push_undo_proc (self, "connect-bus", bus);
    }

  /* set output parameters */
  g_value_set_enum (out_values++, error);

  return BSE_ERROR_NONE;
}
