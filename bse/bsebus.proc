// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
#include <bse/bseplugin.hh>
#include <bse/bseprocedure.hh>
#include <bse/bsebus.hh>
#include <bse/bsetrack.hh>
#include <bse/bsesong.hh>
#include <bse/bseundostack.hh>


AUTHORS	= "Tim Janik <timj@gtk.org>";
LICENSE = "Copyright (C) 2004 Tim Janik";


METHOD (BseBus, connect-track) {
  HELP  = _("Add a track to the input list of a bus.");
  IN    = bse_param_spec_object ("sbus", NULL, NULL, BSE_TYPE_BUS, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_object ("track", NULL, NULL, BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", NULL, NULL,
                                BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseBus *self = (BseBus*) bse_value_get_object (in_values++);
  BseTrack *track = (BseTrack*) bse_value_get_object (in_values++);
  BseErrorType error = BSE_ERROR_NONE;

  /* check parameters */
  if (!BSE_IS_BUS (self) || !BSE_IS_TRACK (track))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  if (!BSE_ITEM (self)->parent || BSE_ITEM (self)->parent != BSE_ITEM (track)->parent)
    error = BSE_ERROR_SOURCE_PARENT_MISMATCH;
  else
    {
      error = bse_bus_connect (self, BSE_ITEM (track));
      if (!error)
        bse_item_push_undo_proc (self, "disconnect-track", track);
    }

  /* set output parameters */
  g_value_set_enum (out_values++, error);

  return BSE_ERROR_NONE;
}

METHOD (BseBus, disconnect-track) {
  HELP  = _("Remove a track from the input list of a bus.");
  IN    = bse_param_spec_object ("sbus", NULL, NULL, BSE_TYPE_BUS, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_object ("track", NULL, NULL, BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", NULL, NULL,
                                BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseBus *self = (BseBus*) bse_value_get_object (in_values++);
  BseTrack *track = (BseTrack*) bse_value_get_object (in_values++);
  BseErrorType error = BSE_ERROR_NONE;

  /* check parameters */
  if (!BSE_IS_BUS (self) || !BSE_IS_TRACK (track))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  if (!BSE_ITEM (self)->parent || BSE_ITEM (self)->parent != BSE_ITEM (track)->parent)
    error = BSE_ERROR_SOURCE_PARENT_MISMATCH;
  else
    {
      error = bse_bus_disconnect (self, BSE_ITEM (track));
      if (!error)
        bse_item_push_undo_proc (self, "connect-track", track);
    }

  /* set output parameters */
  g_value_set_enum (out_values++, error);

  return BSE_ERROR_NONE;
}

METHOD (BseBus, connect-bus) {
  HELP  = _("Add a bus to the input list of a bus.");
  IN    = bse_param_spec_object ("sbus", NULL, NULL, BSE_TYPE_BUS, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_object ("bus", NULL, NULL, BSE_TYPE_BUS, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", NULL, NULL,
                                BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseBus *self = (BseBus*) bse_value_get_object (in_values++);
  BseBus *bus = (BseBus*) bse_value_get_object (in_values++);
  BseErrorType error = BSE_ERROR_NONE;

  /* check parameters */
  if (!BSE_IS_BUS (self) || !BSE_IS_BUS (bus))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  if (!BSE_ITEM (self)->parent || BSE_ITEM (self)->parent != BSE_ITEM (bus)->parent)
    error = BSE_ERROR_SOURCE_PARENT_MISMATCH;
  else
    {
      error = bse_bus_connect (self, BSE_ITEM (bus));
      if (!error)
        bse_item_push_undo_proc (self, "disconnect-bus", bus);
    }

  /* set output parameters */
  g_value_set_enum (out_values++, error);

  return BSE_ERROR_NONE;
}

METHOD (BseBus, disconnect-bus) {
  HELP  = _("Remove a bus from the input list of a bus.");
  IN    = bse_param_spec_object ("sbus", NULL, NULL, BSE_TYPE_BUS, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_object ("bus", NULL, NULL, BSE_TYPE_BUS, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", NULL, NULL,
                                BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseBus *self = (BseBus*) bse_value_get_object (in_values++);
  BseBus *bus = (BseBus*) bse_value_get_object (in_values++);
  BseErrorType error = BSE_ERROR_NONE;

  /* check parameters */
  if (!BSE_IS_BUS (self) || !BSE_IS_BUS (bus))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  if (!BSE_ITEM (self)->parent || BSE_ITEM (self)->parent != BSE_ITEM (bus)->parent)
    error = BSE_ERROR_SOURCE_PARENT_MISMATCH;
  else
    {
      error = bse_bus_disconnect (self, BSE_ITEM (bus));
      if (!error)
        bse_item_push_undo_proc (self, "connect-bus", bus);
    }

  /* set output parameters */
  g_value_set_enum (out_values++, error);

  return BSE_ERROR_NONE;
}

METHOD (BseBus, ensure-output) {
  HELP  = _("Ensure that a bus has an output connection.");
  IN    = bse_param_spec_object ("bus", NULL, NULL, BSE_TYPE_BUS, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", NULL, NULL,
                                BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseBus *self = (BseBus*) bse_value_get_object (in_values++);
  BseErrorType error = BSE_ERROR_NONE;

  /* check parameters */
  if (!BSE_IS_BUS (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  BseItem *parent = BSE_ITEM (self)->parent;
  if (BSE_IS_SONG (parent) && !self->bus_outputs)
    {
      BseSong *song = BSE_SONG (parent);
      BseBus *master = bse_song_find_master (song);
      if (master && self != master)
        {
          error = bse_bus_connect (master, BSE_ITEM (self));
          if (!error)
            bse_item_push_undo_proc (master, "disconnect-bus", self);
        }
    }

  /* set output parameters */
  g_value_set_enum (out_values++, error);

  return BSE_ERROR_NONE;
}
