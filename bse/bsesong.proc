/* BSE - Bedevilled Sound Engine        -*-mode: c;-*-
 * Copyright (C) 2003-2004 Tim Janik
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */
#include <bse/bseplugin.h>
#include <bse/bseprocedure.h>
#include <bse/bsesong.h>
#include <bse/bsebus.h>
#include <bse/bsepart.h>
#include <bse/bsetrack.h>
#include "bsemidireceiver.h"
#include "bseundostack.h"
#include "bseproject.h"
#include "gslcommon.h"
#include "bseengine.h"
#include <string.h>

AUTHORS = "Tim Janik <timj@gtk.org>";
LICENSE = "GNU Lesser General Public License";

METHOD (BseSong, create-bus) {
  HELP  = _("Create a new mixer bus for a Song.");
  IN    = bse_param_spec_object ("song", NULL, NULL,
				 BSE_TYPE_SONG, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_object ("bus", NULL, NULL,
				 BSE_TYPE_BUS, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseSong *self = bse_value_get_object (in_values++);
  BseErrorType error = BSE_ERROR_NONE;
  BseUndoStack *ustack;
  BseItem *child = NULL;

  /* check parameters */
  if (!BSE_IS_SONG (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  if (BSE_SOURCE_PREPARED (self))
    error = BSE_ERROR_SOURCE_BUSY;
  else
    {
      ustack = bse_item_undo_open (self, "create-bus");
      child = bse_container_new_child (BSE_CONTAINER (self), BSE_TYPE_BUS, NULL);
      bse_item_push_undo_proc (self, "remove-bus", child);
      bse_item_undo_close (ustack);
    }

  /* set output parameters */
  bse_value_set_object (out_values++, child);
  
  return error;
}

METHOD (BseSong, remove-bus) {
  HELP  = _("Delete a mixer bus from a Song.");
  IN    = bse_param_spec_object ("song", NULL, NULL,
				 BSE_TYPE_SONG, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_object ("bus", NULL, NULL,
				 BSE_TYPE_BUS, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseSong *self = bse_value_get_object (in_values++);
  BseItem *child = bse_value_get_object (in_values++);
  BseErrorType error = BSE_ERROR_NONE;
  
  /* check parameters */
  if (!BSE_IS_SONG (self) || !BSE_IS_BUS (child) || BSE_ITEM (child)->parent != BSE_ITEM (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  if (BSE_SOURCE_PREPARED (self))
    error = BSE_ERROR_SOURCE_BUSY;
  else
    {
      BseUndoStack *ustack = bse_item_undo_open (self, "remove-child %s", bse_object_debug_name (child));
      /* reset ::master-output property undoable */
      bse_item_set (child, "master-output", FALSE, NULL);
      /* remove and backup object references */
      bse_container_uncross_undoable (BSE_CONTAINER (self), child);     /* resets ::master-output non-undoable */
      /* how to get rid of the item once backed up */
      bse_item_push_redo_proc (self, "remove-bus", child);
      /* remove (without redo queueing) */
      bse_container_remove_backedup (BSE_CONTAINER (self), child, ustack);
      /* done */
      bse_item_undo_close (ustack);
    }

  return error;
}

static const gchar*
master_bus_name (void)
{
  /* TRANSLATORS: this is the name of the master mixer bus. i.e. the final audio output bus. */
  return _("Master");
}

static BseSource*
bse_song_ensure_master (BseSong *self)
{
  BseSource *child = (BseSource*) bse_song_find_master (self);
  if (!child)
    {
      BseUndoStack *ustack = bse_item_undo_open (self, "create-master");
      child = bse_container_new_child_bname (BSE_CONTAINER (self), BSE_TYPE_BUS, master_bus_name(), NULL);
      g_object_set (child, "master-output", TRUE, NULL); /* no undo */
      bse_item_push_undo_proc (self, "remove-bus", child);
      bse_item_undo_close (ustack);
    }
  return child;
}

METHOD (BseSong, ensure-master-bus) {
  HELP  = _("Retrieve master output bus of a song, will create one if it doesn't exist.");
  IN    = bse_param_spec_object ("song", NULL, NULL,
				 BSE_TYPE_SONG, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_object ("bus", NULL, NULL,
				 BSE_TYPE_BUS, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseSong *self = bse_value_get_object (in_values++);
  BseSource *child;

  /* check parameters */
  if (!BSE_IS_SONG (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  child = bse_song_ensure_master (self);

  /* set output parameters */
  bse_value_set_object (out_values++, child);
  
  return BSE_ERROR_NONE;
}

METHOD (BseSong, get-master-bus) {
  HELP  = _("Retrieve master output bus of a song if it exists.");
  IN    = bse_param_spec_object ("song", NULL, NULL,
				 BSE_TYPE_SONG, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_object ("bus", NULL, NULL,
				 BSE_TYPE_BUS, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseSong *self = bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_SONG (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  BseBus *bus = bse_song_find_master (self);

  /* set output parameters */
  bse_value_set_object (out_values++, bus);
  
  return BSE_ERROR_NONE;
}

static const gchar*
orphans_track_name (void)
{
  /* TRANSLATORS: this is the name of the track that is used to automatically
   * adopt orphan (unlinked) parts.
   */
  return _("Orphan Parts");
}

static BseTrack*
bse_song_ensure_orphans_track_noundo (BseSong *self)
{
  SfiRing *ring;
  for (ring = self->tracks_SL; ring; ring = sfi_ring_walk (ring, self->tracks_SL))
    {
      BseTrack *track = ring->data;
      gboolean muted = FALSE;
      g_object_get (track, "muted", &muted, NULL);
      if (muted && g_object_get_data (track, "BseSong-orphan-track") == bse_song_ensure_orphans_track_noundo) /* detect orphan-parts track */
        return track;
    }
  gpointer child = bse_container_new_child_bname (BSE_CONTAINER (self), BSE_TYPE_TRACK, orphans_track_name(), NULL);
  g_object_set (child, "muted", TRUE, NULL); /* no undo */
  g_object_set_data (child, "BseSong-orphan-track", bse_song_ensure_orphans_track_noundo); /* mark orphan-parts track */
  return child;
}

static BseTrack*
bse_song_find_first_track (BseSong *self,
                           BsePart *part)
{
  SfiRing *ring;
  /* action */
  for (ring = self->tracks_SL; ring; ring = sfi_ring_walk (ring, self->tracks_SL))
    {
      BseTrack *track = ring->data;
      guint start;
      if (bse_track_find_part (track, part, &start))
        return track;
    }
  return NULL;
}

METHOD (BseSong, ensure-track-links) {
  HELP  = _("Ensure that each part in a song is inserted into at least one track.");
  IN    = bse_param_spec_object ("song", NULL, NULL,
				 BSE_TYPE_SONG, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseSong *self = bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_SONG (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  gboolean clear_undo = FALSE;
  SfiRing *ring;
  for (ring = self->parts; ring; ring = sfi_ring_walk (ring, self->parts))
    if (!bse_song_find_first_track (self, ring->data))
      {
        BseTrack *track = bse_song_ensure_orphans_track_noundo (self);
        bse_item_exec_void (track, "insert-part", bse_track_get_last_tick (track), ring->data);
        clear_undo = TRUE;
      }
  if (clear_undo)
    {
      BseProject *project = bse_item_get_project (BSE_ITEM (self));
      if (project)
        bse_project_clear_undo (project);
    }
  
  return BSE_ERROR_NONE;
}

METHOD (BseSong, ensure-output-busses) {
  HELP  = _("Connect all unconnected track of a song to the master output bus.");
  IN    = bse_param_spec_object ("song", NULL, NULL,
				 BSE_TYPE_SONG, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseSong *self = bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_SONG (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* collect all bus inputs */
  SfiRing *node, *tracks, *inputs = NULL;
  for (node = self->busses; node; node = sfi_ring_walk (node, self->busses))
    inputs = sfi_ring_concat (inputs, bse_bus_list_inputs (node->data));
  /* find tracks that are not in input list */
  tracks = sfi_ring_copy (self->tracks_SL);
  inputs = sfi_ring_sort (inputs, sfi_pointer_cmp, NULL);
  tracks = sfi_ring_sort (tracks, sfi_pointer_cmp, NULL);
  node = sfi_ring_difference (tracks, inputs, sfi_pointer_cmp, NULL);
  sfi_ring_free (inputs);
  sfi_ring_free (tracks);
  tracks = node;
  /* connect remaining tracks */
  gboolean clear_undo = FALSE;
  BseSource *master = bse_song_ensure_master (self);
  for (node = master ? tracks : NULL; node; node = sfi_ring_walk (node, tracks))
    {
      BseErrorType error = bse_bus_connect (BSE_BUS (master), node->data);
      if (error)
        sfi_warning ("Failed to connect track %s: %s", bse_object_debug_name (node->data), bse_error_blurb (error));
      clear_undo = TRUE;
    }
  sfi_ring_free (tracks);
  if (clear_undo)
    {
      BseProject *project = bse_item_get_project (BSE_ITEM (self));
      if (project)
        bse_project_clear_undo (project);
    }

  return BSE_ERROR_NONE;
}

METHOD (BseSong, create-part) {
  HELP  = _("Create a new Part in a Song.");
  IN    = bse_param_spec_object ("song", NULL, NULL,
				 BSE_TYPE_SONG, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_object ("part", NULL, NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseSong *self = bse_value_get_object (in_values++);
  BseUndoStack *ustack;
  BseItem *child;

  /* check parameters */
  if (!BSE_IS_SONG (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  ustack = bse_item_undo_open (self, "create-part");
  child = bse_container_new_child (BSE_CONTAINER (self), BSE_TYPE_PART, NULL);
  bse_item_push_undo_proc (self, "remove-part", child);
  bse_item_undo_close (ustack);
  
  /* set output parameters */
  bse_value_set_object (out_values++, child);
  
  return BSE_ERROR_NONE;
}

METHOD (BseSong, remove-part) {
  HELP  = _("Delete a Part from a Song.");
  IN    = bse_param_spec_object ("song", "Song", NULL,
				 BSE_TYPE_SONG, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseSong *self = bse_value_get_object (in_values++);
  BseItem *child = bse_value_get_object (in_values++);
  BseErrorType error = BSE_ERROR_NONE;
  
  /* check parameters */
  if (!BSE_IS_SONG (self) || !BSE_IS_PART (child) || BSE_ITEM (child)->parent != BSE_ITEM (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  if (BSE_SOURCE_PREPARED (self))
    error = BSE_ERROR_SOURCE_BUSY;
  else
    {
      BseUndoStack *ustack = bse_item_undo_open (self, "remove-child %s", bse_object_debug_name (child));
      /* remove and backup object references */
      bse_container_uncross_undoable (BSE_CONTAINER (self), child);
      /* how to get rid of the item once backed up */
      bse_item_push_redo_proc (self, "remove-part", child);
      /* remove (without redo queueing) */
      bse_container_remove_backedup (BSE_CONTAINER (self), child, ustack);
      /* done */
      bse_item_undo_close (ustack);
    }

  return error;
}

METHOD (BseSong, create-track) {
  HELP  = _("Create a new Track for a Song.");
  IN    = bse_param_spec_object ("song", "Song", NULL,
				 BSE_TYPE_SONG, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_object ("track", "Track", NULL,
				 BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseSong *self = bse_value_get_object (in_values++);
  BseErrorType error = BSE_ERROR_NONE;
  BseItem *child = NULL;

  /* check parameters */
  if (!BSE_IS_SONG (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  if (BSE_SOURCE_PREPARED (self))
    error = BSE_ERROR_SOURCE_BUSY;
  else
    {
      BseUndoStack *ustack = bse_item_undo_open (self, "create-track");
      child = bse_container_new_child (BSE_CONTAINER (self), BSE_TYPE_TRACK, NULL);
      bse_item_push_undo_proc (self, "remove-track", child);
      bse_item_undo_close (ustack);
    }

  /* set output parameters */
  bse_value_set_object (out_values++, child);
  
  return error;
}

METHOD (BseSong, remove-track) {
  HELP  = _("Delete a Track from a Song.");
  IN    = bse_param_spec_object ("song", "Song", NULL,
				 BSE_TYPE_SONG, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_object ("track", "Track", NULL,
				 BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseSong *self  = bse_value_get_object (in_values++);
  BseItem *child = bse_value_get_object (in_values++);
  BseErrorType error = BSE_ERROR_NONE;
  
  /* check parameters */
  if (!BSE_IS_SONG (self) || !BSE_IS_TRACK (child) ||
      BSE_ITEM (child)->parent != BSE_ITEM (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  if (BSE_SOURCE_PREPARED (self))
    error = BSE_ERROR_SOURCE_BUSY;
  else
    {
      BseUndoStack *ustack = bse_item_undo_open (self, "remove-child %s", bse_object_debug_name (child));
      /* remove object references */
      bse_container_uncross_undoable (BSE_CONTAINER (self), child);
      /* how to get rid of the item once backed up */
      bse_item_push_redo_proc (self, "remove-track", child);
      /* remove (without redo queueing) */
      bse_container_remove_backedup (BSE_CONTAINER (self), child, ustack);
      /* done */
      bse_item_undo_close (ustack);
    }

  return error;
}

METHOD (BseSong, find-track-for-part) {
  HELP  = _("Find a track suitable for playing notes of a given part.");
  IN    = bse_param_spec_object ("song", "Song", NULL,
				 BSE_TYPE_SONG, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_object ("track", "Track", NULL,
				 BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseSong *self = bse_value_get_object (in_values++);
  BsePart *part = bse_value_get_object (in_values++);
  BseTrack *track = NULL;
  guint tick = 0;
  SfiRing *ring;

  /* check parameters */
  if (!BSE_IS_SONG (self) || !BSE_IS_PART (part) ||
      BSE_ITEM (part)->parent != BSE_ITEM (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  for (ring = self->tracks_SL; ring; ring = sfi_ring_walk (ring, self->tracks_SL))
    {
      BseTrack *test_track = ring->data;
      guint start;
      if (bse_track_find_part (test_track, part, &start) &&
	  (!track || start < tick))
	{
	  track = test_track;
	  tick = start;
	}
    }

  /* set output parameters */
  bse_value_set_object (out_values++, track);
  
  return BSE_ERROR_NONE;
}

METHOD (BseSong, find-any-track-for-part) {
  HELP  = _("Find the first track that contains part, suitable to check for orphan parts.");
  IN    = bse_param_spec_object ("song", "Song", NULL,
				 BSE_TYPE_SONG, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_object ("track", "Track", NULL,
				 BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseSong *self = bse_value_get_object (in_values++);
  BsePart *part = bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_SONG (self) || !BSE_IS_PART (part) ||
      BSE_ITEM (part)->parent != BSE_ITEM (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* set output parameters */
  bse_value_set_object (out_values++, bse_song_find_first_track (self, part));
  
  return BSE_ERROR_NONE;
}

METHOD (BseSong, synthesize-note) {
  HELP  = _("Synthesize a note on a song of an active project.");
  IN    = bse_param_spec_object ("song", "Song", NULL,
				 BSE_TYPE_SONG, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_object ("track", "Track", NULL,
				 BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 1, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  IN    = bse_pspec_note_simple ("note", "Note", NULL,
				 SFI_PARAM_STANDARD);
  IN    = bse_param_spec_fine_tune ("fine_tune", "Fine Tune", "Fine tune in cents per semitone");
  IN    = sfi_pspec_real ("velocity", "Velocity", NULL,
			  1.0, 0, 1.0, 0.01,
			  SFI_PARAM_STANDARD ":scale");
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseSong *self      = bse_value_get_object (in_values++);
  BseTrack *track    = bse_value_get_object (in_values++);
  guint    duration  = sfi_value_get_int (in_values++);
  gint     note      = sfi_value_get_note (in_values++);
  gint     fine_tune = sfi_value_get_int (in_values++);
  gfloat   velocity  = sfi_value_get_real (in_values++);
  
  /* check parameters */
  if (!BSE_IS_SONG (self) || !BSE_IS_TRACK (track) ||
      BSE_ITEM (track)->parent != BSE_ITEM (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  if (BSE_SOURCE_PREPARED (self) && self->midi_receiver_SL)
    {
      gfloat freq = BSE_KAMMER_FREQUENCY_f *
		    BSE_SEMITONE_FACTOR (note) *
		    BSE_FINE_TUNE_FACTOR (fine_tune);
      SfiTime tstamp = gsl_tick_stamp () + bse_engine_block_size () * 2;
      BseMidiEvent *eon, *eoff;
      eon  = bse_midi_event_note_on (track->midi_channel_SL, tstamp, freq, velocity);
      eoff = bse_midi_event_note_off (track->midi_channel_SL, tstamp + duration, freq);
      bse_midi_receiver_push_event (self->midi_receiver_SL, eon);
      bse_midi_receiver_push_event (self->midi_receiver_SL, eoff);
      bse_midi_receiver_process_events (self->midi_receiver_SL, tstamp + duration);
      bse_project_keep_activated (BSE_PROJECT (BSE_ITEM (self)->parent), tstamp + duration);
    }
  
  return BSE_ERROR_NONE;
}

METHOD (BseSong, get-timing) {
  HELP  = _("Retrieve song timing information at a specific tick.");
  IN    = bse_param_spec_object ("song", "Song", NULL, BSE_TYPE_SONG, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("tick", "Tick", "Tick to retrieve timing info about", 0, 0, G_MAXINT, 384, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("timing", "Timing", "Song Timing", BSE_TYPE_SONG_TIMING, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseSong *self = bse_value_get_object (in_values++);
  SfiInt   tick = sfi_value_get_int (in_values++);
  BseSongTiming timing = { 0, };

  /* check parameters */
  if (!BSE_IS_SONG (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_song_get_timing (self, tick, &timing);

  /* set output parameters */
  bse_value_set_boxed (out_values++, &timing);
  
  return BSE_ERROR_NONE;
}
