// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
#include <bse/bseplugin.hh>
#include <bse/bseprocedure.hh>
#include <bse/bsetrack.hh>
#include <bse/bsepart.hh>
#include <bse/bsesong.hh>
#include <bse/bsebus.hh>
#include <bse/bseundostack.hh>
#include "bsecxxplugin.hh"


AUTHORS	= "Tim Janik <timj@gtk.org>";
LICENSE = "Copyright (C) 2003 Tim Janik";


METHOD (BseTrack, remove-link) {
  HELP  = "Remove a specific part link by ID from a track.";
  IN    = bse_param_spec_object ("track", "Track", NULL,
				 BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("id", "Link ID", NULL,
			 0, 0, SFI_MAXINT, 384, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseTrack *self = (BseTrack*) bse_value_get_object (in_values++);
  guint     id   = sfi_value_get_int (in_values++);
  BseTrackEntry *entry;

  /* check parameters */
  if (!BSE_IS_TRACK (self))
    return Bse::ERROR_PROC_PARAM_INVAL;
  entry = bse_track_find_link (self, id);
  if (!entry)
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_item_push_undo_proc (self, "insert-part", entry->tick, entry->part);
  bse_track_remove_tick (self, entry->tick);

  return Bse::ERROR_NONE;
}

METHOD (BseTrack, list-parts) {
  HELP  = "List parts scheduled in a track, sorted by tick.";
  IN    = bse_param_spec_object ("track", "Track", NULL,
				 BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("part_list", "Part List", NULL,
				BSE_TYPE_TRACK_PART_SEQ, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseTrack *self = (BseTrack*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_TRACK (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_value_take_boxed (out_values++, bse_track_list_parts (self));

  return Bse::ERROR_NONE;
}

METHOD (BseTrack, list-parts-uniq) {
  HELP  = "List all parts contained in a track.";
  IN    = bse_param_spec_object ("track", "Track", NULL,
				 BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("part_list", "Part List", NULL,
				BSE_TYPE_ITEM_SEQ, SFI_PARAM_STANDARD); // FIXME: should use BsePartSeq here
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseTrack *self = (BseTrack*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_TRACK (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  BseTrackPartSeq *tpseq = bse_track_list_parts (self);
  SfiRing *ring = NULL;
  guint i;
  for (i = 0; i < tpseq->n_tparts; i++)
    ring = sfi_ring_append (ring, tpseq->tparts[i]->part);
  bse_track_part_seq_free (tpseq);
  ring = sfi_ring_sort (ring, sfi_pointer_cmp, NULL);
  ring = sfi_ring_uniq (ring, sfi_pointer_cmp, NULL);
  bse_value_take_boxed (out_values++, bse_item_seq_from_ring (ring));
  sfi_ring_free (ring);

  return Bse::ERROR_NONE;
}

METHOD (BseTrack, get-timing) {
  HELP  = "Retrieve song timing information at a specific tick.";
  IN    = bse_param_spec_object ("track", "Track", NULL, BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("tick", "Tick", "Tick to retrieve timing info about", 0, 0, G_MAXINT, 384, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("timing", "Timing", "Song Timing", BSE_TYPE_SONG_TIMING, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseTrack *self = (BseTrack*) bse_value_get_object (in_values++);
  SfiInt    tick = sfi_value_get_int (in_values++);
  BseItem  *parent;
  BseSongTiming timing = { 0, };

  /* check parameters */
  if (!BSE_IS_TRACK (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  parent = BSE_ITEM (self)->parent;
  if (BSE_IS_SONG (parent))
    bse_song_get_timing (BSE_SONG (parent), tick, &timing);
  else
    bse_song_timing_get_default (&timing);

  /* set output parameters */
  bse_value_set_boxed (out_values++, &timing);

  return Bse::ERROR_NONE;
}
