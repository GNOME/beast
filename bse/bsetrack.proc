/* BSE - Bedevilled Sound Engine	-*-mode: c;-*-
 * Copyright (C) 2003-2004 Tim Janik
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 */
#include <bse/bseplugin.h>
#include <bse/bseprocedure.h>
#include <bse/bsetrack.h>
#include <bse/bsepart.h>
#include <bse/bsesong.h>
#include <bse/bseundostack.h>


AUTHORS	= "Tim Janik <timj@gtk.org>";
LICENSE = "Copyright (C) 2003 Tim Janik";


METHOD (BseTrack, insert-part) {
  HELP  = "Insert a part into a track and retrieve the corresponding link id.";
  IN    = bse_param_spec_object ("track", "Track", NULL,
				 BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("tick", "Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_int ("id", "Link ID", NULL,
                         0, 0, SFI_MAXINT, 1, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseTrack *self = bse_value_get_object (in_values++);
  guint     tick = sfi_value_get_int (in_values++);
  BsePart  *part = bse_value_get_object (in_values++);
  guint id;

  /* check parameters */
  if (!BSE_IS_TRACK (self) || !BSE_IS_PART (part) ||
      !BSE_ITEM (self)->parent ||
      BSE_ITEM (self)->parent != BSE_ITEM (part)->parent)
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  id = bse_track_insert_part (self, tick, part);
  if (id)
    {
      /* can't use remove-link() here, since id will have changed after undo */
      bse_item_push_undo_proc (self, "remove-tick", tick);
    }

  /* set output parameters */
  g_value_set_int (out_values++, id);

  return BSE_ERROR_NONE;
}

METHOD (BseTrack, remove-tick) {
  HELP  = "Remove a part at specified tick from a track.";
  IN    = bse_param_spec_object ("track", "Track", NULL,
				 BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("tick", "Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseTrack *self = bse_value_get_object (in_values++);
  guint     tick = sfi_value_get_int (in_values++);
  BseTrackEntry *entry;

  /* check parameters */
  if (!BSE_IS_TRACK (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  entry = bse_track_lookup_tick (self, tick);
  if (entry)
    {
      bse_item_push_undo_proc (self, "insert-part", entry->tick, entry->part);
      bse_track_remove_tick (self, tick);
    }

  return BSE_ERROR_NONE;
}

METHOD (BseTrack, remove-link) {
  HELP  = "Remove a specific part link by ID from a track.";
  IN    = bse_param_spec_object ("track", "Track", NULL,
				 BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("id", "Link ID", NULL,
			 0, 0, SFI_MAXINT, 384, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseTrack *self = bse_value_get_object (in_values++);
  guint     id   = sfi_value_get_int (in_values++);
  BseTrackEntry *entry;

  /* check parameters */
  if (!BSE_IS_TRACK (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  entry = bse_track_find_link (self, id);
  if (!entry)
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_item_push_undo_proc (self, "insert-part", entry->tick, entry->part);
  bse_track_remove_tick (self, entry->tick);
  
  return BSE_ERROR_NONE;
}

METHOD (BseTrack, list-parts) {
  HELP  = "List parts scheduled in a track, sorted by tick.";
  IN    = bse_param_spec_object ("track", "Track", NULL,
				 BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("part_list", "Part List", NULL,
				BSE_TYPE_TRACK_PART_SEQ, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseTrack *self = bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_TRACK (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_value_take_boxed (out_values++, bse_track_list_parts (self));

  return BSE_ERROR_NONE;
}

METHOD (BseTrack, get-part) {
  HELP  = "Get the part starting at a specific tick position.";
  IN    = bse_param_spec_object ("track", "Track", NULL,
				 BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("tick", "Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseTrack *self = bse_value_get_object (in_values++);
  guint     tick = sfi_value_get_int (in_values++);
  BseTrackEntry *entry;
  
  /* check parameters */
  if (!BSE_IS_TRACK (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  entry = bse_track_lookup_tick (self, tick);
  bse_value_set_object (out_values++, entry ? entry->part : NULL);

  return BSE_ERROR_NONE;
}

METHOD (BseTrack, get-timing) {
  HELP  = "Retrieve song timing information at a specific tick.";
  IN    = bse_param_spec_object ("track", "Track", NULL, BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("tick", "Tick", "Tick to retrieve timing info about", 0, 0, G_MAXINT, 384, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("timing", "Timing", "Song Timing", BSE_TYPE_SONG_TIMING, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseTrack *self = bse_value_get_object (in_values++);
  SfiInt    tick = sfi_value_get_int (in_values++);
  BseItem  *parent;
  BseSongTiming timing = { 0, };

  /* check parameters */
  if (!BSE_IS_TRACK (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  parent = BSE_ITEM (self)->parent;
  if (BSE_IS_SONG (parent))
    bse_song_get_timing (BSE_SONG (parent), tick, &timing);
  else
    bse_song_timing_get_default (&timing);

  /* set output parameters */
  bse_value_set_boxed (out_values++, &timing);

  return BSE_ERROR_NONE;
}

METHOD (BseTrack, get-output-source) {
  HELP  = _("Get the output module for this track. The output of this module is the merged result from "
            "all polyphonic voices and has all track specific alterations applied.");
  IN    = bse_param_spec_object ("track", NULL, NULL,
                                 BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_object ("source", NULL, NULL,
                                 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseTrack *track = bse_value_get_object (in_values++);
  BseSource *child = NULL;

  /* check parameters */
  if (!BSE_IS_TRACK (track))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  child = bse_track_get_output (track);

  /* set output parameters */
  bse_value_set_object (out_values++, child);

  return BSE_ERROR_NONE;
}

METHOD (BseTrack, get-last-tick) {
  HELP  = "Retrieve the last tick for this track.";
  IN    = bse_param_spec_object ("track", "Track", NULL,
                                 BSE_TYPE_TRACK, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_int ("last_tick", "Last Tick", NULL,
                         0, 0, G_MAXINT, 384, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseTrack *self = bse_value_get_object (in_values++);
  int last_tick = 0;

  /* check parameters */
  if (!BSE_IS_TRACK (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* find last part */
  BsePart *part = NULL;
  guint i, offset = 0;
  for (i = 0; i < self->n_entries_SL; i++)
    if (self->entries_SL[i].part)
      {
        part = self->entries_SL[i].part;
        offset = self->entries_SL[i].tick;
      }
  if (part)
    {
      BseItem *item = BSE_ITEM (self);
      BseSongTiming timing;
      g_object_get (part, "last-tick", &last_tick, NULL);
      if (BSE_IS_SONG (item->parent))
        bse_song_get_timing (BSE_SONG (item->parent), offset, &timing);
      else
        bse_song_timing_get_default (&timing);
      last_tick = MAX (last_tick, timing.tpt);  /* MAX duration with tact size, see bse_track_list_parts() */
      last_tick += offset;
    }
  else
    last_tick += 1;     /* always return one after */
  
  /* set output parameters */
  sfi_value_set_int (out_values++, last_tick);

  return BSE_ERROR_NONE;
}
