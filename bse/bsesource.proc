// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
#include <bse/bseplugin.hh>
#include <bse/bseprocedure.hh>
#include <bse/bsesource.hh>
#include <bse/bseundostack.hh>
#include <bse/bseieee754.hh>
#include <bse/bsemidievent.hh>
#include "bsecxxplugin.hh"
#include "bsebuiltin_externs.cc"


AUTHORS	= "Tim Janik <timj@gtk.org>";
LICENSE = "GNU Lesser General Public License";

METHOD (BseSource, set-input-by-id) {
  HELP	= "Connect a module input to another module's output.";
  IN	= bse_param_spec_object ("imodule", "Input Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("input-channel", "Input Channel", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  IN	= bse_param_spec_object ("omodule", "Output Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("output-channel", "Output Channel", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", "Error", NULL,
				BSE_TYPE_ERROR_TYPE, Bse::Error::NONE,
				SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *isource = (BseSource*) bse_value_get_object (in_values++);
  guint ichannel     = sfi_value_get_int (in_values++);
  BseSource *osource = (BseSource*) bse_value_get_object (in_values++);
  guint ochannel     = sfi_value_get_int (in_values++);
  Bse::Error error;

  /* check parameters */
  if (!BSE_IS_SOURCE (isource) || !BSE_IS_SOURCE (osource) ||
      BSE_ITEM (isource)->parent != BSE_ITEM (osource)->parent)
    return Bse::Error::PROC_PARAM_INVAL;

  /* connect */
  error = bse_source_set_input (isource, ichannel, osource, ochannel);
  if (error == Bse::Error::NONE)
    bse_item_push_undo_proc (isource, "unset-input-by-id", ichannel, osource, ochannel);

  /* set output parameters */
  g_value_set_enum (out_values++, int (error));

  return Bse::Error::NONE;
}

METHOD (BseSource, set-input) {
  HELP	= "Connect a module input to another module's output.";
  IN	= bse_param_spec_object ("imodule", "Input Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_string ("input-channel", "Input Channel", NULL,
			    NULL, SFI_PARAM_STANDARD);
  IN	= bse_param_spec_object ("omodule", "Output Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_string ("output-channel", "Output Channel", NULL,
			    NULL, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", "Error", NULL,
				BSE_TYPE_ERROR_TYPE, Bse::Error::NONE,
				SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *isource = (BseSource*) bse_value_get_object (in_values++);
  const char *ichannel_ident = sfi_value_get_string (in_values++);
  BseSource *osource = (BseSource*) bse_value_get_object (in_values++);
  const char *ochannel_ident = sfi_value_get_string (in_values++);
  guint ichannel, ochannel;
  Bse::Error error;

  /* check parameters */
  if (!BSE_IS_SOURCE (isource) || !BSE_IS_SOURCE (osource) ||
      BSE_ITEM (isource)->parent != BSE_ITEM (osource)->parent ||
      !ichannel_ident || !ochannel_ident)
    return Bse::Error::PROC_PARAM_INVAL;

  /* connect */
  ichannel = bse_source_find_ichannel (isource, ichannel_ident);
  ochannel = bse_source_find_ochannel (osource, ochannel_ident);
  error = bse_source_set_input (isource, ichannel, osource, ochannel);
  if (error == Bse::Error::NONE)
    bse_item_push_undo_proc (isource, "unset-input-by-id", ichannel, osource, ochannel);

  /* set output parameters */
  g_value_set_enum (out_values++, int (error));

  return Bse::Error::NONE;
}

METHOD (BseSource, unset-input-by-id) {
  HELP	= "Disconnect a module input.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("input-channel", "Input Channel", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  IN	= bse_param_spec_object ("omodule", "Output Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("output-channel", "Output Channel", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", "Error", NULL,
				BSE_TYPE_ERROR_TYPE, Bse::Error::NONE,
				SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *isource = (BseSource*) bse_value_get_object (in_values++);
  guint ichannel     = sfi_value_get_int (in_values++);
  BseSource *osource = (BseSource*) bse_value_get_object (in_values++);
  guint ochannel     = sfi_value_get_int (in_values++);
  Bse::Error error = Bse::Error::NONE;

  /* check parameters */
  if (!BSE_IS_SOURCE (isource) || !BSE_IS_SOURCE (osource))
    return Bse::Error::PROC_PARAM_INVAL;

  /* disconnect */
  error = bse_source_check_input (isource, ichannel, osource, ochannel);
  if (error == Bse::Error::NONE)
    {
      BseUndoStack *ustack = bse_item_undo_open (isource, "unset-input-by-id");
      bse_source_input_backup_to_undo (isource, ichannel, osource, ochannel);
      bse_item_push_redo_proc (isource, "unset-input-by-id", ichannel, osource, ochannel);
      bse_item_undo_close (ustack);
      error = bse_source_unset_input (isource, ichannel, osource, ochannel);
    }

  /* set output parameters */
  g_value_set_enum (out_values++, int (error));

  return Bse::Error::NONE;
}

METHOD (BseSource, unset-input) {
  HELP	= "Disconnect a module input.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("input-channel", "Input Channel", NULL,
			    NULL, SFI_PARAM_STANDARD);
  IN	= bse_param_spec_object ("omodule", "Output Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("output-channel", "Output Channel", NULL,
			    NULL, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", "Error", NULL,
				BSE_TYPE_ERROR_TYPE, Bse::Error::NONE,
				SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *isource = (BseSource*) bse_value_get_object (in_values++);
  const char *ichannel_ident = sfi_value_get_string (in_values++);
  BseSource *osource = (BseSource*) bse_value_get_object (in_values++);
  const char *ochannel_ident = sfi_value_get_string (in_values++);
  guint ichannel, ochannel;
  Bse::Error error = Bse::Error::NONE;

  /* check parameters */
  if (!BSE_IS_SOURCE (isource) || !BSE_IS_SOURCE (osource) ||
      !ichannel_ident || !ochannel_ident)
    return Bse::Error::PROC_PARAM_INVAL;

  /* disconnect */
  ichannel = bse_source_find_ichannel (isource, ichannel_ident);
  ochannel = bse_source_find_ochannel (osource, ochannel_ident);
  error = bse_source_check_input (isource, ichannel, osource, ochannel);
  if (error == Bse::Error::NONE)
    {
      BseUndoStack *ustack = bse_item_undo_open (isource, "unset-input-by-id");
      bse_source_input_backup_to_undo (isource, ichannel, osource, ochannel);
      bse_item_push_redo_proc (isource, "unset-input-by-id", ichannel, osource, ochannel);
      bse_item_undo_close (ustack);
      error = bse_source_unset_input (isource, ichannel, osource, ochannel);
    }

  /* set output parameters */
  g_value_set_enum (out_values++, int (error));

  return Bse::Error::NONE;
}

METHOD (BseSource, clear-inputs) {
  HELP	= "Disconnect all module inputs.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *isource = (BseSource*) bse_value_get_object (in_values++);
  BseUndoStack *ustack;

  /* check parameters */
  if (!BSE_IS_SOURCE (isource))
    return Bse::Error::PROC_PARAM_INVAL;

  /* disconnect */
  ustack = bse_item_undo_open (isource, "clear-inputs %s", bse_object_debug_name (isource));
  bse_source_backup_ichannels_to_undo (isource);
  bse_item_push_redo_proc (isource, "clear-inputs");
  bse_item_undo_close (ustack);
  bse_source_clear_ichannels (isource);

  return Bse::Error::NONE;
}

METHOD (BseSource, clear-outputs) {
  HELP	= "Disconnect all module outputs.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *isource = (BseSource*) bse_value_get_object (in_values++);
  BseUndoStack *ustack;

  /* check parameters */
  if (!BSE_IS_SOURCE (isource))
    return Bse::Error::PROC_PARAM_INVAL;

  /* disconnect */
  ustack = bse_item_undo_open (isource, "clear-outputs %s", bse_object_debug_name (isource));
  bse_source_backup_ochannels_to_undo (isource);
  bse_item_push_redo_proc (isource, "clear-outputs");
  bse_item_undo_close (ustack);
  bse_source_clear_ochannels (isource);

  return Bse::Error::NONE;
}

METHOD (BseSource, has-output) {
  HELP	= "Check whether a module's output channel is connected.";
  IN	= bse_param_spec_object ("module", NULL, NULL, BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("ochannel", NULL, NULL, 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_bool ("has_outputs", NULL, NULL, FALSE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);
  guint ochannel    = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_SOURCE (source))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_bool (out_values++, bse_source_has_output (source, ochannel));

  return Bse::Error::NONE;
}

METHOD (BseSource, has-outputs) {
  HELP	= "Check whether a module has output channel connections.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_bool ("has_outputs", "Has Outputs", NULL,
			  FALSE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_SOURCE (source))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_bool (out_values++, source->outputs != NULL);

  return Bse::Error::NONE;
}

METHOD (BseSource, n-ichannels) {
  HELP	= "Get the number of input channels of a module.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_int ("n_channels", "Number of Channels", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_SOURCE (source))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_int (out_values++, BSE_SOURCE_N_ICHANNELS (source));

  return Bse::Error::NONE;
}

METHOD (BseSource, ichannel-label) {
  HELP	= "Get input channel name.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("input-channel", "Input Channel", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_string ("channel_label", "Channel Name", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);
  guint ichannel    = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_SOURCE (source) || ichannel >= BSE_SOURCE_N_ICHANNELS (source))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_string (out_values++, BSE_SOURCE_ICHANNEL_LABEL (source, ichannel));

  return Bse::Error::NONE;
}

METHOD (BseSource, ichannel-ident) {
  HELP	= "Get canonical input channel name.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("input-channel", "Input Channel", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_string ("channel_ident", "Channel Name", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);
  guint ichannel    = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_SOURCE (source) || ichannel >= BSE_SOURCE_N_ICHANNELS (source))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_string (out_values++, BSE_SOURCE_ICHANNEL_IDENT (source, ichannel));

  return Bse::Error::NONE;
}

METHOD (BseSource, ichannel-blurb) {
  HELP	= "Get input channel description.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("input-channel", "Input Channel", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_string ("channel_blurb", "Channel Blurb", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);
  guint ichannel    = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_SOURCE (source) || ichannel >= BSE_SOURCE_N_ICHANNELS (source))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_string (out_values++, BSE_SOURCE_ICHANNEL_BLURB (source, ichannel));

  return Bse::Error::NONE;
}

METHOD (BseSource, is-joint-ichannel-by-id) {
  HELP	= "Check if an input channel is a joint (multi-connect) channel.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("input-channel", "Input Channel", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_bool ("is_jchannel", "Is Joint Channel", NULL,
			  FALSE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);
  guint ichannel    = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_SOURCE (source) || ichannel >= BSE_SOURCE_N_ICHANNELS (source))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_bool (out_values++, BSE_SOURCE_IS_JOINT_ICHANNEL (source, ichannel));

  return Bse::Error::NONE;
}

METHOD (BseSource, is-joint-ichannel) {
  HELP	= "Check if an input channel is a joint (multi-connect) channel.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("input-channel", "Input Channel", NULL,
			    NULL, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_bool ("is_jchannel", "Is Joint Channel", NULL,
			  FALSE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);
  const char *ichannel   = sfi_value_get_string (in_values++);
  guint id;

  /* check parameters */
  if (!BSE_IS_SOURCE (source) || !ichannel)
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  id = bse_source_find_ichannel (source, ichannel);
  sfi_value_set_bool (out_values++,
		      id < BSE_SOURCE_N_ICHANNELS (source) ? BSE_SOURCE_IS_JOINT_ICHANNEL (source, id) : FALSE);

  return Bse::Error::NONE;
}

METHOD (BseSource, ichannel-get-n-joints) {
  HELP	= "Retrieve the number of inputs connected to an input channel.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("input-channel", "Input Channel", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_int ("n_joints", "Number of Connections", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);
  guint ichannel    = sfi_value_get_int (in_values++);
  BseSourceInput *input;

  /* check parameters */
  if (!BSE_IS_SOURCE (source) || ichannel >= BSE_SOURCE_N_ICHANNELS (source))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  input = BSE_SOURCE_INPUT (source, ichannel);
  if (BSE_SOURCE_IS_JOINT_ICHANNEL (source, ichannel))
    sfi_value_set_int (out_values++, input->jdata.n_joints);
  else
    sfi_value_set_int (out_values++, input->idata.osource ? 1 : 0);

  return Bse::Error::NONE;
}

METHOD (BseSource, ichannel-get-ochannel) {
  HELP	= "Retrieve output channel of the module connected to a specific joint of an input channel.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("input-channel", "Input Channel", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("input-joint", "Input Joint", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_int ("ochannel", "Output Channel", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);
  guint ichannel    = sfi_value_get_int (in_values++);
  guint joint       = sfi_value_get_int (in_values++);
  BseSourceInput *input;

  /* check parameters */
  if (!BSE_IS_SOURCE (source) || ichannel >= BSE_SOURCE_N_ICHANNELS (source))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  input = BSE_SOURCE_INPUT (source, ichannel);
  if (BSE_SOURCE_IS_JOINT_ICHANNEL (source, ichannel) && joint < input->jdata.n_joints)
    sfi_value_set_int (out_values++, input->jdata.joints[joint].ochannel);
  else if (joint < 1)
    sfi_value_set_int (out_values++, input->idata.ochannel);
  else
    sfi_value_set_int (out_values++, G_MAXINT);

  return Bse::Error::NONE;
}

METHOD (BseSource, n-ochannels) {
  HELP	= "Get the number of output channels of a module.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_int ("n_channels", "Number of Channels", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_SOURCE (source))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_int (out_values++, BSE_SOURCE_N_OCHANNELS (source));

  return Bse::Error::NONE;
}

METHOD (BseSource, ochannel-label) {
  HELP	= "Get output channel name.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("output-channel", "Input Channel", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_string ("channel_label", "Channel Name", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);
  guint ochannel    = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_SOURCE (source) || ochannel >= BSE_SOURCE_N_OCHANNELS (source))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_string (out_values++, BSE_SOURCE_OCHANNEL_LABEL (source, ochannel));

  return Bse::Error::NONE;
}

METHOD (BseSource, ochannel-ident) {
  HELP	= "Get canonical output channel name.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("output-channel", "Input Channel", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_string ("channel_ident", "Channel Name", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);
  guint ochannel    = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_SOURCE (source) || ochannel >= BSE_SOURCE_N_OCHANNELS (source))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_string (out_values++, BSE_SOURCE_OCHANNEL_IDENT (source, ochannel));

  return Bse::Error::NONE;
}

METHOD (BseSource, ochannel-blurb) {
  HELP	= "Get output channel description.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("output-channel", "Input Channel", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_string ("channel_blurb", "Channel Blurb", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);
  guint ochannel    = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_SOURCE (source) || ochannel >= BSE_SOURCE_N_OCHANNELS (source))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_string (out_values++, BSE_SOURCE_OCHANNEL_BLURB (source, ochannel));

  return Bse::Error::NONE;
}

METHOD (BseSource, set-pos) {
  HELP	= "Set the x and y position of a module. In contrast to setting the position "
          "through ordinary object property setters, this function will not update "
          "the module position if the passed in arguments are sufficiently equal to "
          "the values already set on the object. As such, it does not record an extra "
          "undo step for setting properties to values they already have and if necessary "
          "turns setting of x and y positions into an atomic undo operation.";
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_real ("x-pos", "X Position", NULL,
                          0, -SFI_MAXREAL, SFI_MAXREAL, 1, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_real ("y-pos", "Y Position", NULL,
                          0, -SFI_MAXREAL, SFI_MAXREAL, 1, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);
  SfiReal xpos      = sfi_value_get_real (in_values++);
  SfiReal ypos      = sfi_value_get_real (in_values++);
  SfiReal epsilon = 1e-5;

  /* check parameters */
  if (!BSE_IS_SOURCE (source) || BSE_DOUBLE_IS_NANINF (xpos) || BSE_DOUBLE_IS_NANINF (ypos))
    return Bse::Error::PROC_PARAM_INVAL;

  /* action */
  if (fabs (xpos - source->pos_x) > epsilon ||
      fabs (ypos - source->pos_y) > epsilon)
    {
      BseUndoStack *ustack = bse_item_undo_open (source, "set-xy-pos");
      bse_item_set (source,
                    "pos_x", xpos,
                    "pos_y", ypos,
                    NULL);
      bse_item_undo_close (ustack);
    }

  return Bse::Error::NONE;
}

METHOD (BseSource, set-automation) {
  HELP	= "Setup automation parameters for a property.";
  IN	= bse_param_spec_object ("source", NULL, NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("property_name", NULL, "Item property name",
                            NULL, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("midi_channel", _("MIDI Channel"), _("The MIDI Channel from which automation events should be received, 0 designates the default MIDI channel"),
                         0, 0, BSE_MIDI_MAX_CHANNELS, 1, SFI_PARAM_STANDARD ":scale:unprepared");
  IN    = bse_param_spec_genum ("control_type", _("Control Type"), _("The type of control events used for automation"),
                                BSE_TYPE_MIDI_CONTROL_TYPE, BSE_MIDI_CONTROL_CONTINUOUS_16, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", "Error", NULL, BSE_TYPE_ERROR_TYPE, Bse::Error::NONE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);
  const char *property = sfi_value_get_string (in_values++);
  guint      midi_channel = sfi_value_get_int (in_values++);
  Bse::MidiSignal control_type = (Bse::MidiSignal) g_value_get_enum (in_values++);
  Bse::Error error = Bse::Error::NONE;

  /* check parameters */
  if (!BSE_IS_SOURCE (source) || !property)
    return Bse::Error::PROC_PARAM_INVAL;

  /* connect */
  guint old_midi_channel = 0;
  Bse::MidiSignal old_control_type = Bse::MidiSignal (0);
  bse_source_get_automation_property (source, property, &old_midi_channel, &old_control_type);
  if (old_midi_channel != midi_channel || old_control_type != control_type)
    {
      error = bse_source_set_automation_property (source, property, midi_channel, control_type);
      if (error == Bse::Error::NONE)
        bse_item_push_undo_proc (source, "set-automation", property, old_midi_channel, old_control_type);
    }

  /* set output parameters */
  g_value_set_enum (out_values++, int (error));

  return Bse::Error::NONE;
}

METHOD (BseSource, get-automation-channel) {
  HELP	= "Get MIDI channel from an automation property.";
  IN	= bse_param_spec_object ("source", NULL, NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("property_name", NULL, "Item property name",
                            NULL, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_int ("midi_channel", NULL, NULL, 0, 0, BSE_MIDI_MAX_CHANNELS, 1, SFI_PARAM_STANDARD ":scale:unprepared");
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);
  const char *property = sfi_value_get_string (in_values++);

  /* check parameters */
  if (!BSE_IS_SOURCE (source) || !property)
    return Bse::Error::PROC_PARAM_INVAL;

  /* connect */
  guint midi_channel = 0;
  bse_source_get_automation_property (source, property, &midi_channel, NULL);
  /* set output parameters */
  g_value_set_int (out_values++, midi_channel);

  return Bse::Error::NONE;
}

METHOD (BseSource, get-automation-control) {
  HELP	= "Get control type from an automation property.";
  IN	= bse_param_spec_object ("source", NULL, NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("property_name", NULL, "Item property name",
                            NULL, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("control_type", NULL, NULL, BSE_TYPE_MIDI_CONTROL_TYPE, BSE_MIDI_CONTROL_CONTINUOUS_16, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);
  const char *property = sfi_value_get_string (in_values++);

  /* check parameters */
  if (!BSE_IS_SOURCE (source) || !property)
    return Bse::Error::PROC_PARAM_INVAL;

  /* connect */
  Bse::MidiSignal control_type = Bse::MidiSignal (0);
  bse_source_get_automation_property (source, property, NULL, &control_type);
  /* set output parameters */
  g_value_set_enum (out_values++, int (control_type));

  return Bse::Error::NONE;
}

METHOD (BseSource, is-prepared) {
  HELP  = "Check whether a source is prepared for synthesis processing.";
  IN	= bse_param_spec_object ("source", NULL, NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_bool ("is_prepared", NULL, NULL, FALSE, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseSource *source = (BseSource*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_SOURCE (source))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_bool (out_values++, BSE_SOURCE_PREPARED (source));

  return Bse::Error::NONE;
}
