/* BSE - Bedevilled Sound Engine        -*-mode: c;-*-
 * Copyright (C) 2000-2002 Tim Janik
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 */
#include        <bse/bseplugin.h>
#include        <bse/bseprocedure.h>
#include        <bse/bsewave.h>
#include        <bse/bseeditablesample.h>


AUTHOR  = "Tim Janik <timj@gtk.org>";
CRIGHTS = "Tim Janik";
DATE    = "2001";


METHOD (BseWave, load-wave) {
  HELP  = "Load sample chunks from a wave file";
  IN    = g_param_spec_object ("wave", "Wave", "Wave object to store loaded contents",
                               BSE_TYPE_WAVE, BSE_PARAM_DEFAULT);
  IN    = g_param_spec_string ("file_name", "File Name", "The wave file to read wave chunks from",
                               NULL, BSE_PARAM_DEFAULT);
  IN    = g_param_spec_string ("wave_name", "Wave Name", "The name of the wave to read wave chunks from",
                               NULL, BSE_PARAM_DEFAULT);
  OUT   = g_param_spec_enum ("error", "Error", "BSE error type",
                             BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE,
                             BSE_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseWave *wave           = (BseWave*) g_value_get_object (in_values++);
  gchar *file_name        = g_value_get_string (in_values++);
  gchar *wave_name        = g_value_get_string (in_values++);
  BseErrorType error = BSE_ERROR_NONE;

  /* check parameters */
  if (!BSE_IS_WAVE (wave) || !file_name || !wave_name)
    return BSE_ERROR_PROC_PARAM_INVAL;

  error = bse_wave_load_wave_file (wave, file_name, wave_name, NULL, NULL);

  /* set output parameters */
  g_value_set_enum (out_values++, error);

  return BSE_ERROR_NONE;
}

METHOD (BseWave, n-wave-chunks) {
  HELP  = "Get the number of wave chunks of a wave";
  IN    = g_param_spec_object ("wave", "Wave", NULL,
			       BSE_TYPE_WAVE, BSE_PARAM_DEFAULT);
  OUT   = g_param_spec_uint ("n_chunks", "Number of Wave Chunks", NULL,
			     0, G_MAXINT, 0, BSE_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseWave *wave = g_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_WAVE (wave))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* set output parameters */
  g_value_set_uint (out_values++, wave->n_wchunks);

  return BSE_ERROR_NONE;
}

METHOD (BseWave, use-editable) {
  HELP  = "Retrive an editable sample object for a wave chunk.";
  IN    = g_param_spec_object ("wave", "Wave", NULL,
			       BSE_TYPE_WAVE, BSE_PARAM_DEFAULT);
  IN    = g_param_spec_uint ("chunk_index", NULL, "Index of chunk to edit",
			     0, G_MAXINT, 0, BSE_PARAM_DEFAULT);
  OUT   = g_param_spec_object ("esample", NULL, "Editable sample",
			       BSE_TYPE_EDITABLE_SAMPLE, BSE_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseWave *wave     = g_value_get_object (in_values++);
  guint chunk_index = g_value_get_uint (in_values++);
  BseEditableSample *esample = NULL;
  GslWaveChunk *wchunk = NULL;

  /* check parameters */
  if (!BSE_IS_WAVE (wave))
    return BSE_ERROR_PROC_PARAM_INVAL;

  wchunk = g_slist_nth_data (wave->wave_chunks, chunk_index);
  if (wchunk)
    {
      esample = g_object_new (BSE_TYPE_EDITABLE_SAMPLE, NULL);
      bse_editable_sample_set_wchunk (esample, wchunk);
      bse_item_use (BSE_ITEM (esample));
      g_object_unref (esample);
    }

  /* set output parameters */
  g_value_set_object (out_values++, esample);

  return BSE_ERROR_NONE;
}
