// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
#include <bse/bseplugin.hh>
#include <bse/bseprocedure.hh>
#include <bse/bsewave.hh>
#include <bse/bseeditablesample.hh>
#include "bsebuiltin_externs.cc"


AUTHORS = "Tim Janik <timj@gtk.org>";
LICENSE = "GNU Lesser General Public License";


METHOD (BseWave, n-wave-chunks) {
  HELP  = "Get the number of wave chunks of a wave";
  IN    = bse_param_spec_object ("wave", "Wave", NULL,
				 BSE_TYPE_WAVE, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_int ("n_chunks", "Number of Wave Chunks", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseWave *wave = (BseWave*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_WAVE (wave))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_int (out_values++, wave->n_wchunks);

  return Bse::ERROR_NONE;
}

METHOD (BseWave, use-editable) {
  HELP  = "Retrieve an editable sample object for a wave chunk.";
  IN    = bse_param_spec_object ("wave", "Wave", NULL,
				 BSE_TYPE_WAVE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("chunk_index", NULL, "Index of chunk to edit",
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_object ("esample", NULL, "Editable sample",
				 BSE_TYPE_EDITABLE_SAMPLE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseWave *wave = (BseWave*) bse_value_get_object (in_values++);
  guint chunk_index = sfi_value_get_int (in_values++);
  BseEditableSample *esample = NULL;
  GslWaveChunk *wchunk = NULL;

  /* check parameters */
  if (!BSE_IS_WAVE (wave))
    return Bse::ERROR_PROC_PARAM_INVAL;

  wchunk = (GslWaveChunk*) sfi_ring_nth_data (wave->wave_chunks, chunk_index);
  if (wchunk)
    {
      esample = (BseEditableSample*) bse_object_new (BSE_TYPE_EDITABLE_SAMPLE, NULL);
      bse_editable_sample_set_wchunk (esample, wchunk);
      bse_item_use (BSE_ITEM (esample));
      g_object_unref (esample);
    }

  /* set output parameters */
  bse_value_set_object (out_values++, esample);

  return Bse::ERROR_NONE;
}

METHOD (BseWave, chunk-get-osc-freq) {
  HELP  = "Retrieve oscillating frequency of a wave chunk.";
  IN    = bse_param_spec_object ("wave", "Wave", NULL,
				 BSE_TYPE_WAVE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("chunk_index", "Chunk Index", "Index of chunk",
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_real ("osc_freq", NULL, NULL,
			  BSE_KAMMER_FREQUENCY, BSE_MIN_OSC_FREQUENCY, BSE_MAX_OSC_FREQUENCY, 10.0,
			  SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseWave *wave = (BseWave*) bse_value_get_object (in_values++);
  guint chunk_index = sfi_value_get_int (in_values++);
  GslWaveChunk *wchunk = NULL;

  /* check parameters */
  if (!BSE_IS_WAVE (wave))
    return Bse::ERROR_PROC_PARAM_INVAL;

  wchunk = (GslWaveChunk*) sfi_ring_nth_data (wave->wave_chunks, chunk_index);
  if (wchunk)
    sfi_value_set_real (out_values++, wchunk->osc_freq);

  return Bse::ERROR_NONE;
}

METHOD (BseWave, chunk-get-mix-freq) {
  HELP  = "Retrieve mixing frequency of a wave chunk.";
  IN    = bse_param_spec_object ("wave", "Wave", NULL,
				 BSE_TYPE_WAVE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("chunk_index", "Chunk Index", "Index of chunk",
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_real ("mix_freq", NULL, NULL,
			  0, 0, 44100 * 16 /* FIXME: MAX_MIX_FREQ */, 10.0,
			  SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseWave *wave = (BseWave*) bse_value_get_object (in_values++);
  guint chunk_index = sfi_value_get_int (in_values++);
  GslWaveChunk *wchunk = NULL;

  /* check parameters */
  if (!BSE_IS_WAVE (wave))
    return Bse::ERROR_PROC_PARAM_INVAL;

  wchunk = (GslWaveChunk*) sfi_ring_nth_data (wave->wave_chunks, chunk_index);
  if (wchunk)
    sfi_value_set_real (out_values++, wchunk->mix_freq);

  return Bse::ERROR_NONE;
}
