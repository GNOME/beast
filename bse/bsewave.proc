/* BSE - Better Sound Engine        -*-mode: c;-*-
 * Copyright (C) 2000-2003 Tim Janik
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * A copy of the GNU Lesser General Public License should ship along
 * with this library; if not, see http://www.gnu.org/copyleft/.
 */
#include <bse/bseplugin.hh>
#include <bse/bseprocedure.hh>
#include <bse/bsewave.hh>
#include <bse/bseeditablesample.hh>


AUTHORS = "Tim Janik <timj@gtk.org>";
LICENSE = "GNU Lesser General Public License";


METHOD (BseWave, load-wave) {
  HELP  = "Load sample chunks from a wave file";
  IN    = bse_param_spec_object ("wave", "Wave", "Wave object to store loaded contents",
				 BSE_TYPE_WAVE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("file_name", "File Name", "The wave file to read wave chunks from",
			    NULL, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("wave_name", "Wave Name", "The name of the wave to read wave chunks from",
			    NULL, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", "Error", "BSE error type",
				BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE,
				SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseWave *wave = (BseWave*) bse_value_get_object (in_values++);
  const char *file_name = sfi_value_get_string (in_values++);
  const char *wave_name = sfi_value_get_string (in_values++);
  BseErrorType error = BSE_ERROR_NONE;
  
  /* check parameters */
  if (!BSE_IS_WAVE (wave) || !file_name || !wave_name)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  error = bse_wave_load_wave_file (wave, file_name, wave_name, NULL, NULL, TRUE);
  
  /* set output parameters */
  g_value_set_enum (out_values++, error);
  
  return BSE_ERROR_NONE;
}

METHOD (BseWave, n-wave-chunks) {
  HELP  = "Get the number of wave chunks of a wave";
  IN    = bse_param_spec_object ("wave", "Wave", NULL,
				 BSE_TYPE_WAVE, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_int ("n_chunks", "Number of Wave Chunks", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseWave *wave = (BseWave*) bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_WAVE (wave))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_set_int (out_values++, wave->n_wchunks);
  
  return BSE_ERROR_NONE;
}

METHOD (BseWave, use-editable) {
  HELP  = "Retrieve an editable sample object for a wave chunk.";
  IN    = bse_param_spec_object ("wave", "Wave", NULL,
				 BSE_TYPE_WAVE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("chunk_index", NULL, "Index of chunk to edit",
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_object ("esample", NULL, "Editable sample",
				 BSE_TYPE_EDITABLE_SAMPLE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseWave *wave = (BseWave*) bse_value_get_object (in_values++);
  guint chunk_index = sfi_value_get_int (in_values++);
  BseEditableSample *esample = NULL;
  GslWaveChunk *wchunk = NULL;

  /* check parameters */
  if (!BSE_IS_WAVE (wave))
    return BSE_ERROR_PROC_PARAM_INVAL;

  wchunk = (GslWaveChunk*) sfi_ring_nth_data (wave->wave_chunks, chunk_index);
  if (wchunk)
    {
      esample = (BseEditableSample*) g_object_new (BSE_TYPE_EDITABLE_SAMPLE, NULL);
      bse_editable_sample_set_wchunk (esample, wchunk);
      bse_item_use (BSE_ITEM (esample));
      g_object_unref (esample);
    }
  
  /* set output parameters */
  bse_value_set_object (out_values++, esample);
  
  return BSE_ERROR_NONE;
}

METHOD (BseWave, chunk-get-osc-freq) {
  HELP  = "Retrieve oscillating frequency of a wave chunk.";
  IN    = bse_param_spec_object ("wave", "Wave", NULL,
				 BSE_TYPE_WAVE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("chunk_index", "Chunk Index", "Index of chunk",
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_real ("osc_freq", NULL, NULL,
			  BSE_KAMMER_FREQUENCY, BSE_MIN_OSC_FREQUENCY, BSE_MAX_OSC_FREQUENCY, 10.0,
			  SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseWave *wave = (BseWave*) bse_value_get_object (in_values++);
  guint chunk_index = sfi_value_get_int (in_values++);
  GslWaveChunk *wchunk = NULL;

  /* check parameters */
  if (!BSE_IS_WAVE (wave))
    return BSE_ERROR_PROC_PARAM_INVAL;

  wchunk = (GslWaveChunk*) sfi_ring_nth_data (wave->wave_chunks, chunk_index);
  if (wchunk)
    sfi_value_set_real (out_values++, wchunk->osc_freq);

  return BSE_ERROR_NONE;
}

METHOD (BseWave, chunk-get-mix-freq) {
  HELP  = "Retrieve mixing frequency of a wave chunk.";
  IN    = bse_param_spec_object ("wave", "Wave", NULL,
				 BSE_TYPE_WAVE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("chunk_index", "Chunk Index", "Index of chunk",
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_real ("mix_freq", NULL, NULL,
			  0, 0, 44100 * 16 /* FIXME: MAX_MIX_FREQ */, 10.0,
			  SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseWave *wave = (BseWave*) bse_value_get_object (in_values++);
  guint chunk_index = sfi_value_get_int (in_values++);
  GslWaveChunk *wchunk = NULL;

  /* check parameters */
  if (!BSE_IS_WAVE (wave))
    return BSE_ERROR_PROC_PARAM_INVAL;

  wchunk = (GslWaveChunk*) sfi_ring_nth_data (wave->wave_chunks, chunk_index);
  if (wchunk)
    sfi_value_set_real (out_values++, wchunk->mix_freq);

  return BSE_ERROR_NONE;
}
