// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
#include <bse/bseplugin.hh>
#include <bse/bseprocedure.hh>
#include <bse/bsejanitor.hh>
#include <bse/bseserver.hh>
#include <string.h>
#include "bsebuiltin_externs.cc"


AUTHORS	= "Tim Janik <timj@gtk.org>";
LICENSE = "GNU Lesser General Public License";


METHOD (BseJanitor, trigger-action) {
  HELP	= "Trigger an installed user action of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_string ("action", "Action", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor  *self = (BseJanitor*) bse_value_get_object (in_values++);
  const gchar *action = sfi_value_get_string (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self) || !action)
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_janitor_trigger_action (self, action);

  return Bse::ERROR_NONE;
}

METHOD (BseJanitor, get-script-name) {
  HELP	= "Retrieve the script name of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  OUT    = sfi_pspec_string ("script_name", "Script Name", NULL,
			     NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = (BseJanitor*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_string (out_values++, self->script_name);

  return Bse::ERROR_NONE;
}

METHOD (BseJanitor, get-proc-name) {
  HELP	= "Retrieve the procedure name of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  OUT    = sfi_pspec_string ("proc_name", "Proc Name", NULL,
			     NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = (BseJanitor*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_string (out_values++, self->proc_name);

  return Bse::ERROR_NONE;
}

METHOD (BseJanitor, n-actions) {
  HELP	= "Retrieve number of user actions of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_int ("n_actions", "N Actions", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = (BseJanitor*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_int (out_values++, g_slist_length (self->actions));

  return Bse::ERROR_NONE;
}

METHOD (BseJanitor, get-action) {
  HELP	= "Retrieve an action of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("nth_action", "Nth Action", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("action", "Action", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = (BseJanitor*) bse_value_get_object (in_values++);
  guint             nth  = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  BseJanitorAction *a = (BseJanitorAction*) g_slist_nth_data (self->actions, nth);
  /* set output parameters */
  sfi_value_set_string (out_values++, a ? g_quark_to_string (a->action) : NULL);

  return Bse::ERROR_NONE;
}

METHOD (BseJanitor, get-action-name) {
  HELP	= "Retrieve the name of an action of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("nth_action", "Nth Action", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("action-name", "Action Name", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = (BseJanitor*) bse_value_get_object (in_values++);
  guint             nth  = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  BseJanitorAction *a = (BseJanitorAction*) g_slist_nth_data (self->actions, nth);

  /* set output parameters */
  sfi_value_set_string (out_values++, a ? a->name : NULL);

  return Bse::ERROR_NONE;
}

METHOD (BseJanitor, get-action-blurb) {
  HELP	= "Retrieve the help string of an action of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("nth_action", "Nth Action", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("action-blurb", "Action Blurb", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = (BseJanitor*) bse_value_get_object (in_values++);
  guint             nth  = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  BseJanitorAction *a = (BseJanitorAction*) g_slist_nth_data (self->actions, nth);

  /* set output parameters */
  sfi_value_set_string (out_values++, a ? a->blurb : NULL);
  return Bse::ERROR_NONE;
}

METHOD (BseJanitor, kill) {
  HELP	= "Kill a currently running janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = (BseJanitor*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_janitor_kill (self);

  return Bse::ERROR_NONE;
}

PROCEDURE (bse-script-janitor, "Script/Get Janitor") {
  HELP  = "Retrieve the connection dependant janitor object.";
  OUT   = bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  BseJanitor *self = bse_janitor_get_current ();

  /* check execution context */
  if (!self || !self->port || self->port_closed)
    return Bse::ERROR_PROC_EXECUTION;

  /* set output parameters */
  bse_value_set_object (out_values++, self);

  return Bse::ERROR_NONE;
}

PROCEDURE (bse-script-add-action, "Script/Add Action") {
  HELP	= "Install a user action for script control.";
  IN	= sfi_pspec_string ("action", "Action", NULL,
			    NULL, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_string ("name", "Name", NULL,
			    NULL, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_string ("blurb", "Blurb", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor  *self   = bse_janitor_get_current ();
  const gchar *action = sfi_value_get_string (in_values++);
  const gchar *name   = sfi_value_get_string (in_values++);
  const gchar *blurb  = sfi_value_get_string (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self) || !action || !name)
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* check execution context */
  if (!self->port || self->port_closed)
    return Bse::ERROR_PROC_EXECUTION;

  /* action */
  bse_janitor_add_action (self, action, name, blurb);

  return Bse::ERROR_NONE;
}

PROCEDURE (bse-script-remove-action, "Script/Remove Action") {
  HELP	= "Remove a previously installed user action from script control.";
  IN	= sfi_pspec_string ("action", "Action", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor  *self   = bse_janitor_get_current ();
  const gchar *action = sfi_value_get_string (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self) || !action)
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* check execution context */
  if (!self->port || self->port_closed)
    return Bse::ERROR_PROC_EXECUTION;

  /* action */
  bse_janitor_remove_action (self, action);

  return Bse::ERROR_NONE;
}

PROCEDURE (bse-script-set-status, "Script/Set Status") {
  HELP  = "Alter script status message.";
  IN    = sfi_pspec_string ("message", "Message", NULL,
			    NULL, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor    *self    = bse_janitor_get_current ();
  const gchar   *message = sfi_value_get_string (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* check execution context */
  if (!self->port || self->port_closed)
    return Bse::ERROR_PROC_EXECUTION;
  if (!message)
    message = "";

  /* action */
  bse_item_set (self, "status-message", message, NULL);

  return Bse::ERROR_NONE;
}

PROCEDURE (bse-script-progress, "Script/Progress") {
  HELP  = "Indicate progress (from 0.0 to 1.0 or -1 for unknown amount).";
  IN    = sfi_pspec_real ("progress", "Progress", NULL,
			  -1, -1, 1.0, 0.1,
			  SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = bse_janitor_get_current ();
  gfloat progress  = sfi_value_get_real (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* check execution context */
  if (!self->port || self->port_closed)
    return Bse::ERROR_PROC_EXECUTION;

  /* action */
  bse_janitor_progress (self, progress);

  return Bse::ERROR_NONE;
}

PROCEDURE (bse-script-send-message, "Script/Message") {
  HELP  = "Send a message from a script.";
  /* keep arguments in sync with bsescminterp.c */
  IN    = sfi_pspec_string ("domain", NULL, NULL, NULL, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("msg-type", NULL, NULL, NULL, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("title", NULL, NULL, NULL, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("primary", NULL, NULL, NULL, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("secondary", NULL, NULL, NULL, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("details", NULL, NULL, NULL, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("config-check", NULL, NULL, NULL, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *janitor = bse_janitor_get_current();
  if (!BSE_IS_JANITOR (janitor) || !janitor->port || janitor->port_closed)
    return Bse::ERROR_PROC_EXECUTION;

  const gchar *domain = sfi_value_get_string (in_values++);
  const gchar *mtype  = sfi_value_get_string (in_values++);
  const gchar *text0  = sfi_value_get_string (in_values++);
  const gchar *text1  = sfi_value_get_string (in_values++);
  const gchar *text2  = sfi_value_get_string (in_values++);
  const gchar *text3  = sfi_value_get_string (in_values++);
  const gchar *check  = sfi_value_get_string (in_values++);

  auto stupid_convert = [] (char c) {
    switch (c)
      {
      case 'E': case 'e':       return Bse::ERROR;
      case 'W': case 'w':       return Bse::WARNING;
      default:
      case 'I': case 'i':       return Bse::INFO;
      case 'D': case 'd':       return Bse::DEBUG;
      }
  };

  if (text1)
    {
      using namespace Bse;
      UserMessage umsg;
      umsg.utype = stupid_convert (mtype ? mtype[0] : 0);
      umsg.title = text0 ? text0 : "WARNING";
      umsg.text1 = text1;
      if (text2)
        umsg.text2 = text2;
      if (text3)
        umsg.text3 = text3;
      if (check && check[0])
        umsg.label = check;
      ServerImpl::instance().send_user_message (umsg);
      return Bse::ERROR_NONE;
    }
  else
    return Bse::ERROR_PROC_PARAM_INVAL;
  (void) domain;
}

PROCEDURE (bse-script-quit, "Script/Quit") {
  HELP  = "Exit a script succesfully (server side).";
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *janitor = bse_janitor_get_current();

  /* check execution context */
  if (!BSE_IS_JANITOR (janitor) || !janitor->port || janitor->port_closed)
    return Bse::ERROR_PROC_EXECUTION;

  /* action */
  janitor->force_normal_exit = TRUE;
  bse_janitor_close (janitor);

  return Bse::ERROR_NONE;
}
