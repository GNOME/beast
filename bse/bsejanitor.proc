/* BSE - Better Sound Engine	-*-mode: c;-*-
 * Copyright (C) 2002 Tim Janik
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * A copy of the GNU Lesser General Public License should ship along
 * with this library; if not, see http://www.gnu.org/copyleft/.
 */
#include <bse/bseplugin.h>
#include <bse/bseprocedure.h>
#include <bse/bsejanitor.h>
#include <bse/bseserver.h>
#include <string.h>


AUTHORS	= "Tim Janik <timj@gtk.org>";
LICENSE = "GNU Lesser General Public License";


METHOD (BseJanitor, trigger-action) {
  HELP	= "Trigger an installed user action of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_string ("action", "Action", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor  *self   = bse_value_get_object (in_values++);
  const gchar *action = sfi_value_get_string (in_values++);
  
  /* check parameters */
  if (!BSE_IS_JANITOR (self) || !action)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  bse_janitor_trigger_action (self, action);
  
  return BSE_ERROR_NONE;
}

METHOD (BseJanitor, get-script-name) {
  HELP	= "Retrieve the script name of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  OUT    = sfi_pspec_string ("script_name", "Script Name", NULL,
			     NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_set_string (out_values++, self->script_name);
  
  return BSE_ERROR_NONE;
}

METHOD (BseJanitor, get-proc-name) {
  HELP	= "Retrieve the procedure name of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  OUT    = sfi_pspec_string ("proc_name", "Proc Name", NULL,
			     NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_set_string (out_values++, self->proc_name);
  
  return BSE_ERROR_NONE;
}

METHOD (BseJanitor, n-actions) {
  HELP	= "Retrieve number of user actions of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_int ("n_actions", "N Actions", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_set_int (out_values++, g_slist_length (self->actions));
  
  return BSE_ERROR_NONE;
}

METHOD (BseJanitor, get-action) {
  HELP	= "Retrieve an action of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("nth_action", "Nth Action", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("action", "Action", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor       *self = bse_value_get_object (in_values++);
  guint             nth  = sfi_value_get_int (in_values++);
  BseJanitorAction *a;
  
  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  a = g_slist_nth_data (self->actions, nth);
  
  /* set output parameters */
  sfi_value_set_string (out_values++, a ? g_quark_to_string (a->action) : NULL);
  
  return BSE_ERROR_NONE;
}

METHOD (BseJanitor, get-action-name) {
  HELP	= "Retrieve the name of an action of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("nth_action", "Nth Action", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("action-name", "Action Name", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor       *self = bse_value_get_object (in_values++);
  guint             nth  = sfi_value_get_int (in_values++);
  BseJanitorAction *a;
  
  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  a = g_slist_nth_data (self->actions, nth);
  
  /* set output parameters */
  sfi_value_set_string (out_values++, a ? a->name : NULL);
  
  return BSE_ERROR_NONE;
}

METHOD (BseJanitor, get-action-blurb) {
  HELP	= "Retrieve the help string of an action of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("nth_action", "Nth Action", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("action-blurb", "Action Blurb", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor       *self = bse_value_get_object (in_values++);
  guint             nth  = sfi_value_get_int (in_values++);
  BseJanitorAction *a;
  
  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  a = g_slist_nth_data (self->actions, nth);
  
  /* set output parameters */
  sfi_value_set_string (out_values++, a ? a->blurb : NULL);
  
  return BSE_ERROR_NONE;
}

METHOD (BseJanitor, kill) {
  HELP	= "Kill a currently running janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  bse_janitor_kill (self);
  
  return BSE_ERROR_NONE;
}

PROCEDURE (bse-script-janitor, "Script/Get Janitor") {
  HELP  = "Retrieve the connection dependant janitor object.";
  OUT   = bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  BseJanitor *self = bse_janitor_get_current ();
  
  /* check execution context */
  if (!self || !self->port || self->port_closed)
    return BSE_ERROR_PROC_EXECUTION;

  /* set output parameters */
  bse_value_set_object (out_values++, self);
  
  return BSE_ERROR_NONE;
}

PROCEDURE (bse-script-add-action, "Script/Add Action") {
  HELP	= "Install a user action for script control.";
  IN	= sfi_pspec_string ("action", "Action", NULL,
			    NULL, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_string ("name", "Name", NULL,
			    NULL, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_string ("blurb", "Blurb", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor  *self   = bse_janitor_get_current ();
  const gchar *action = sfi_value_get_string (in_values++);
  const gchar *name   = sfi_value_get_string (in_values++);
  const gchar *blurb  = sfi_value_get_string (in_values++);
  
  /* check parameters */
  if (!BSE_IS_JANITOR (self) || !action || !name)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* check execution context */
  if (!self->port || self->port_closed)
    return BSE_ERROR_PROC_EXECUTION;
  
  /* action */
  bse_janitor_add_action (self, action, name, blurb);
  
  return BSE_ERROR_NONE;
}

PROCEDURE (bse-script-remove-action, "Script/Remove Action") {
  HELP	= "Remove a previously installed user action from script control.";
  IN	= sfi_pspec_string ("action", "Action", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor  *self   = bse_janitor_get_current ();
  const gchar *action = sfi_value_get_string (in_values++);
  
  /* check parameters */
  if (!BSE_IS_JANITOR (self) || !action)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* check execution context */
  if (!self->port || self->port_closed)
    return BSE_ERROR_PROC_EXECUTION;
  
  /* action */
  bse_janitor_remove_action (self, action);
  
  return BSE_ERROR_NONE;
}

PROCEDURE (bse-script-set-status, "Script/Set Status") {
  HELP  = "Alter script status message.";
  IN    = sfi_pspec_string ("message", "Message", NULL,
			    NULL, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor    *self    = bse_janitor_get_current ();
  const gchar   *message = sfi_value_get_string (in_values++);
  
  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* check execution context */
  if (!self->port || self->port_closed)
    return BSE_ERROR_PROC_EXECUTION;
  if (!message)
    message = "";
  
  /* action */
  bse_item_set (self, "status-message", message, NULL);
  
  return BSE_ERROR_NONE;
}

PROCEDURE (bse-script-progress, "Script/Progress") {
  HELP  = "Indicate progress (from 0.0 to 1.0 or -1 for unknown amount).";
  IN    = sfi_pspec_real ("progress", "Progress", NULL,
			  -1, -1, 1.0, 0.1,
			  SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = bse_janitor_get_current ();
  gfloat progress  = sfi_value_get_real (in_values++);
  
  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* check execution context */
  if (!self->port || self->port_closed)
    return BSE_ERROR_PROC_EXECUTION;
  
  /* action */
  bse_janitor_progress (self, progress);
  
  return BSE_ERROR_NONE;
}

PROCEDURE (bse-script-send-message, "Script/Message") {
  HELP  = "Send a message from a script.";
  /* keep arguments in sync with bsescminterp.c */
  IN    = sfi_pspec_string ("domain", NULL, NULL, NULL, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("msg-type", NULL, NULL, NULL, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("title", NULL, NULL, NULL, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("primary", NULL, NULL, NULL, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("secondary", NULL, NULL, NULL, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("details", NULL, NULL, NULL, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("config-check", NULL, NULL, NULL, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *janitor = bse_janitor_get_current();
  const gchar *domain = sfi_value_get_string (in_values++);
  const gchar *mtype  = sfi_value_get_string (in_values++);
  const gchar *text0  = sfi_value_get_string (in_values++);
  const gchar *text1  = sfi_value_get_string (in_values++);
  const gchar *text2  = sfi_value_get_string (in_values++);
  const gchar *text3  = sfi_value_get_string (in_values++);
  const gchar *check  = sfi_value_get_string (in_values++);
  SfiMsgType    type  = mtype ? sfi_msg_lookup_type (mtype) : 0;

  /* check parameters */
  if (!mtype || !(text1 || text2))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* check execution context */
  if (!BSE_IS_JANITOR (janitor) || !janitor->port || janitor->port_closed)
    return BSE_ERROR_PROC_EXECUTION;

  /* action */
  bse_server_message (bse_server_get (), domain, type, text0, text1, text2, text3, check, janitor, NULL, janitor->port->remote_pid);

  return BSE_ERROR_NONE;
}

PROCEDURE (bse-script-quit, "Script/Quit") {
  HELP  = "Exit a script succesfully (server side).";
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *janitor = bse_janitor_get_current();

  /* check execution context */
  if (!BSE_IS_JANITOR (janitor) || !janitor->port || janitor->port_closed)
    return BSE_ERROR_PROC_EXECUTION;
  
  /* action */
  janitor->force_normal_exit = TRUE;
  bse_janitor_close (janitor);
  
  return BSE_ERROR_NONE;
}
