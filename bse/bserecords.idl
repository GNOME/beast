/* SFI - Synthesis Fusion Kit Interface Definition Language     -*-mode: c++;-*-
 * Copyright (C) 2002, 2003 Tim Janik
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */

namespace Bse {  // FIXME: sync to bsemidievent.h; stefan, how can we refer to generated enums?

/* param options */
Const READWRITE = ":r:w:";
Const STORAGE = ":r:w:S:";
Const DEFAULT = ":r:w:G:S:";
Const GUI = ":r:w:G:";
Const DEFAULT_RDONLY = ":r:w:G:S:ro:";
Const GUI_RDONLY = ":r:w:G:ro:";
/* extra flags */
Const SKIP_DEFAULT = ":skip-default:";
Const SKIP_UNDO = ":skip-undo:";

Const STANDARD = DEFAULT;


choice MidiSignalType {
  /* special cased signals */
  MIDI_SIGNAL_PROGRAM                         = (1,   "Program Change"),     /* 7bit */
  MIDI_SIGNAL_PRESSURE                        = (2,   "Channel Pressure"),   /* 7bit */
  MIDI_SIGNAL_PITCH_BEND                      = (3,   "Pitch Bend"),         /* 14bit */
  MIDI_SIGNAL_VELOCITY                        = (4,   "Note Velocity"),
  MIDI_SIGNAL_FINE_TUNE                       = (5,   "Note Fine Tune"),
  /* 14bit, continuous controls */
  MIDI_SIGNAL_CONTINUOUS_0                    = (64,  "Bank Select"),
  MIDI_SIGNAL_CONTINUOUS_1                    = (65,  "Modulation Wheel"),
  MIDI_SIGNAL_CONTINUOUS_2                    = (66,  "Breath Control"),
  MIDI_SIGNAL_CONTINUOUS_3                    = (67,  "Continuous 3"),
  MIDI_SIGNAL_CONTINUOUS_4                    = (68,  "Foot Controller"),
  MIDI_SIGNAL_CONTINUOUS_5                    = (69,  "Portamento Time"),
  MIDI_SIGNAL_CONTINUOUS_6                    = (70,  "Data Entry"),
  MIDI_SIGNAL_CONTINUOUS_7                    = (71,  "Volume"),
  MIDI_SIGNAL_CONTINUOUS_8                    = (72,  "Balance"),
  MIDI_SIGNAL_CONTINUOUS_9                    = (73,  "Continuous 9"),
  MIDI_SIGNAL_CONTINUOUS_10                   = (74,  "Panorama"),
  MIDI_SIGNAL_CONTINUOUS_11                   = (75,  "Expression"),
  MIDI_SIGNAL_CONTINUOUS_12                   = (76,  "Effect Control 1"),
  MIDI_SIGNAL_CONTINUOUS_13                   = (77,  "Effect Control 2"),
  MIDI_SIGNAL_CONTINUOUS_14                   = (78,  "Continuous 14"),
  MIDI_SIGNAL_CONTINUOUS_15                   = (79,  "Continuous 15"),
  MIDI_SIGNAL_CONTINUOUS_16                   = (80,  "General Purpose Controller 1"),
  MIDI_SIGNAL_CONTINUOUS_17                   = (81,  "General Purpose Controller 2"),
  MIDI_SIGNAL_CONTINUOUS_18                   = (82,  "General Purpose Controller 3"),
  MIDI_SIGNAL_CONTINUOUS_19                   = (83,  "General Purpose Controller 4"),
  MIDI_SIGNAL_CONTINUOUS_20                   = (84,  "Continuous 20"),
  MIDI_SIGNAL_CONTINUOUS_21                   = (85,  "Continuous 21"),
  MIDI_SIGNAL_CONTINUOUS_22                   = (86,  "Continuous 22"),
  MIDI_SIGNAL_CONTINUOUS_23                   = (87,  "Continuous 23"),
  MIDI_SIGNAL_CONTINUOUS_24                   = (88,  "Continuous 24"),
  MIDI_SIGNAL_CONTINUOUS_25                   = (89,  "Continuous 25"),
  MIDI_SIGNAL_CONTINUOUS_26                   = (90,  "Continuous 26"),
  MIDI_SIGNAL_CONTINUOUS_27                   = (91,  "Continuous 27"),
  MIDI_SIGNAL_CONTINUOUS_28                   = (92,  "Continuous 28"),
  MIDI_SIGNAL_CONTINUOUS_29                   = (93,  "Continuous 29"),
  MIDI_SIGNAL_CONTINUOUS_30                   = (94,  "Continuous 30"),
  MIDI_SIGNAL_CONTINUOUS_31                   = (95,  "Continuous 31"),
  /* 14bit, special cased signals */
  MIDI_SIGNAL_CONSTANT_HIGH                   = (96,  "Constant HIGH"),
  MIDI_SIGNAL_CONSTANT_CENTER                 = (97,  "Constant CENTER"),
  MIDI_SIGNAL_CONSTANT_LOW                    = (98,  "Constant LOW"),
  MIDI_SIGNAL_CONSTANT_NEGATIVE_CENTER        = (99,  "Constant Negative CENTER"),
  MIDI_SIGNAL_CONSTANT_NEGATIVE_HIGH          = (100, "Constant Negative HIGH"),
  MIDI_SIGNAL_PARAMETER                       = (101, "Registered Parameter"),
  MIDI_SIGNAL_NON_PARAMETER                   = (102, "Non-Registered Parameter"),
  /* 7bit, literal channel controls, MSB values */
  MIDI_SIGNAL_CONTROL_0                       = (128, "Control 0 Bank Select MSB"),
  MIDI_SIGNAL_CONTROL_1                       = (129, "Control 1 Modulation Wheel MSB"),
  MIDI_SIGNAL_CONTROL_2                       = (130, "Control 2 Breath Control MSB"),
  MIDI_SIGNAL_CONTROL_3                       = (131, "control-3"),
  MIDI_SIGNAL_CONTROL_4                       = (132, "Control 4 Foot Controller MSB"),
  MIDI_SIGNAL_CONTROL_5                       = (133, "Control 5 Portamento Time MSB"),
  MIDI_SIGNAL_CONTROL_6                       = (134, "Control 6 Data Entry MSB"),
  MIDI_SIGNAL_CONTROL_7                       = (135, "Control 7 Volume MSB"),
  MIDI_SIGNAL_CONTROL_8                       = (136, "Control 8 Balance MSB"),
  MIDI_SIGNAL_CONTROL_9                       = (137, "control-9"),
  MIDI_SIGNAL_CONTROL_10                      = (138, "Control 10 Panorama MSB"),
  MIDI_SIGNAL_CONTROL_11                      = (139, "Control 11 Expression MSB"),
  MIDI_SIGNAL_CONTROL_12                      = (140, "Control 12 Effect Control 1 MSB"),
  MIDI_SIGNAL_CONTROL_13                      = (141, "Control 13 Effect Control 2 MSB"),
  MIDI_SIGNAL_CONTROL_14                      = (142, "control-14"),
  MIDI_SIGNAL_CONTROL_15                      = (143, "control-15"),
  MIDI_SIGNAL_CONTROL_16                      = (144, "Control 16 General Purpose Controller 1 MSB"),
  MIDI_SIGNAL_CONTROL_17                      = (145, "Control 17 General Purpose Controller 2 MSB"),
  MIDI_SIGNAL_CONTROL_18                      = (146, "Control 18 General Purpose Controller 3 MSB"),
  MIDI_SIGNAL_CONTROL_19                      = (147, "Control 19 General Purpose Controller 4 MSB"),
  MIDI_SIGNAL_CONTROL_20                      = (148, "control-20"),
  MIDI_SIGNAL_CONTROL_21                      = (149, "control-21"),
  MIDI_SIGNAL_CONTROL_22                      = (150, "control-22"),
  MIDI_SIGNAL_CONTROL_23                      = (151, "control-23"),
  MIDI_SIGNAL_CONTROL_24                      = (152, "control-24"),
  MIDI_SIGNAL_CONTROL_25                      = (153, "control-25"),
  MIDI_SIGNAL_CONTROL_26                      = (154, "control-26"),
  MIDI_SIGNAL_CONTROL_27                      = (155, "control-27"),
  MIDI_SIGNAL_CONTROL_28                      = (156, "control-28"),
  MIDI_SIGNAL_CONTROL_29                      = (157, "control-29"),
  MIDI_SIGNAL_CONTROL_30                      = (158, "control-30"),
  MIDI_SIGNAL_CONTROL_31                      = (159, "control-31"),
  /* 7bit, literal channel controls, LSB values */
  MIDI_SIGNAL_CONTROL_32                      = (160, "Control 32 Bank Select LSB"),
  MIDI_SIGNAL_CONTROL_33                      = (161, "Control 33 Modulation Wheel LSB"),
  MIDI_SIGNAL_CONTROL_34                      = (162, "Control 34 Breath Control LSB"),
  MIDI_SIGNAL_CONTROL_35                      = (163, "control-35"),
  MIDI_SIGNAL_CONTROL_36                      = (164, "Control 36 Foot Controller LSB"),
  MIDI_SIGNAL_CONTROL_37                      = (165, "Control 37 Portamento Time LSB"),
  MIDI_SIGNAL_CONTROL_38                      = (166, "Control 38 Data Entry LSB"),
  MIDI_SIGNAL_CONTROL_39                      = (167, "Control 39 Volume LSB"),
  MIDI_SIGNAL_CONTROL_40                      = (168, "Control 40 Balance LSB"),
  MIDI_SIGNAL_CONTROL_41                      = (169, "control-41"),
  MIDI_SIGNAL_CONTROL_42                      = (170, "Control 42 Panorama LSB"),
  MIDI_SIGNAL_CONTROL_43                      = (171, "Control 43 Expression LSB"),
  MIDI_SIGNAL_CONTROL_44                      = (172, "Control 44 Effect Control 1 LSB"),
  MIDI_SIGNAL_CONTROL_45                      = (173, "Control 45 Effect Control 2 LSB"),
  MIDI_SIGNAL_CONTROL_46                      = (174, "control-46"),
  MIDI_SIGNAL_CONTROL_47                      = (175, "control-47"),
  MIDI_SIGNAL_CONTROL_48                      = (176, "Control 48 General Purpose Controller 1 LSB"),
  MIDI_SIGNAL_CONTROL_49                      = (177, "Control 49 General Purpose Controller 2 LSB"),
  MIDI_SIGNAL_CONTROL_50                      = (178, "Control 50 General Purpose Controller 3 LSB"),
  MIDI_SIGNAL_CONTROL_51                      = (179, "Control 51 General Purpose Controller 4 LSB"),
  MIDI_SIGNAL_CONTROL_52                      = (180, "control-52"),
  MIDI_SIGNAL_CONTROL_53                      = (181, "control-53"),
  MIDI_SIGNAL_CONTROL_54                      = (182, "control-54"),
  MIDI_SIGNAL_CONTROL_55                      = (183, "control-55"),
  MIDI_SIGNAL_CONTROL_56                      = (184, "control-56"),
  MIDI_SIGNAL_CONTROL_57                      = (185, "control-57"),
  MIDI_SIGNAL_CONTROL_58                      = (186, "control-58"),
  MIDI_SIGNAL_CONTROL_59                      = (187, "control-59"),
  MIDI_SIGNAL_CONTROL_60                      = (188, "control-60"),
  MIDI_SIGNAL_CONTROL_61                      = (189, "control-61"),
  MIDI_SIGNAL_CONTROL_62                      = (190, "control-62"),
  MIDI_SIGNAL_CONTROL_63                      = (191, "control-63"),
  /* 7bit, literal channel controls */
  MIDI_SIGNAL_CONTROL_64                      = (192, "Control 64 Damper Pedal Switch (Sustain)"),
  MIDI_SIGNAL_CONTROL_65                      = (193, "Control 65 Portamento Switch"),
  MIDI_SIGNAL_CONTROL_66                      = (194, "Control 66 Sustenuto Switch"),
  MIDI_SIGNAL_CONTROL_67                      = (195, "Control 67 Soft Switch"),
  MIDI_SIGNAL_CONTROL_68                      = (196, "Control 68 Legato Pedal Switch"),
  MIDI_SIGNAL_CONTROL_69                      = (197, "Control 69 Hold Pedal Switch"),
  MIDI_SIGNAL_CONTROL_70                      = (198, "Control 70 Sound Variation"),
  MIDI_SIGNAL_CONTROL_71                      = (199, "Control 71 Sound Timbre"),
  MIDI_SIGNAL_CONTROL_72                      = (200, "Control 72 Sound Release Time"),
  MIDI_SIGNAL_CONTROL_73                      = (201, "Control 73 Sound Attack Time"),
  MIDI_SIGNAL_CONTROL_74                      = (202, "Control 74 Sound Brightness"),
  MIDI_SIGNAL_CONTROL_75                      = (203, "Control 75 Sound Control 6"),
  MIDI_SIGNAL_CONTROL_76                      = (204, "Control 76 Sound Control 7"),
  MIDI_SIGNAL_CONTROL_77                      = (205, "Control 77 Sound Control 8"),
  MIDI_SIGNAL_CONTROL_78                      = (206, "Control 78 Sound Control 9"),
  MIDI_SIGNAL_CONTROL_79                      = (207, "Control 79 Sound Control 10"),
  MIDI_SIGNAL_CONTROL_80                      = (208, "Control 80 General Purpose Switch 5"),
  MIDI_SIGNAL_CONTROL_81                      = (209, "Control 81 General Purpose Switch 6"),
  MIDI_SIGNAL_CONTROL_82                      = (210, "Control 82 General Purpose Switch 7"),
  MIDI_SIGNAL_CONTROL_83                      = (211, "Control 83 General Purpose Switch 8"),
  MIDI_SIGNAL_CONTROL_84                      = (212, "Control 84 Portamento Control (Note)"),
  MIDI_SIGNAL_CONTROL_85                      = (213, "control-85"),
  MIDI_SIGNAL_CONTROL_86                      = (214, "control-86"),
  MIDI_SIGNAL_CONTROL_87                      = (215, "control-87"),
  MIDI_SIGNAL_CONTROL_88                      = (216, "control-88"),
  MIDI_SIGNAL_CONTROL_89                      = (217, "control-89"),
  MIDI_SIGNAL_CONTROL_90                      = (218, "control-90"),
  MIDI_SIGNAL_CONTROL_91                      = (219, "Control 91 Reverb Depth"),
  MIDI_SIGNAL_CONTROL_92                      = (220, "Control 92 Tremolo Depth"),
  MIDI_SIGNAL_CONTROL_93                      = (221, "Control 93 Chorus Depth"),
  MIDI_SIGNAL_CONTROL_94                      = (222, "Control 93 Detune Depth"),
  MIDI_SIGNAL_CONTROL_95                      = (223, "Control 95 Phase Depth"),
  MIDI_SIGNAL_CONTROL_96                      = (224, "Control 96 Data Increment Trigger"),
  MIDI_SIGNAL_CONTROL_97                      = (225, "Control 97 Data Decrement Trigger"),
  MIDI_SIGNAL_CONTROL_98                      = (226, "Control 98 Non-Registered Parameter MSB"),
  MIDI_SIGNAL_CONTROL_99                      = (227, "Control 99 Non-Registered Parameter LSB"),
  MIDI_SIGNAL_CONTROL_100                     = (228, "Control 100 Registered Parameter MSB"),
  MIDI_SIGNAL_CONTROL_101                     = (229, "Control 101 Registered Parameter LSB"),
  MIDI_SIGNAL_CONTROL_102                     = (230, "control-102"),
  MIDI_SIGNAL_CONTROL_103                     = (231, "control-103"),
  MIDI_SIGNAL_CONTROL_104                     = (232, "control-104"),
  MIDI_SIGNAL_CONTROL_105                     = (233, "control-105"),
  MIDI_SIGNAL_CONTROL_106                     = (234, "control-106"),
  MIDI_SIGNAL_CONTROL_107                     = (235, "control-107"),
  MIDI_SIGNAL_CONTROL_108                     = (236, "control-108"),
  MIDI_SIGNAL_CONTROL_109                     = (237, "control-109"),
  MIDI_SIGNAL_CONTROL_110                     = (238, "control-110"),
  MIDI_SIGNAL_CONTROL_111                     = (239, "control-111"),
  MIDI_SIGNAL_CONTROL_112                     = (240, "control-112"),
  MIDI_SIGNAL_CONTROL_113                     = (241, "control-113"),
  MIDI_SIGNAL_CONTROL_114                     = (242, "control-114"),
  MIDI_SIGNAL_CONTROL_115                     = (243, "control-115"),
  MIDI_SIGNAL_CONTROL_116                     = (244, "control-116"),
  MIDI_SIGNAL_CONTROL_117                     = (245, "control-117"),
  MIDI_SIGNAL_CONTROL_118                     = (246, "control-118"),
  MIDI_SIGNAL_CONTROL_119                     = (247, "control-119"),
  MIDI_SIGNAL_CONTROL_120                     = (248, "Control 120 All Sound Off ITrigger"),
  MIDI_SIGNAL_CONTROL_121                     = (249, "Control 121 All Controllers Off ITrigger"),
  MIDI_SIGNAL_CONTROL_122                     = (250, "Control 122 Local Control Switch"),
  MIDI_SIGNAL_CONTROL_123                     = (251, "Control 123 All Notes Off ITrigger"),
  MIDI_SIGNAL_CONTROL_124                     = (252, "Control 124 Omni Mode Off ITrigger"),
  MIDI_SIGNAL_CONTROL_125                     = (253, "Control 125 Omni Mode On ITrigger"),
  MIDI_SIGNAL_CONTROL_126                     = (254, "Control 126 Monophonic Voices Mode"),
  MIDI_SIGNAL_CONTROL_127                     = (255, "Control 127 Polyphonic Mode On ITrigger"),
};

sequence IntSeq {
  Int    ints;
};
sequence NoteSeq {
  Int    notes   = Note ("Note", "", KAMMER_NOTE, ":readwrite"); /* FIXME: s/notes/note/ for pspecs, but not the C API */
};
sequence StringSeq {
  String strings;
};

class Item;

sequence ProxySeq {
  Info   BLURB = ("An item list");
  Item   proxies;
  Info   HELP = ("A list of BSE objects, usually items.");
};

record PartNote
{
  Info     BLURB      = "Part specific note representation";
  Int      id           = UInt ("ID", "", 0, ":readwrite");
  Int      tick = ("Tick", "", 0, 0, MAXINT, 1, ":readwrite");
  Int      duration   = ("Duration", "Duration in number of ticks", 0, 0, MAXINT, 1, ":readwrite");
  Int      note       = Note ("Note", "", KAMMER_NOTE, ":readwrite");
  Int      fine_tune    = ("Fine Tune", "", 0, MIN_FINE_TUNE, MAX_FINE_TUNE, 1, ":readwrite");
  Real     velocity     = ("Velocity", "", 1, 0, 1.0, 0.1, ":readwrite");
  Bool     selected   = ("Selected", "", FALSE, ":readwrite");
};

sequence PartNoteSeq {
  Info     BLURB = "A list of part notes";
  PartNote pnotes;
};

record PartControl
{
  Info           BLURB        = "Part specific control event representation";
  Int            id           = UInt ("ID", "", 0, ":readwrite");
  Int            tick         = ("Tick", "", 0, 0, MAXINT, 1, ":readwrite");
  MidiSignalType control_type;
  Real           value        = ("Value", "", 0, -1, +1, 0.1, ":readwrite");
  Bool           selected     = ("Selected", "", FALSE, ":readwrite");
};

sequence PartControlSeq {
  Info BLURB = "A list of part control events";
  PartControl pcontrols;
};

record NoteDescription
{
  Int    note            = Note ("Note", "", KAMMER_NOTE, ":readwrite");
  Int    octave          = Octave ("Octave", "", KAMMER_OCTAVE, ":readwrite");
  Real   freq            = Freq ("Frequency", "", KAMMER_FREQ, ":readwrite");
  Int    fine_tune       = FineTune ("Fine Tune", "", ":readwrite");
  Int    semitone        = Int ("Semitone", "", 0, 0, 11, 1, ":readwrite");
  Bool   upshift;
  Int    letter          = Int ("Letter", "International abbreviation letter for this note", 64, 32, 126, 1, ":readwrite");
  String name            = String ("Name", "", "", ":readwrite");
  /* constants */
  Int    max_fine_tune   = Int ("Max Fine Tune", "", MAX_FINE_TUNE, MAX_FINE_TUNE, MAX_FINE_TUNE, 0, ":readable");
  Int    kammer_note     = Int ("Kammer Note", "", KAMMER_NOTE, KAMMER_NOTE, KAMMER_NOTE, 0, ":readable");
  Info   HELP            = "A note description provides all necessary details about a specific note. "
                           "Various procedures exist to retrieve a note description, given different "
                           "key values. The max_fine_tune and kammer_note fields are constants, which "
                           "are provided for compatibility reasons and will vanish in future APIs.";
};

record NoteSequence
{
  Int     offset = Note ("Note Offset", "Center/base note", KAMMER_NOTE, ":readwrite");
  NoteSeq notes  = ("Notes", "Sequence of notes", ":readwrite");
};

record Icon
{
  Info   BLURB           = "BSE icon representation.";
  Int    bytes_per_pixel = ("Bytes Per Pixel", "Bytes Per Pixel (3:RGB, 4:RGBA, 0:NONE)", 4, 3, 4, 1, ":readwrite");
  Int    width           = ("Width", "Width in pixels or 0 for no icon", 0, 0, MAXINT, 1, ":readwrite");
  Int    height          = ("Height", "Height in pixels or 0 for no icon", 0, 0, MAXINT, 1, ":readwrite");
  BBlock pixels          = ("Pixels", "Pixel array of width*height*bytes_per_pixel bytes", ":readwrite");
};

record Category
{
  Int    category_id = ("Category ID", NULL, 1, 1, G_MAXINT, 1, ":readwrite");
  String category;
  Int    mindex;
  Int    lindex;
  String type;
  Icon   icon;
};

sequence CategorySeq {
  Category cats;
};

record Dot
{
  Real  x;
  Real  y;
};

sequence DotSeq {
  Dot dots;
};

/* BSE Track structures */

class Part;
record TrackPart {
  Int           tick     = ("Tick", NULL, 0, 0, G_MAXINT, 384, SFI_PARAM_DEFAULT);
  Part          part;
  Int           duration = ("Duration", NULL, 0, 0, G_MAXINT, 384, SFI_PARAM_DEFAULT);
};
sequence TrackPartSeq {
  TrackPart tparts;
};

/* BSE Song timing structure */
record SongTiming {
  /* song position timing applies to */
  Int   tick        = ("Current tick", NULL, 0, 0, G_MAXINT, 384, SFI_PARAM_DEFAULT);
  /* tempo */
  Real  bpm         = ("Beats per minute", NULL, 120, BSE_MIN_BPM, BSE_MAX_BPM, 10, SFI_PARAM_DEFAULT);
  /* signature */
  Int   nominator   = ("Nominator", "Number of notes per measure", 4, 1, 256, 2, SFI_PARAM_DEFAULT);
  Int   denominator = ("Denominator", "Type of notes counted per measure", 4, 1, 256, 2, SFI_PARAM_DEFAULT);
  /* sequencer timing */
  Int   tpqn        = ("Ticks per quarter note", NULL, 384, 1, G_MAXINT, 12, SFI_PARAM_DEFAULT);
  Int   tpt         = ("Ticks per tact", NULL, 384, 1, G_MAXINT, 12, SFI_PARAM_DEFAULT);
};

record SampleFileInfo {
  String        file    = ("Filename", NULL, NULL, SFI_PARAM_DEFAULT);
  Int           size    = ("File Size", NULL, 0, 0, G_MAXINT, 0, SFI_PARAM_DEFAULT);
  Num           mtime   = ("Modification Time", NULL, 0, 0, SFI_MAXNUM, 0, SFI_PARAM_DEFAULT);
  String        loader  = ("Loader", NULL, NULL, SFI_PARAM_DEFAULT);
  StringSeq     waves   = (NULL, NULL, SFI_PARAM_DEFAULT);
  Int           error   = ("BseErrorType", NULL, 0, 0, G_MAXINT, 0, SFI_PARAM_DEFAULT); // FIXME: use BseErrorType here
};

/* BSE Global Config */
record GConfig {
  group "Search Paths" {
    String sample_path     = ("Sample Path",
                              "Search path of directories, seperated by \"" G_SEARCHPATH_SEPARATOR_S "\", used to "
                              "find audio samples. ", BSE_PATH_USER_DATA("/samples"), STANDARD ":searchpath");
    String effect_path     = ("Effect Path",
                              "Search path of directories, seperated by \"" G_SEARCHPATH_SEPARATOR_S "\", used to "
                              "find BSE effect files. ", BSE_PATH_USER_DATA("/effects"), STANDARD ":searchpath");
    String instrument_path = ("Instrument Path",
                              "Search path of directories, seperated by \"" G_SEARCHPATH_SEPARATOR_S "\", used to "
                              "find BSE instrument files. ", BSE_PATH_USER_DATA("/instruments"), STANDARD ":searchpath");
    String script_path     = ("Script Path",
                              "Search path of directories, seperated by \"" G_SEARCHPATH_SEPARATOR_S "\", used to "
                              "find BSE scheme scripts. ", BSE_PATH_USER_DATA("/scripts"), STANDARD ":searchpath");
    String plugin_path     = ("Plugin Path",
                              "Search path of directories, seperated by \"" G_SEARCHPATH_SEPARATOR_S "\", used to "
                              "find BSE plugins. This path is searched for in addition to the standard BSE plugin "
                              "location on this system.",
                              NULL, STANDARD ":searchpath");
    String ladspa_path     = ("LADSPA Path",
                              "Search path of directories, seperated by \"" G_SEARCHPATH_SEPARATOR_S "\", used to "
                              "find LADSPA plugins. This path is searched for in addition to the standard LADSPA "
                              "location on this system. LADSPA is the Linux Audio Developer's Simple Plugin API, "
                              "more informations about LADSPA plugins can be found at http://www.ladspa.org/.",
                              NULL, STANDARD ":searchpath");
  };
  group "Synthesis Settings" {
    Int  synth_block_size  = ("Synth Block Size",
                              "Synthesis buffer size, smaller values may reduce latency but "
                              "increase CPU overhead",
                              256, 4, 4096, 4,
                              SFI_PARAM_DEFAULT ":scale");
    Int  synth_mixing_freq = ("Synth Mixing Frequency",
                              "Synthesis mixing frequency, common values are: 22050, 44100, 48000",
                              44100, 8000, 192000, 0, SFI_PARAM_DEFAULT);
  };
  group "MIDI" {
    Bool invert_sustain = ("Invert Sustain Pedal",
                           "Invert the state of sustain (damper) pedal so on/off meanings are reversed",
                           FALSE, SFI_PARAM_DEFAULT);
  };
  group "Stepping Rates" {
    Real step_volume_dB = ("Volume [dB] Steps", "Step width for volume in decibell",
                           0.1, 0.001, 5, 0.01, SFI_PARAM_DEFAULT);
    Int  step_bpm       = ("BPM Steps", "Step width for beats per minute",
                           10, 1, 50, 1, SFI_PARAM_DEFAULT);
  };
};

};

/* vim:set ts=8 sts=2 sw=2: */
