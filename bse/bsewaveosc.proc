// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
#include <bse/bseplugin.hh>
#include <bse/bsewaveosc.hh>
#include <bse/bseprocedure.hh>
#include <bse/bseeditablesample.hh>
#include "bsecxxplugin.hh"
#include "bsebuiltin_externs.cc"

AUTHORS	= "Tim Janik <timj@gtk.org>";
LICENSE = "GNU Lesser General Public License";


PROCEDURE (bse-wave-osc-mass-seek-perc, "Seek Wave Oscillators") {
  HELP	= "Seek a list of wave oscillators to a pcm position given in percentage. The oscillators will seek to the given position syncronously.";
  IN    = bse_param_spec_boxed ("wosc-seq", "Wave Oscilators", NULL, BSE_TYPE_IT3M_SEQ, SFI_PARAM_STANDARD); // FIXME: using BseIt3mSeq because BseWaveOscSeq requires idl+C++
  IN	= sfi_pspec_real ("pos_perc", NULL, NULL,
			  0, 0, 100, 1,
			  SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseIt3mSeq *iseq = (BseIt3mSeq*) bse_value_get_boxed (in_values++);
  gfloat      pos  = sfi_value_get_real (in_values++);
  guint i, n = iseq ? iseq->n_items : 0;
  BseWaveOsc **woscs = (BseWaveOsc**) g_alloca (sizeof (BseWaveOsc*) * n);
  for (i = 0; i < n; i++)
    if (!BSE_IS_WAVE_OSC (iseq->items[i]))      /* check parameters */
      return Bse::Error::PROC_PARAM_INVAL;
    else
      woscs[i] = (BseWaveOsc*) iseq->items[i];
  if (n)
    bse_wave_osc_mass_seek (n, woscs, pos);

  return Bse::Error::NONE;
}
