// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
#include <bse/bseplugin.hh>
#include <bse/bseprocedure.hh>
#include <bse/bseeditablesample.hh>
#include <bse/gsldatahandle.hh>
#include "bsecxxplugin.hh"
#include "bsebuiltin_externs.cc"


AUTHORS	= "Tim Janik <timj@gtk.org>";
LICENSE = "GNU Lesser General Public License";
METHOD (BseEditableSample, open) {
  HELP	= ("Open the sample for reading.");
  IN	= bse_param_spec_object ("esample", "Editable Sample", NULL,
				 BSE_TYPE_EDITABLE_SAMPLE, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", "Error", NULL,
				BSE_TYPE_ERROR_TYPE, Bse::Error::NONE,
				SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseEditableSample *esample = (BseEditableSample*) bse_value_get_object (in_values++);
  Bse::ErrorType error;

  /* check parameters */
  if (!BSE_IS_EDITABLE_SAMPLE (esample))
    return Bse::Error::PROC_PARAM_INVAL;

  /* action */
  if (!esample->wchunk)
    error = Bse::Error::WAVE_NOT_FOUND;
  else if (esample->open_count)
    {
      esample->open_count++;
      error = Bse::Error::NONE;
    }
  else
    {
      error = gsl_wave_chunk_open (esample->wchunk);
      if (!error)
	esample->open_count++;
    }

  /* set output parameters */
  g_value_set_enum (out_values++, error);

  return Bse::Error::NONE;
}

METHOD (BseEditableSample, close) {
  HELP	= ("Close an opened sample.");
  IN	= bse_param_spec_object ("esample", "Editable Sample", NULL,
				 BSE_TYPE_EDITABLE_SAMPLE, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseEditableSample *esample = (BseEditableSample*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_EDITABLE_SAMPLE (esample) || !esample->wchunk || !esample->open_count)
    return Bse::Error::PROC_PARAM_INVAL;

  /* action */
  esample->open_count--;
  if (!esample->open_count)
    gsl_wave_chunk_close (esample->wchunk);

  return Bse::Error::NONE;
}

METHOD (BseEditableSample, get-length) {
  HELP	= ("Return the number of values in the sample.");
  IN	= bse_param_spec_object ("esample", "Editable Sample", NULL,
				 BSE_TYPE_EDITABLE_SAMPLE, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_int ("length", NULL, "Number of values",
			 1, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseEditableSample *esample = (BseEditableSample*) bse_value_get_object (in_values++);
  GslDataCache *dcache = NULL;

  /* check parameters */
  if (!BSE_IS_EDITABLE_SAMPLE (esample))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  if (BSE_EDITABLE_SAMPLE_OPENED (esample) && esample->wchunk)
    dcache = esample->wchunk->dcache;
  sfi_value_set_int (out_values++, dcache ? gsl_data_handle_length (dcache->dhandle) : 0);

  return Bse::Error::NONE;
}

METHOD (BseEditableSample, get-n-channels) {
  HELP	= ("Return the number of channels in the sample.");
  IN	= bse_param_spec_object ("esample", "Editable Sample", NULL,
				 BSE_TYPE_EDITABLE_SAMPLE, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_int ("n-channels", NULL, "Number of channels",
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseEditableSample *esample = (BseEditableSample*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_EDITABLE_SAMPLE (esample))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_int (out_values++, esample->wchunk ? esample->wchunk->n_channels : 1);

  return Bse::Error::NONE;
}

METHOD (BseEditableSample, get-osc-freq) {
  HELP	= ("Return the oscillator frequency for the sample.");
  IN	= bse_param_spec_object ("esample", "Editable Sample", NULL,
				 BSE_TYPE_EDITABLE_SAMPLE, SFI_PARAM_STANDARD);
  OUT	= bse_param_spec_freq_simple ("osc-freq", NULL, "Oscillator Frequency",
				      SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseEditableSample *esample = (BseEditableSample*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_EDITABLE_SAMPLE (esample))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_real (out_values++, esample->wchunk ? esample->wchunk->osc_freq : BSE_KAMMER_FREQUENCY);

  return Bse::Error::NONE;
}

METHOD (BseEditableSample, collect-stats) {
  HELP	= ("Collect statistics from sample blocks as (minimum, maximum) pairs.");
  IN	= bse_param_spec_object ("esample", "Editable Sample", NULL,
				 BSE_TYPE_EDITABLE_SAMPLE, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("voffset", NULL, "Offset of first stat block",
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_real ("offset_scale", NULL, "Factor to scale voffset increments with",
			  0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("block_size", NULL, "Block size to compute stat pairs from",
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("stepping", NULL, "Stepping within a stat block",
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("max_pairs", NULL, "Maximum number of (min, max) pairs to collect",
			 1, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("sample_block", NULL, "Block of samples", BSE_TYPE_FLOAT_SEQ, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseEditableSample *esample    = (BseEditableSample*) bse_value_get_object (in_values++);
  guint              voffset    = sfi_value_get_int (in_values++);
  double             offs_scale = g_value_get_double (in_values++);
  guint              block_size = sfi_value_get_int (in_values++);
  guint              stepping   = sfi_value_get_int (in_values++);
  guint              max_pairs  = sfi_value_get_int (in_values++);
  GslDataCache *dcache = NULL;
  BseFloatSeq *fseq;
  /* check parameters */
  if (!BSE_IS_EDITABLE_SAMPLE (esample) || stepping < 1)
    return Bse::Error::PROC_PARAM_INVAL;
  if (BSE_EDITABLE_SAMPLE_OPENED (esample) && esample->wchunk)
    dcache = esample->wchunk->dcache;
  if (!dcache || voffset + block_size > gsl_data_handle_length (dcache->dhandle))
    {
      fseq = bse_float_seq_new ();
      bse_float_seq_resize (fseq, max_pairs * 2);
    }
  else
    {
      GslDataCacheNode *dnode = gsl_data_cache_ref_node (dcache, voffset, GSL_DATA_CACHE_DEMAND_LOAD);
      guint j, dnode_length = dcache->node_size;
      fseq = bse_float_seq_new();
      bse_float_seq_resize (fseq, max_pairs * 2);
      for (j = 0; j < max_pairs; j++)
	{
	  guint i, cur_offset = j * offs_scale;
	  float min = +1, max = -1;
	  /* keep alignment across offset scaling */
	  cur_offset /= stepping;
	  cur_offset = voffset + cur_offset * stepping;
	  /* collect stats for one block */
	  for (i = cur_offset; i < cur_offset + block_size; i += stepping)
	    {
	      guint pos;
	      if (i < dnode->offset || i >= dnode->offset + dnode_length)
		{
		  gsl_data_cache_unref_node (dcache, dnode);
		  /* demand_load the first block only */
		  dnode = gsl_data_cache_ref_node (dcache, i, j == 0 ? GSL_DATA_CACHE_DEMAND_LOAD : GSL_DATA_CACHE_PEEK);
		  if (!dnode)
		    goto break_loops;
		}
	      pos = i - dnode->offset;
	      min = MIN (min, dnode->data[pos]);
	      max = MAX (max, dnode->data[pos]);
	    }
	  fseq->values[j * 2] = min;
	  fseq->values[j * 2 + 1] = max;
	}
      gsl_data_cache_unref_node (dcache, dnode);
    break_loops:
      bse_float_seq_resize (fseq, j * 2);
    }
  /* set output parameters */
  g_value_take_boxed (out_values++, fseq);
  return Bse::Error::NONE;
}
