/* SFI - Synthesis Fusion Kit Interface Definition Language     -*-mode: c++;-*-
 * Copyright (C) 2002-2004 Tim Janik
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */

namespace Bse {
using namespace Sfi;

/* param options */
Const READWRITE       = ":r:w:";
Const STORAGE         = ":r:w:S:";
Const STANDARD        = ":r:w:S:G:";
Const STANDARD_RDONLY = ":r:w:S:G:ro:";
Const GUI             = ":r:w:G:";
Const GUI_RDONLY      = ":r:w:G:ro:";
Const GUI_READABLE    = ":r:G:";
/* extra options */
Const SKIP_DEFAULT    = ":skip-default:";
Const SKIP_UNDO       = ":skip-undo:";
Const DEFAULT = STANDARD; // FIXME: remove
/* numeric constants */
Const MAXINT = +2147483647;
Const MININT = -2147483648;
Const MAXNUM = +9223372036854775807;
Const MINNUM = -9223372036854775808;
Const MINDB = -96; /* 32bit:-192 24bit:-144 16bit:-96 */
/* note numbers */
ConstIdent NOTE_C   = SFI_NOTE_C;
ConstIdent NOTE_Cis = SFI_NOTE_Cis;
ConstIdent NOTE_Des = SFI_NOTE_Des;
ConstIdent NOTE_D   = SFI_NOTE_D;
ConstIdent NOTE_Dis = SFI_NOTE_Dis;
ConstIdent NOTE_Es  = SFI_NOTE_Es;
ConstIdent NOTE_E   = SFI_NOTE_E;
ConstIdent NOTE_F   = SFI_NOTE_F;
ConstIdent NOTE_Fis = SFI_NOTE_Fis;
ConstIdent NOTE_Ges = SFI_NOTE_Ges;
ConstIdent NOTE_G   = SFI_NOTE_G;
ConstIdent NOTE_Gis = SFI_NOTE_Gis;
ConstIdent NOTE_As  = SFI_NOTE_As;
ConstIdent NOTE_A   = SFI_NOTE_A;
ConstIdent NOTE_Ais = SFI_NOTE_Ais;
ConstIdent NOTE_Bes = SFI_NOTE_Bes;
ConstIdent NOTE_B   = SFI_NOTE_B;

/* standard sequences */
sequence IntSeq {
  Int    ints;
};
sequence TypeSeq {
  String types;
};

sequence StringSeq {
  String strings;
};


/* various MIDI specific definitions */
choice MidiSignalType {
  /* special cased signals */
  MIDI_SIGNAL_PROGRAM                         = (1,   _("Program Change")),     /* 7bit */
  MIDI_SIGNAL_PRESSURE                        = (2,   _("Channel Pressure")),   /* 7bit */
  MIDI_SIGNAL_PITCH_BEND                      = (3,   _("Pitch Bend")),         /* 14bit */
  MIDI_SIGNAL_VELOCITY                        = (4,   _("Note Velocity")),
  MIDI_SIGNAL_FINE_TUNE                       = (5,   _("Note Fine Tune")),
  /* 14bit, continuous controls */
  MIDI_SIGNAL_CONTINUOUS_0                    = (64,  _("Bank Select")),
  MIDI_SIGNAL_CONTINUOUS_1                    = (65,  _("Modulation Depth")),
  MIDI_SIGNAL_CONTINUOUS_2                    = (66,  _("Breath Control")),
  MIDI_SIGNAL_CONTINUOUS_3                    = (67,  _("Continuous 3")),
  MIDI_SIGNAL_CONTINUOUS_4                    = (68,  _("Foot Controller")),
  MIDI_SIGNAL_CONTINUOUS_5                    = (69,  _("Portamento Time")),
  MIDI_SIGNAL_CONTINUOUS_6                    = (70,  _("Data Entry")),
  MIDI_SIGNAL_CONTINUOUS_7                    = (71,  _("Volume")),
  MIDI_SIGNAL_CONTINUOUS_8                    = (72,  _("Balance")),
  MIDI_SIGNAL_CONTINUOUS_9                    = (73,  _("Continuous 9")),
  MIDI_SIGNAL_CONTINUOUS_10                   = (74,  _("Panorama")),
  MIDI_SIGNAL_CONTINUOUS_11                   = (75,  _("Expression")),
  MIDI_SIGNAL_CONTINUOUS_12                   = (76,  _("Effect Control 1")),
  MIDI_SIGNAL_CONTINUOUS_13                   = (77,  _("Effect Control 2")),
  MIDI_SIGNAL_CONTINUOUS_14                   = (78,  _("Continuous 14")),
  MIDI_SIGNAL_CONTINUOUS_15                   = (79,  _("Continuous 15")),
  MIDI_SIGNAL_CONTINUOUS_16                   = (80,  _("General Purpose Controller 1")),
  MIDI_SIGNAL_CONTINUOUS_17                   = (81,  _("General Purpose Controller 2")),
  MIDI_SIGNAL_CONTINUOUS_18                   = (82,  _("General Purpose Controller 3")),
  MIDI_SIGNAL_CONTINUOUS_19                   = (83,  _("General Purpose Controller 4")),
  MIDI_SIGNAL_CONTINUOUS_20                   = (84,  _("Continuous 20")),
  MIDI_SIGNAL_CONTINUOUS_21                   = (85,  _("Continuous 21")),
  MIDI_SIGNAL_CONTINUOUS_22                   = (86,  _("Continuous 22")),
  MIDI_SIGNAL_CONTINUOUS_23                   = (87,  _("Continuous 23")),
  MIDI_SIGNAL_CONTINUOUS_24                   = (88,  _("Continuous 24")),
  MIDI_SIGNAL_CONTINUOUS_25                   = (89,  _("Continuous 25")),
  MIDI_SIGNAL_CONTINUOUS_26                   = (90,  _("Continuous 26")),
  MIDI_SIGNAL_CONTINUOUS_27                   = (91,  _("Continuous 27")),
  MIDI_SIGNAL_CONTINUOUS_28                   = (92,  _("Continuous 28")),
  MIDI_SIGNAL_CONTINUOUS_29                   = (93,  _("Continuous 29")),
  MIDI_SIGNAL_CONTINUOUS_30                   = (94,  _("Continuous 30")),
  MIDI_SIGNAL_CONTINUOUS_31                   = (95,  _("Continuous 31")),
  /* 14bit, special cased signals */
  MIDI_SIGNAL_CONSTANT_HIGH                   = (96,  _("Constant HIGH")),
  MIDI_SIGNAL_CONSTANT_CENTER                 = (97,  _("Constant CENTER")),
  MIDI_SIGNAL_CONSTANT_LOW                    = (98,  _("Constant LOW")),
  MIDI_SIGNAL_CONSTANT_NEGATIVE_CENTER        = (99,  _("Constant Negative CENTER")),
  MIDI_SIGNAL_CONSTANT_NEGATIVE_HIGH          = (100, _("Constant Negative HIGH")),
  MIDI_SIGNAL_PARAMETER                       = (101, _("Registered Parameter")),
  MIDI_SIGNAL_NON_PARAMETER                   = (102, _("Non-Registered Parameter")),
  /* 7bit, literal channel controls, MSB values */
  MIDI_SIGNAL_CONTROL_0                       = (128, _("Control 0 Bank Select MSB")),
  MIDI_SIGNAL_CONTROL_1                       = (129, _("Control 1 Modulation Depth MSB")),
  MIDI_SIGNAL_CONTROL_2                       = (130, _("Control 2 Breath Control MSB")),
  MIDI_SIGNAL_CONTROL_3                       = (131, _("control-3")),
  MIDI_SIGNAL_CONTROL_4                       = (132, _("Control 4 Foot Controller MSB")),
  MIDI_SIGNAL_CONTROL_5                       = (133, _("Control 5 Portamento Time MSB")),
  MIDI_SIGNAL_CONTROL_6                       = (134, _("Control 6 Data Entry MSB")),
  MIDI_SIGNAL_CONTROL_7                       = (135, _("Control 7 Volume MSB")),
  MIDI_SIGNAL_CONTROL_8                       = (136, _("Control 8 Balance MSB")),
  MIDI_SIGNAL_CONTROL_9                       = (137, _("control-9")),
  MIDI_SIGNAL_CONTROL_10                      = (138, _("Control 10 Panorama MSB")),
  MIDI_SIGNAL_CONTROL_11                      = (139, _("Control 11 Expression MSB")),
  MIDI_SIGNAL_CONTROL_12                      = (140, _("Control 12 Effect Control 1 MSB")),
  MIDI_SIGNAL_CONTROL_13                      = (141, _("Control 13 Effect Control 2 MSB")),
  MIDI_SIGNAL_CONTROL_14                      = (142, _("control-14")),
  MIDI_SIGNAL_CONTROL_15                      = (143, _("control-15")),
  MIDI_SIGNAL_CONTROL_16                      = (144, _("Control 16 General Purpose Controller 1 MSB")),
  MIDI_SIGNAL_CONTROL_17                      = (145, _("Control 17 General Purpose Controller 2 MSB")),
  MIDI_SIGNAL_CONTROL_18                      = (146, _("Control 18 General Purpose Controller 3 MSB")),
  MIDI_SIGNAL_CONTROL_19                      = (147, _("Control 19 General Purpose Controller 4 MSB")),
  MIDI_SIGNAL_CONTROL_20                      = (148, _("control-20")),
  MIDI_SIGNAL_CONTROL_21                      = (149, _("control-21")),
  MIDI_SIGNAL_CONTROL_22                      = (150, _("control-22")),
  MIDI_SIGNAL_CONTROL_23                      = (151, _("control-23")),
  MIDI_SIGNAL_CONTROL_24                      = (152, _("control-24")),
  MIDI_SIGNAL_CONTROL_25                      = (153, _("control-25")),
  MIDI_SIGNAL_CONTROL_26                      = (154, _("control-26")),
  MIDI_SIGNAL_CONTROL_27                      = (155, _("control-27")),
  MIDI_SIGNAL_CONTROL_28                      = (156, _("control-28")),
  MIDI_SIGNAL_CONTROL_29                      = (157, _("control-29")),
  MIDI_SIGNAL_CONTROL_30                      = (158, _("control-30")),
  MIDI_SIGNAL_CONTROL_31                      = (159, _("control-31")),
  /* 7bit, literal channel controls, LSB values */
  MIDI_SIGNAL_CONTROL_32                      = (160, _("Control 32 Bank Select LSB")),
  MIDI_SIGNAL_CONTROL_33                      = (161, _("Control 33 Modulation Depth LSB")),
  MIDI_SIGNAL_CONTROL_34                      = (162, _("Control 34 Breath Control LSB")),
  MIDI_SIGNAL_CONTROL_35                      = (163, _("control-35")),
  MIDI_SIGNAL_CONTROL_36                      = (164, _("Control 36 Foot Controller LSB")),
  MIDI_SIGNAL_CONTROL_37                      = (165, _("Control 37 Portamento Time LSB")),
  MIDI_SIGNAL_CONTROL_38                      = (166, _("Control 38 Data Entry LSB")),
  MIDI_SIGNAL_CONTROL_39                      = (167, _("Control 39 Volume LSB")),
  MIDI_SIGNAL_CONTROL_40                      = (168, _("Control 40 Balance LSB")),
  MIDI_SIGNAL_CONTROL_41                      = (169, _("control-41")),
  MIDI_SIGNAL_CONTROL_42                      = (170, _("Control 42 Panorama LSB")),
  MIDI_SIGNAL_CONTROL_43                      = (171, _("Control 43 Expression LSB")),
  MIDI_SIGNAL_CONTROL_44                      = (172, _("Control 44 Effect Control 1 LSB")),
  MIDI_SIGNAL_CONTROL_45                      = (173, _("Control 45 Effect Control 2 LSB")),
  MIDI_SIGNAL_CONTROL_46                      = (174, _("control-46")),
  MIDI_SIGNAL_CONTROL_47                      = (175, _("control-47")),
  MIDI_SIGNAL_CONTROL_48                      = (176, _("Control 48 General Purpose Controller 1 LSB")),
  MIDI_SIGNAL_CONTROL_49                      = (177, _("Control 49 General Purpose Controller 2 LSB")),
  MIDI_SIGNAL_CONTROL_50                      = (178, _("Control 50 General Purpose Controller 3 LSB")),
  MIDI_SIGNAL_CONTROL_51                      = (179, _("Control 51 General Purpose Controller 4 LSB")),
  MIDI_SIGNAL_CONTROL_52                      = (180, _("control-52")),
  MIDI_SIGNAL_CONTROL_53                      = (181, _("control-53")),
  MIDI_SIGNAL_CONTROL_54                      = (182, _("control-54")),
  MIDI_SIGNAL_CONTROL_55                      = (183, _("control-55")),
  MIDI_SIGNAL_CONTROL_56                      = (184, _("control-56")),
  MIDI_SIGNAL_CONTROL_57                      = (185, _("control-57")),
  MIDI_SIGNAL_CONTROL_58                      = (186, _("control-58")),
  MIDI_SIGNAL_CONTROL_59                      = (187, _("control-59")),
  MIDI_SIGNAL_CONTROL_60                      = (188, _("control-60")),
  MIDI_SIGNAL_CONTROL_61                      = (189, _("control-61")),
  MIDI_SIGNAL_CONTROL_62                      = (190, _("control-62")),
  MIDI_SIGNAL_CONTROL_63                      = (191, _("control-63")),
  /* 7bit, literal channel controls */
  MIDI_SIGNAL_CONTROL_64                      = (192, _("Control 64 Damper Pedal Switch (Sustain)")),
  MIDI_SIGNAL_CONTROL_65                      = (193, _("Control 65 Portamento Switch")),
  MIDI_SIGNAL_CONTROL_66                      = (194, _("Control 66 Sustenuto Switch")),
  MIDI_SIGNAL_CONTROL_67                      = (195, _("Control 67 Soft Switch")),
  MIDI_SIGNAL_CONTROL_68                      = (196, _("Control 68 Legato Pedal Switch")),
  MIDI_SIGNAL_CONTROL_69                      = (197, _("Control 69 Hold Pedal Switch")),
  MIDI_SIGNAL_CONTROL_70                      = (198, _("Control 70 Sound Variation")),
  MIDI_SIGNAL_CONTROL_71                      = (199, _("Control 71 Filter Resonance (Timbre)")),
  MIDI_SIGNAL_CONTROL_72                      = (200, _("Control 72 Sound Release Time")),
  MIDI_SIGNAL_CONTROL_73                      = (201, _("Control 73 Sound Attack Time")),
  MIDI_SIGNAL_CONTROL_74                      = (202, _("Control 74 Sound Brightness")),
  MIDI_SIGNAL_CONTROL_75                      = (203, _("Control 75 Sound Decay Time")),
  MIDI_SIGNAL_CONTROL_76                      = (204, _("Control 76 Vibrato Rate")),
  MIDI_SIGNAL_CONTROL_77                      = (205, _("Control 77 Vibrato Depth")),
  MIDI_SIGNAL_CONTROL_78                      = (206, _("Control 78 Vibrato Delay")),
  MIDI_SIGNAL_CONTROL_79                      = (207, _("Control 79 Sound Control 10")),
  MIDI_SIGNAL_CONTROL_80                      = (208, _("Control 80 General Purpose Switch 5")),
  MIDI_SIGNAL_CONTROL_81                      = (209, _("Control 81 General Purpose Switch 6")),
  MIDI_SIGNAL_CONTROL_82                      = (210, _("Control 82 General Purpose Switch 7")),
  MIDI_SIGNAL_CONTROL_83                      = (211, _("Control 83 General Purpose Switch 8")),
  MIDI_SIGNAL_CONTROL_84                      = (212, _("Control 84 Portamento Control (Note)")),
  MIDI_SIGNAL_CONTROL_85                      = (213, _("control-85")),
  MIDI_SIGNAL_CONTROL_86                      = (214, _("control-86")),
  MIDI_SIGNAL_CONTROL_87                      = (215, _("control-87")),
  MIDI_SIGNAL_CONTROL_88                      = (216, _("control-88")),
  MIDI_SIGNAL_CONTROL_89                      = (217, _("control-89")),
  MIDI_SIGNAL_CONTROL_90                      = (218, _("control-90")),
  MIDI_SIGNAL_CONTROL_91                      = (219, _("Control 91 Reverb Depth")),
  MIDI_SIGNAL_CONTROL_92                      = (220, _("Control 92 Tremolo Depth")),
  MIDI_SIGNAL_CONTROL_93                      = (221, _("Control 93 Chorus Depth")),
  MIDI_SIGNAL_CONTROL_94                      = (222, _("Control 93 Detune Depth")),
  MIDI_SIGNAL_CONTROL_95                      = (223, _("Control 95 Phase Depth")),
  MIDI_SIGNAL_CONTROL_96                      = (224, _("Control 96 Data Increment Trigger")),
  MIDI_SIGNAL_CONTROL_97                      = (225, _("Control 97 Data Decrement Trigger")),
  MIDI_SIGNAL_CONTROL_98                      = (226, _("Control 98 Non-Registered Parameter MSB")),
  MIDI_SIGNAL_CONTROL_99                      = (227, _("Control 99 Non-Registered Parameter LSB")),
  MIDI_SIGNAL_CONTROL_100                     = (228, _("Control 100 Registered Parameter MSB")),
  MIDI_SIGNAL_CONTROL_101                     = (229, _("Control 101 Registered Parameter LSB")),
  MIDI_SIGNAL_CONTROL_102                     = (230, _("control-102")),
  MIDI_SIGNAL_CONTROL_103                     = (231, _("control-103")),
  MIDI_SIGNAL_CONTROL_104                     = (232, _("control-104")),
  MIDI_SIGNAL_CONTROL_105                     = (233, _("control-105")),
  MIDI_SIGNAL_CONTROL_106                     = (234, _("control-106")),
  MIDI_SIGNAL_CONTROL_107                     = (235, _("control-107")),
  MIDI_SIGNAL_CONTROL_108                     = (236, _("control-108")),
  MIDI_SIGNAL_CONTROL_109                     = (237, _("control-109")),
  MIDI_SIGNAL_CONTROL_110                     = (238, _("control-110")),
  MIDI_SIGNAL_CONTROL_111                     = (239, _("control-111")),
  MIDI_SIGNAL_CONTROL_112                     = (240, _("control-112")),
  MIDI_SIGNAL_CONTROL_113                     = (241, _("control-113")),
  MIDI_SIGNAL_CONTROL_114                     = (242, _("control-114")),
  MIDI_SIGNAL_CONTROL_115                     = (243, _("control-115")),
  MIDI_SIGNAL_CONTROL_116                     = (244, _("control-116")),
  MIDI_SIGNAL_CONTROL_117                     = (245, _("control-117")),
  MIDI_SIGNAL_CONTROL_118                     = (246, _("control-118")),
  MIDI_SIGNAL_CONTROL_119                     = (247, _("control-119")),
  MIDI_SIGNAL_CONTROL_120                     = (248, _("Control 120 All Sound Off ITrigger")),
  MIDI_SIGNAL_CONTROL_121                     = (249, _("Control 121 All Controllers Off ITrigger")),
  MIDI_SIGNAL_CONTROL_122                     = (250, _("Control 122 Local Control Switch")),
  MIDI_SIGNAL_CONTROL_123                     = (251, _("Control 123 All Notes Off ITrigger")),
  MIDI_SIGNAL_CONTROL_124                     = (252, _("Control 124 Omni Mode Off ITrigger")),
  MIDI_SIGNAL_CONTROL_125                     = (253, _("Control 125 Omni Mode On ITrigger")),
  MIDI_SIGNAL_CONTROL_126                     = (254, _("Control 126 Monophonic Voices Mode")),
  MIDI_SIGNAL_CONTROL_127                     = (255, _("Control 127 Polyphonic Mode On ITrigger")),
};

choice MidiControlType {
  /* special cased signals */
  MIDI_CONTROL_NONE                           = (Neutral, _("None")),
  /* 14bit, continuous controls */
  MIDI_CONTROL_CONTINUOUS_0                    = (64,  _("Bank Select"), _("Continuous MIDI Control #1 - Bank Select")),
  MIDI_CONTROL_CONTINUOUS_1                    = (65,  _("Modulation Depth")),
  MIDI_CONTROL_CONTINUOUS_2                    = (66,  _("Breath Control")),
  MIDI_CONTROL_CONTINUOUS_3                    = (67,  _("Continuous 3")),
  MIDI_CONTROL_CONTINUOUS_4                    = (68,  _("Foot Controller")),
  MIDI_CONTROL_CONTINUOUS_5                    = (69,  _("Portamento Time")),
  MIDI_CONTROL_CONTINUOUS_6                    = (70,  _("Data Entry")),
  MIDI_CONTROL_CONTINUOUS_7                    = (71,  _("Volume")),
  MIDI_CONTROL_CONTINUOUS_8                    = (72,  _("Balance")),
  MIDI_CONTROL_CONTINUOUS_9                    = (73,  _("Continuous 9")),
  MIDI_CONTROL_CONTINUOUS_10                   = (74,  _("Panorama")),
  MIDI_CONTROL_CONTINUOUS_11                   = (75,  _("Expression")),
  MIDI_CONTROL_CONTINUOUS_12                   = (76,  _("Effect Control 1")),
  MIDI_CONTROL_CONTINUOUS_13                   = (77,  _("Effect Control 2")),
  MIDI_CONTROL_CONTINUOUS_14                   = (78,  _("Continuous 14")),
  MIDI_CONTROL_CONTINUOUS_15                   = (79,  _("Continuous 15")),
  MIDI_CONTROL_CONTINUOUS_16                   = (80,  _("General Purpose Controller 1")),
  MIDI_CONTROL_CONTINUOUS_17                   = (81,  _("General Purpose Controller 2")),
  MIDI_CONTROL_CONTINUOUS_18                   = (82,  _("General Purpose Controller 3")),
  MIDI_CONTROL_CONTINUOUS_19                   = (83,  _("General Purpose Controller 4")),
  MIDI_CONTROL_CONTINUOUS_20                   = (84,  _("Continuous 20")),
  MIDI_CONTROL_CONTINUOUS_21                   = (85,  _("Continuous 21")),
  MIDI_CONTROL_CONTINUOUS_22                   = (86,  _("Continuous 22")),
  MIDI_CONTROL_CONTINUOUS_23                   = (87,  _("Continuous 23")),
  MIDI_CONTROL_CONTINUOUS_24                   = (88,  _("Continuous 24")),
  MIDI_CONTROL_CONTINUOUS_25                   = (89,  _("Continuous 25")),
  MIDI_CONTROL_CONTINUOUS_26                   = (90,  _("Continuous 26")),
  MIDI_CONTROL_CONTINUOUS_27                   = (91,  _("Continuous 27")),
  MIDI_CONTROL_CONTINUOUS_28                   = (92,  _("Continuous 28")),
  MIDI_CONTROL_CONTINUOUS_29                   = (93,  _("Continuous 29")),
  MIDI_CONTROL_CONTINUOUS_30                   = (94,  _("Continuous 30")),
  MIDI_CONTROL_CONTINUOUS_31                   = (95,  _("Continuous 31")),
  /* 7bit, literal channel controls, MSB values */
  MIDI_CONTROL_0                               = (128, _("Control 0 Bank Select MSB")),
  MIDI_CONTROL_1                               = (129, _("Control 1 Modulation Depth MSB")),
  MIDI_CONTROL_2                               = (130, _("Control 2 Breath Control MSB")),
  MIDI_CONTROL_3                               = (131, _("control-3")),
  MIDI_CONTROL_4                               = (132, _("Control 4 Foot Controller MSB")),
  MIDI_CONTROL_5                               = (133, _("Control 5 Portamento Time MSB")),
  MIDI_CONTROL_6                               = (134, _("Control 6 Data Entry MSB")),
  MIDI_CONTROL_7                               = (135, _("Control 7 Volume MSB")),
  MIDI_CONTROL_8                               = (136, _("Control 8 Balance MSB")),
  MIDI_CONTROL_9                               = (137, _("control-9")),
  MIDI_CONTROL_10                              = (138, _("Control 10 Panorama MSB")),
  MIDI_CONTROL_11                              = (139, _("Control 11 Expression MSB")),
  MIDI_CONTROL_12                              = (140, _("Control 12 Effect Control 1 MSB")),
  MIDI_CONTROL_13                              = (141, _("Control 13 Effect Control 2 MSB")),
  MIDI_CONTROL_14                              = (142, _("control-14")),
  MIDI_CONTROL_15                              = (143, _("control-15")),
  MIDI_CONTROL_16                              = (144, _("Control 16 General Purpose Controller 1 MSB")),
  MIDI_CONTROL_17                              = (145, _("Control 17 General Purpose Controller 2 MSB")),
  MIDI_CONTROL_18                              = (146, _("Control 18 General Purpose Controller 3 MSB")),
  MIDI_CONTROL_19                              = (147, _("Control 19 General Purpose Controller 4 MSB")),
  MIDI_CONTROL_20                              = (148, _("control-20")),
  MIDI_CONTROL_21                              = (149, _("control-21")),
  MIDI_CONTROL_22                              = (150, _("control-22")),
  MIDI_CONTROL_23                              = (151, _("control-23")),
  MIDI_CONTROL_24                              = (152, _("control-24")),
  MIDI_CONTROL_25                              = (153, _("control-25")),
  MIDI_CONTROL_26                              = (154, _("control-26")),
  MIDI_CONTROL_27                              = (155, _("control-27")),
  MIDI_CONTROL_28                              = (156, _("control-28")),
  MIDI_CONTROL_29                              = (157, _("control-29")),
  MIDI_CONTROL_30                              = (158, _("control-30")),
  MIDI_CONTROL_31                              = (159, _("control-31")),
  /* 7bit, literal channel controls, LSB values */
  MIDI_CONTROL_32                              = (160, _("Control 32 Bank Select LSB")),
  MIDI_CONTROL_33                              = (161, _("Control 33 Modulation Depth LSB")),
  MIDI_CONTROL_34                              = (162, _("Control 34 Breath Control LSB")),
  MIDI_CONTROL_35                              = (163, _("control-35")),
  MIDI_CONTROL_36                              = (164, _("Control 36 Foot Controller LSB")),
  MIDI_CONTROL_37                              = (165, _("Control 37 Portamento Time LSB")),
  MIDI_CONTROL_38                              = (166, _("Control 38 Data Entry LSB")),
  MIDI_CONTROL_39                              = (167, _("Control 39 Volume LSB")),
  MIDI_CONTROL_40                              = (168, _("Control 40 Balance LSB")),
  MIDI_CONTROL_41                              = (169, _("control-41")),
  MIDI_CONTROL_42                              = (170, _("Control 42 Panorama LSB")),
  MIDI_CONTROL_43                              = (171, _("Control 43 Expression LSB")),
  MIDI_CONTROL_44                              = (172, _("Control 44 Effect Control 1 LSB")),
  MIDI_CONTROL_45                              = (173, _("Control 45 Effect Control 2 LSB")),
  MIDI_CONTROL_46                              = (174, _("control-46")),
  MIDI_CONTROL_47                              = (175, _("control-47")),
  MIDI_CONTROL_48                              = (176, _("Control 48 General Purpose Controller 1 LSB")),
  MIDI_CONTROL_49                              = (177, _("Control 49 General Purpose Controller 2 LSB")),
  MIDI_CONTROL_50                              = (178, _("Control 50 General Purpose Controller 3 LSB")),
  MIDI_CONTROL_51                              = (179, _("Control 51 General Purpose Controller 4 LSB")),
  MIDI_CONTROL_52                              = (180, _("control-52")),
  MIDI_CONTROL_53                              = (181, _("control-53")),
  MIDI_CONTROL_54                              = (182, _("control-54")),
  MIDI_CONTROL_55                              = (183, _("control-55")),
  MIDI_CONTROL_56                              = (184, _("control-56")),
  MIDI_CONTROL_57                              = (185, _("control-57")),
  MIDI_CONTROL_58                              = (186, _("control-58")),
  MIDI_CONTROL_59                              = (187, _("control-59")),
  MIDI_CONTROL_60                              = (188, _("control-60")),
  MIDI_CONTROL_61                              = (189, _("control-61")),
  MIDI_CONTROL_62                              = (190, _("control-62")),
  MIDI_CONTROL_63                              = (191, _("control-63")),
  /* 7bit, literal channel controls */
  MIDI_CONTROL_64                              = (192, _("Control 64 Damper Pedal Switch (Sustain)")),
  MIDI_CONTROL_65                              = (193, _("Control 65 Portamento Switch")),
  MIDI_CONTROL_66                              = (194, _("Control 66 Sustenuto Switch")),
  MIDI_CONTROL_67                              = (195, _("Control 67 Soft Switch")),
  MIDI_CONTROL_68                              = (196, _("Control 68 Legato Pedal Switch")),
  MIDI_CONTROL_69                              = (197, _("Control 69 Hold Pedal Switch")),
  MIDI_CONTROL_70                              = (198, _("Control 70 Sound Variation")),
  MIDI_CONTROL_71                              = (199, _("Control 71 Filter Resonance (Timbre)")),
  MIDI_CONTROL_72                              = (200, _("Control 72 Sound Release Time")),
  MIDI_CONTROL_73                              = (201, _("Control 73 Sound Attack Time")),
  MIDI_CONTROL_74                              = (202, _("Control 74 Sound Brightness")),
  MIDI_CONTROL_75                              = (203, _("Control 75 Sound Decay Time")),
  MIDI_CONTROL_76                              = (204, _("Control 76 Vibrato Rate")),
  MIDI_CONTROL_77                              = (205, _("Control 77 Vibrato Depth")),
  MIDI_CONTROL_78                              = (206, _("Control 78 Vibrato Delay")),
  MIDI_CONTROL_79                              = (207, _("Control 79 Sound Control 10")),
  MIDI_CONTROL_80                              = (208, _("Control 80 General Purpose Switch 5")),
  MIDI_CONTROL_81                              = (209, _("Control 81 General Purpose Switch 6")),
  MIDI_CONTROL_82                              = (210, _("Control 82 General Purpose Switch 7")),
  MIDI_CONTROL_83                              = (211, _("Control 83 General Purpose Switch 8")),
  MIDI_CONTROL_84                              = (212, _("Control 84 Portamento Control (Note)")),
  MIDI_CONTROL_85                              = (213, _("control-85")),
  MIDI_CONTROL_86                              = (214, _("control-86")),
  MIDI_CONTROL_87                              = (215, _("control-87")),
  MIDI_CONTROL_88                              = (216, _("control-88")),
  MIDI_CONTROL_89                              = (217, _("control-89")),
  MIDI_CONTROL_90                              = (218, _("control-90")),
  MIDI_CONTROL_91                              = (219, _("Control 91 Reverb Depth")),
  MIDI_CONTROL_92                              = (220, _("Control 92 Tremolo Depth")),
  MIDI_CONTROL_93                              = (221, _("Control 93 Chorus Depth")),
  MIDI_CONTROL_94                              = (222, _("Control 93 Detune Depth")),
  MIDI_CONTROL_95                              = (223, _("Control 95 Phase Depth")),
  MIDI_CONTROL_96                              = (224, _("Control 96 Data Increment Trigger")),
  MIDI_CONTROL_97                              = (225, _("Control 97 Data Decrement Trigger")),
  MIDI_CONTROL_98                              = (226, _("Control 98 Non-Registered Parameter MSB")),
  MIDI_CONTROL_99                              = (227, _("Control 99 Non-Registered Parameter LSB")),
  MIDI_CONTROL_100                             = (228, _("Control 100 Registered Parameter MSB")),
  MIDI_CONTROL_101                             = (229, _("Control 101 Registered Parameter LSB")),
  MIDI_CONTROL_102                             = (230, _("control-102")),
  MIDI_CONTROL_103                             = (231, _("control-103")),
  MIDI_CONTROL_104                             = (232, _("control-104")),
  MIDI_CONTROL_105                             = (233, _("control-105")),
  MIDI_CONTROL_106                             = (234, _("control-106")),
  MIDI_CONTROL_107                             = (235, _("control-107")),
  MIDI_CONTROL_108                             = (236, _("control-108")),
  MIDI_CONTROL_109                             = (237, _("control-109")),
  MIDI_CONTROL_110                             = (238, _("control-110")),
  MIDI_CONTROL_111                             = (239, _("control-111")),
  MIDI_CONTROL_112                             = (240, _("control-112")),
  MIDI_CONTROL_113                             = (241, _("control-113")),
  MIDI_CONTROL_114                             = (242, _("control-114")),
  MIDI_CONTROL_115                             = (243, _("control-115")),
  MIDI_CONTROL_116                             = (244, _("control-116")),
  MIDI_CONTROL_117                             = (245, _("control-117")),
  MIDI_CONTROL_118                             = (246, _("control-118")),
  MIDI_CONTROL_119                             = (247, _("control-119")),
  MIDI_CONTROL_120                             = (248, _("Control 120 All Sound Off ITrigger")),
  MIDI_CONTROL_121                             = (249, _("Control 121 All Controllers Off ITrigger")),
  MIDI_CONTROL_122                             = (250, _("Control 122 Local Control Switch")),
  MIDI_CONTROL_123                             = (251, _("Control 123 All Notes Off ITrigger")),
  MIDI_CONTROL_124                             = (252, _("Control 124 Omni Mode Off ITrigger")),
  MIDI_CONTROL_125                             = (253, _("Control 125 Omni Mode On ITrigger")),
  MIDI_CONTROL_126                             = (254, _("Control 126 Monophonic Voices Mode")),
  MIDI_CONTROL_127                             = (255, _("Control 127 Polyphonic Mode On ITrigger")),
};

choice MidiChannelEventType {
  MIDI_EVENT_NONE = Neutral,
  /* channel voice messages */
  MIDI_EVENT_NOTE_OFF,
  MIDI_EVENT_NOTE_ON,
  MIDI_EVENT_KEY_PRESSURE,
  MIDI_EVENT_CONTROL_CHANGE,
  MIDI_EVENT_PROGRAM_CHANGE,
  MIDI_EVENT_CHANNEL_PRESSURE,
  MIDI_EVENT_PITCH_BEND,
  /* system common messages */
  MIDI_EVENT_SYS_EX,
  MIDI_EVENT_SONG_POINTER,
  MIDI_EVENT_SONG_SELECT,
  MIDI_EVENT_TUNE,
  /* system realtime messages */
  MIDI_EVENT_TIMING_CLOCK,
  MIDI_EVENT_SONG_START,
  MIDI_EVENT_SONG_CONTINUE,
  MIDI_EVENT_SONG_STOP,
  MIDI_EVENT_ACTIVE_SENSING,
  MIDI_EVENT_SYSTEM_RESET,
};

record MidiChannelEvent
{
  MidiChannelEventType  event_type;
  Int                   channel         = ("Channel", "", 0, 0, 99, 1, ":readwrite"); // FIXME: MAX_MIDI_CHANNEL
  Num                   tick_stamp      = ("Time Stamp", NULL, 0, 0, SFI_MAXNUM, 0, STANDARD);
  /* note (on/off/pressure) */
  Real                  frequency       = Freq ("Frequency", "", KAMMER_FREQ, ":readwrite");
  Real                  velocity        = ("Velocity", "", 1, 0, 1.0, 0.1, ":readwrite");
  /* control change */
  Int                   control         = ("Control Number", "", 0, 0, 1024, 8, ":readwrite");
  Real                  value           = ("Value", "", 0, -1, +1, 0.1, ":readwrite");
  /* program change */
  Int                   program         = ("Program", "", 0, 0, 0x7f, 0x10, ":readwrite");
  /* channel pressure */
  Real                  intensity       = ("Intensity", "", 0, 0, 1.0, 0.1, ":readwrite");
  /* pitch bend */
  Real                  pitch_bend      = ("Pitch Bend", "", 0, -1, +1, 0.1, ":readwrite");
  /* song pointer */
  Int                   song_pointer    = ("Song Pointer", "", 0, 0, 0x3fff, 0x80, ":readwrite");
  /* song select */
  Int                   song_number     = ("Song Number", "", 0, 0, 0x7f, 0x10, ":readwrite");
};

sequence NoteSeq {
  Int    notes   = Note ("Note", "", KAMMER_NOTE, ":readwrite"); /* FIXME: s/notes/note/ for pspecs, but not the C API */
};

class Item;

sequence ItemSeq {
  Info   blurb = ("A list of BSE items or derived types.");
  Item   items;
};

record PropertyCandidates {
  Info    blurb      = ("A strcuture describing tentative property values.");
  String  label;
  String  tooltip;
  ItemSeq items;
  TypeSeq partitions = ("Type Partitions", "List of types which may logically partition the list of items by type discrimination", STANDARD);
};

record PartNote
{
  Info     blurb        = "Part specific note representation";
  Int      id           = UInt ("ID", "", 0, ":readwrite");
  Int      channel      = ("Channel", "", 0, 0, MAXINT, 1, ":readwrite");
  Int      tick         = ("Tick", "", 0, 0, MAXINT, 1, ":readwrite");
  Int      duration     = ("Duration", "Duration in number of ticks", 0, 0, MAXINT, 1, ":readwrite");
  Int      note         = Note ("Note", "", KAMMER_NOTE, ":readwrite");
  Int      fine_tune    = ("Fine Tune", "", 0, MIN_FINE_TUNE, MAX_FINE_TUNE, 1, ":readwrite");
  Real     velocity     = ("Velocity", "", 1, 0, 1.0, 0.1, ":readwrite");
  Bool     selected     = ("Selected", "", FALSE, ":readwrite");
};

sequence PartNoteSeq {
  Info     blurb = "A list of part notes";
  PartNote pnotes;
};

record PartControl
{
  Info           blurb        = "Part specific control event representation";
  Int            id           = UInt ("ID", "", 0, ":readwrite");
  Int            tick         = ("Tick", "", 0, 0, MAXINT, 1, ":readwrite");
  MidiSignalType control_type;
  Real           value        = ("Value", "", 0, -1, +1, 0.1, ":readwrite");
  Bool           selected     = ("Selected", "", FALSE, ":readwrite");
};

sequence PartControlSeq {
  Info blurb = "A list of part control events";
  PartControl pcontrols;
};

record NoteDescription
{
  Int    note            = Note ("Note", "", KAMMER_NOTE, ":readwrite");
  Int    octave          = Octave ("Octave", "", KAMMER_OCTAVE, ":readwrite");
  Real   freq            = Freq ("Frequency", "", KAMMER_FREQ, ":readwrite");
  Int    fine_tune       = FineTune ("Fine Tune", "", ":readwrite");
  Int    semitone        = Int ("Semitone", "", 0, 0, 11, 1, ":readwrite");
  Bool   upshift;
  Int    letter          = Int ("Letter", "International abbreviation letter for this note", 64, 32, 126, 1, ":readwrite");
  String name            = String ("Name", "", "", ":readwrite");
  /* constants */
  Int    max_fine_tune   = Int ("Max Fine Tune", "", MAX_FINE_TUNE, MAX_FINE_TUNE, MAX_FINE_TUNE, 0, ":readable");
  Int    kammer_note     = Int ("Kammer Note", "", KAMMER_NOTE, KAMMER_NOTE, KAMMER_NOTE, 0, ":readable");
  // FIXME: turn semicolons in blurb into commas once texitheque got fixed
  Info   blurb           = "A note description provides all necessary details about a specific note. "
                           "Various procedures exist to retrieve a note description; given different "
                           "key values. The max_fine_tune and kammer_note fields are constants; which "
                           "are provided for compatibility reasons and will vanish in future APIs.";
};

record NoteSequence
{
  Int     offset = Note ("Note Offset", "Center/base note", KAMMER_NOTE, ":readwrite");
  NoteSeq notes  = ("Notes", "Sequence of notes", ":readwrite");
};

record Icon
{
  Info   blurb           = "BSE icon representation.";
  Int    bytes_per_pixel = ("Bytes Per Pixel", "Bytes Per Pixel (3:RGB, 4:RGBA, 0:NONE)", 4, 3, 4, 1, ":readwrite");
  Int    width           = ("Width", "Width in pixels or 0 for no icon", 0, 0, MAXINT, 1, ":readwrite");
  Int    height          = ("Height", "Height in pixels or 0 for no icon", 0, 0, MAXINT, 1, ":readwrite");
  BBlock pixels          = ("Pixels", "Pixel array of width*height*bytes_per_pixel bytes", ":readwrite");
};

record Category
{
  Int    category_id = ("Category ID", NULL, 1, 1, G_MAXINT, 1, ":readwrite");
  String category;
  Int    mindex;
  Int    lindex;
  String type;
  Icon   icon;
};

sequence CategorySeq {
  Category cats;
};

record Dot
{
  Real  x;
  Real  y;
};

sequence DotSeq {
  Dot dots;
};

/* BSE Part structures */
class Part;
class Track;

record PartLink {
  Track track;
  Int   tick     = ("Tick", NULL, 0, 0, G_MAXINT, 384, STANDARD);
  Part  part;
  Int   duration = ("Duration", NULL, 0, 0, G_MAXINT, 384, STANDARD);
  // Int   count; /* 1 + repetitions */
};
sequence PartLinkSeq {
  PartLink plinks;
};

/* BSE Track structures */

record TrackPart {
  Int           tick     = ("Tick", NULL, 0, 0, G_MAXINT, 384, STANDARD);
  Part          part;
  Int           duration = ("Duration", NULL, 0, 0, G_MAXINT, 384, STANDARD);
};
sequence TrackPartSeq {
  TrackPart tparts;
};

/* BSE Song timing structure */
record SongTiming {
  /* song position timing applies to */
  Int   tick        = ("Current tick", NULL, 0, 0, G_MAXINT, 384, STANDARD);
  /* tempo */
  Real  bpm         = ("Beats per minute", NULL, 120, BSE_MIN_BPM, BSE_MAX_BPM, 10, STANDARD);
  /* signature */
  Int   numerator   = ("Numerator", "Number of notes per measure", 4, 1, 256, 2, STANDARD);
  Int   denominator = ("Denominator", "Type of notes counted per measure", 4, 1, 256, 2, STANDARD);
  /* sequencer timing */
  Int   tpqn        = ("Ticks per quarter note", NULL, 384, 1, G_MAXINT, 12, STANDARD);
  Int   tpt         = ("Ticks per tact", NULL, 384, 1, G_MAXINT, 12, STANDARD);
};

record SampleFileInfo {
  String        file    = ("Filename", NULL, NULL, STANDARD);
  Int           size    = ("File Size", NULL, 0, 0, G_MAXINT, 0, STANDARD);
  Num           mtime   = ("Modification Time", NULL, 0, 0, SFI_MAXNUM, 0, STANDARD);
  String        loader  = ("Loader", NULL, NULL, STANDARD);
  StringSeq     waves   = (NULL, NULL, STANDARD);
  Int           error   = ("BseErrorType", NULL, 0, 0, G_MAXINT, 0, STANDARD); // FIXME: use BseErrorType here
};

class Janitor;

/* user messages */
choice MsgType {
  MSG_NONE = Neutral,
  MSG_FATAL,
  MSG_ERROR,
  MSG_WARNING,
  MSG_SCRIPT,
  MSG_INFO,
  MSG_DIAG,
  MSG_DEBUG
};
record Message {
  String        log_domain;
  MsgType       type;
  String        ident;
  String        label;
  String        title;
  String        primary;
  String        secondary;
  String        details;
  String        config_check;
  Janitor       janitor;
  String        process;
  Int           pid;
};

/* thread info */
choice ThreadState {
  THREAD_STATE_UNKNOWN,
  THREAD_STATE_RUNNING,
  THREAD_STATE_SLEEPING,
  THREAD_STATE_DISKWAIT,
  THREAD_STATE_TRACED,
  THREAD_STATE_PAGING,
  THREAD_STATE_ZOMBIE,
  THREAD_STATE_DEAD,
};
record ThreadInfo {
  String      name      = (_("Thread Name"), NULL, NULL, STANDARD);
  ThreadState state     = (_("State"), _("The execution state of the thread"), THREAD_STATE_UNKNOWN, STANDARD);
  Int         thread_id = (_("Thread ID"), _("A unique number identifying this thread"),
                           0, 0, G_MAXINT, 1, STANDARD);
  Int         priority  = (_("Priority"), _("The nice value of a thread, -20 indicates a high priority thread and "
                                            "+19 a low priority one that is 'nice' to others"),
                           0, -20, 19, 1, STANDARD);
  Int         processor = (_("Processor"), _("The processor that this thread is currently being executed on"),
                           0, 0, MAXINT, 1, STANDARD);
  Int         utime     = (_("User Time"), _("The CPU time spent executing instructions of this thread"),
                           0, 0, MAXINT, 1, STANDARD);
  Int         stime     = (_("System Time"), _("The CPU time spent in the system for this thread"),
                           0, 0, MAXINT, 1, STANDARD);
  Int         cutime    = (_("Child User Time"), _("The CPU time spent executing instructions of children of this thread"),
                           0, 0, MAXINT, 1, STANDARD);
  Int         cstime    = (_("Child System Time"), _("The CPU time spent in the system for children of this thread"),
                           0, 0, MAXINT, 1, STANDARD);
};
sequence ThreadInfoSeq {
  ThreadInfo thread_infos;
};
record ThreadTotals {
  ThreadInfo    main;
  ThreadInfo    sequencer;
  ThreadInfoSeq synthesis;
};
ThreadTotals    collect_thread_totals ();

/* BSE Global Config */
record GConfig {
  group _("Search Paths") {
    String sample_path     = (_("Sample Path"),
                              g_intern_printf (_("Search path of directories, seperated by \"%s\", used to find audio samples."),
                                               G_SEARCHPATH_SEPARATOR_S),
                              bse_intern_path_user_data ("/samples"), STANDARD ":searchpath");
    String effect_path     = (_("Effect Path"),
                              g_intern_printf (_("Search path of directories, seperated by \"%s\", used to find BSE effect files."),
                                               G_SEARCHPATH_SEPARATOR_S),
                              bse_intern_path_user_data ("/effects"), STANDARD ":searchpath");
    String instrument_path = (_("Instrument Path"),
                              g_intern_printf (_("Search path of directories, seperated by \"%s\", used to find BSE instrument files."),
                                               G_SEARCHPATH_SEPARATOR_S),
                              bse_intern_path_user_data ("/instruments"), STANDARD ":searchpath");
    String script_path     = (_("Script Path"),
                              g_intern_printf (_("Search path of directories, seperated by \"%s\", used to find BSE scheme scripts."),
                                               G_SEARCHPATH_SEPARATOR_S),
                              bse_intern_path_user_data ("/scripts"), STANDARD ":searchpath");
    String plugin_path     = (_("Plugin Path"),
                              g_intern_printf (_("Search path of directories, seperated by \"%s\", used to find BSE plugins. This path "
                                                 "is searched for in addition to the standard BSE plugin location on this system."),
                                               G_SEARCHPATH_SEPARATOR_S),
                              NULL, STANDARD ":searchpath");
    String ladspa_path     = (_("LADSPA Path"),
                              g_intern_printf (_("Search path of directories, seperated by \"%s\", used to find LADSPA plugins. This "
                                                 "path is searched for in addition to the standard LADSPA location on this system. "
                                                 "LADSPA is the Linux Audio Developer's Simple Plugin API, more informations about "
                                                 "LADSPA plugins can be found at http://www.ladspa.org/."), G_SEARCHPATH_SEPARATOR_S),
                              NULL, STANDARD ":searchpath");
  };
  group _("Synthesis Settings") {
    Int synth_latency           = (_("Latency [ms]"),
                                   _("Processing duration between input and output of a single sample, smaller values increase CPU load"),
                                   50, 1, 2000, 5, STANDARD);
    Int synth_mixing_freq       = (_("Synth Mixing Frequency"),
                                   _("Synthesis mixing frequency, common values are: 22050, 44100, 48000"),
                                   44100, 8000, 192000, 0, STANDARD);
    Int synth_control_freq      = (_("Synth Control Frequency"),
                                   _("Frequency at which control values are evaluated, "
                                     "should be much smaller than Synth Mixing Frequency to reduce CPU load"),
                                   1000, 1, 192000, 0, STANDARD);
  };
  group _("MIDI") {
    Bool invert_sustain = (_("Invert Sustain Pedal"),
                           _("Invert the state of sustain (damper) pedal so on/off meanings are reversed"),
                           FALSE, STANDARD);
  };
  group _("Stepping Rates") {
    Real step_volume_dB = (_("Volume [dB] Steps"), _("Step width for volume in decibel"),
                           0.1, 0.001, 5, 0.01, STANDARD);
    Int  step_bpm       = (_("BPM Steps"), _("Step width for beats per minute"),
                           10, 1, 50, 1, STANDARD);
  };
};

};

/* vim:set ts=8 sts=2 sw=2 syntax=cpp: */
