// Licensed GNU LGPL v3 or later: http://www.gnu.org/licenses/lgpl.html -*-mode:c++;-*-
/**
 * @file
 * @brief Public BSE interface classes.
 */

namespace Bse {

enum ErrorType {
  ERROR_NONE = Enum (0, "OK"),
  ERROR_INTERNAL = Enum (1, "Internal error (please report)"),
  ERROR_UNKNOWN = Enum (2, "Unknown error"),
  ERROR_IO = Enum (3, "Input/output error"),
  ERROR_PERMS = Enum (4, "Insufficient permissions"),
  // file errors
  ERROR_FILE_BUSY = Enum (5, "Device or resource busy"),
  ERROR_FILE_EXISTS = Enum (6, "File exists already"),
  ERROR_FILE_EOF = Enum (7, "End of file"),
  ERROR_FILE_EMPTY = Enum (8, "File empty"),
  ERROR_FILE_NOT_FOUND = Enum (9, "No such file, device or directory"),
  ERROR_FILE_IS_DIR = Enum (10, "Is a directory"),
  ERROR_FILE_OPEN_FAILED = Enum (11, "Open failed"),
  ERROR_FILE_SEEK_FAILED = Enum (12, "Seek failed"),
  ERROR_FILE_READ_FAILED = Enum (13, "Read failed"),
  ERROR_FILE_WRITE_FAILED = Enum (14, "Write failed"),
  // out of resource conditions
  ERROR_MANY_FILES = Enum (15, "Too many open files"),
  ERROR_NO_FILES = Enum (16, "Too many open files in system"),
  ERROR_NO_SPACE = Enum (17, "No space left on device"),
  ERROR_NO_MEMORY = Enum (18, "Out of memory"),
  // content errors
  ERROR_NO_HEADER = Enum (19, "Failed to detect header"),
  ERROR_NO_SEEK_INFO = Enum (20, "Failed to retrieve seek information"),
  ERROR_NO_DATA = Enum (21, "No data available"),
  ERROR_DATA_CORRUPT = Enum (22, "Data corrupt"),
  ERROR_WRONG_N_CHANNELS = Enum (23, "Wrong number of channels"),
  ERROR_FORMAT_INVALID = Enum (24, "Invalid format"),
  ERROR_FORMAT_UNKNOWN = Enum (25, "Unknown format"),
  ERROR_DATA_UNMATCHED = Enum (26, "Requested data values unmatched"),
  // miscellaneous errors
  ERROR_TEMP = Enum (27, "Temporary error"),
  ERROR_WAVE_NOT_FOUND = Enum (28, "No such wave"),
  ERROR_CODEC_FAILURE = Enum (29, "Codec failure"),
  ERROR_UNIMPLEMENTED = Enum (30, "Functionality not implemented"),
  ERROR_INVALID_PROPERTY = Enum (31, "Invalid object property"),
  ERROR_INVALID_MIDI_CONTROL = Enum (32, "Invalid MIDI control type"),
  ERROR_PARSE_ERROR = Enum (33, "Parsing error"),
  ERROR_SPAWN = Enum (34, "Failed to spawn child process"),
  // Device errors
  ERROR_DEVICE_NOT_AVAILABLE = Enum (35, "No device (driver) available"),
  ERROR_DEVICE_ASYNC = Enum (36, "Device not async capable"),
  ERROR_DEVICE_BUSY = Enum (37, "Device busy"),
  ERROR_DEVICE_FORMAT = Enum (38, "Failed to configure device format"),
  ERROR_DEVICE_BUFFER = Enum (39, "Failed to configure device buffer"),
  ERROR_DEVICE_LATENCY = Enum (40, "Failed to configure device latency"),
  ERROR_DEVICE_CHANNELS = Enum (41, "Failed to configure number of device channels"),
  ERROR_DEVICE_FREQUENCY = Enum (42, "Failed to configure device frequency"),
  ERROR_DEVICES_MISMATCH = Enum (43, "Device configurations mismatch"),
  // BseSource errors
  ERROR_SOURCE_NO_SUCH_MODULE = Enum (44, "No such synthesis module"),
  ERROR_SOURCE_NO_SUCH_ICHANNEL = Enum (45, "No such input channel"),
  ERROR_SOURCE_NO_SUCH_OCHANNEL = Enum (46, "No such output channel"),
  ERROR_SOURCE_NO_SUCH_CONNECTION = Enum (47, "Input/Output channels not connected"),
  ERROR_SOURCE_PRIVATE_ICHANNEL = Enum (48, "Input channel is private"),
  ERROR_SOURCE_ICHANNEL_IN_USE = Enum (49, "Input channel already in use"),
  ERROR_SOURCE_CHANNELS_CONNECTED = Enum (50, "Input/output channels already connected"),
  ERROR_SOURCE_CONNECTION_INVALID = Enum (51, "Invalid synthesis module connection"),
  ERROR_SOURCE_PARENT_MISMATCH = Enum (52, "Parent mismatch"),
  ERROR_SOURCE_BAD_LOOPBACK = Enum (53, "Bad loopback"),
  ERROR_SOURCE_BUSY = Enum (54, "Synthesis module currently busy"),
  ERROR_SOURCE_TYPE_INVALID = Enum (55, "Invalid synthsis module type"),
  // BseProcedure errors
  ERROR_PROC_NOT_FOUND = Enum (56, "No such procedure"),
  ERROR_PROC_BUSY = Enum (57, "Procedure currently busy"),
  ERROR_PROC_PARAM_INVAL = Enum (58, "Procedure parameter invalid"),
  ERROR_PROC_EXECUTION = Enum (59, "Procedure execution failed"),
  ERROR_PROC_ABORT = Enum (60, "Procedure execution aborted"),
  // various procedure errors
  ERROR_NO_ENTRY = Enum (61, "No such entry"),
  ERROR_NO_EVENT = Enum (62, "No such event"),
  ERROR_NO_TARGET = Enum (63, "No target"),
  ERROR_NOT_OWNER = Enum (64, "Ownership mismatch"),
  ERROR_INVALID_OFFSET = Enum (65, "Invalid offset"),
  ERROR_INVALID_DURATION = Enum (66, "Invalid duration"),
  ERROR_INVALID_OVERLAP = Enum (67, "Invalid overlap"),
};

/// Basic object type for all BSE objects.
interface Object {
  String debug_name (); ///< Object name useful for debugging output.
  int64  proxy_id   (); ///< Retrieve the BseObject proxy ID for an Object.
};

/// Object to carry out IDL, API, signal, etc tests.
interface TestObject {
  int32         echo_test       (String msg);   ///< Echo custom message to stdout.
  signal void   echo_reply      (String msg);   ///< Signal emitted in response to echo_test().
};

enum UserMessageType {
  ERROR = 1,    ///< Indicate a message about an error condition.
  WARNING,      ///< Indicate a message about a possibly harmful condition.
  INFO,         ///< Indicate an informational message.
  DEBUG,        ///< Indicate a debugging message (usually insignificant).
};

/// Structure for submission of user interface messages from BSE.
record UserMessage {
  UserMessageType type;         ///< Severity classification for this message.
  String          title;        ///< Usually GUI window title.
  String          text1;        ///< Primary message to the user, should be limited to 80-100 chars.
  String          text2;        ///< Explanatory (secondary) message no limitations recommended.
  String          text3;        ///< Possibly (technical) details or machine error message.
  String          label;        ///< Message class label, used to enable/disable this type of message.
};

/// Projects support loading, saving, playback and act as containers for all other sound objects.
interface Project : Object {
};

/** Main Bse remote origin object.
 * The Bse::Server object controls the main BSE thread and keeps track of all objects
 * used in the BSE context.
 */
interface Server : Object {
  signal void   user_message    (UserMessage umsg);     ///< Notification signal for user messages from BSE.
  TestObject    get_test_object ();                     ///< Retrieve object for API, signal, etc tests.
  Object        from_proxy      (int64 proxyid);        ///< Find an Object from its associated BseObject proxy id.
  String        get_mp3_version ();                     ///< Retrieve BSE MP3 handler version.
  String        get_vorbis_version ();                  ///< Retrieve BSE Vorbis handler version.
  String        get_ladspa_path ();                     ///< Retrieve ladspa search path.
  String        get_plugin_path ();                     ///< Retrieve plugin search path.
  String        get_script_path ();                     ///< Retrieve script search path.
  String        get_instrument_path ();                 ///< Retrieve instrument search path.
  String        get_sample_path ();                     ///< Retrieve sample search path.
  String        get_effect_path ();                     ///< Retrieve effect search path.
  String        get_demo_path ();                       ///< Retrieve demo search path.
  String        get_custom_instrument_dir ();           ///< Retrieve user specific instruments directory.
  String        get_custom_effect_dir ();    ///< Retrieve user specific effects directory.
  String        get_version ();              ///< Retrieve BSE version.
  void          save_preferences ();         ///< Save the bse-preferences property to disk.
  void          register_ladspa_plugins();   ///< Register LADSPA (Linux Audio Developer's Simple Plugin API) plugins.
  void          register_core_plugins();     ///< Register core plugins.
  void          register_scripts();          ///< Register external scripts.
  bool          preferences_locked();        ///< Returns whether the bse-preferences property is currently locked against modifications or not.
  int32         n_scripts();                 ///< Return the number of scripts currently running on this server.
  bool          can_load (String file_name); ///< Check whether a loader can be found for a wave file.
  void          start_recording (String wave_file, float64 n_seconds); ///< Start recording to a WAV file.
  Project       use_new_project (String project_name);  ///< Create a new project, owned by the caller (name is modified to be unique if necessary.
};

} // Bse
