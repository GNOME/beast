/* BSE - Bedevilled Sound Engine	-*-mode: c;-*-
 * Copyright (C) 2000-2002 Tim Janik
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */
#include        <bse/bseplugin.h>
#include        <bse/bseprocedure.h>
#include        <bse/bsesnet.h>
#include        <bse/bsemain.h>


AUTHORS	= "Tim Janik <timj@gtk.org>";
CRIGHTS = "Copyright (C) 2001-2002 Tim Janik";


METHOD (BseSNet, supports-user-synths) {
  HELP	= "Check whether users may edit synthesis modules of this network";
  IN	= bse_param_spec_object ("snet", "Synth Net", NULL,
				 BSE_TYPE_SNET, SFI_PARAM_DEFAULT);
  OUT	= sfi_pspec_bool ("user_synth", "User Synth", NULL,
			  FALSE, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseSNet *snet = bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_SNET (snet))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_set_bool (out_values++, BSE_SNET_USER_SYNTH (snet));
  
  return BSE_ERROR_NONE;
}

METHOD (BseSNet, can-create-source) {
  HELP	= "Check whether inserting a new module into a synthesis network is possible";
  IN	= bse_param_spec_object ("snet", "Synth Net", NULL,
				 BSE_TYPE_SNET, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_string ("module_type", "Module Type", NULL,
			    "", SFI_PARAM_DEFAULT);
  OUT	= bse_param_spec_genum ("error", "Error", NULL,
				BSE_TYPE_ERROR_TYPE, 0,
				SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseSNet *snet = bse_value_get_object (in_values++);
  const gchar *type_name = sfi_value_get_string (in_values++);
  GType type = g_type_from_name (type_name);
  BseErrorType error = BSE_ERROR_NONE;
  
  /* check parameters */
  if (!BSE_IS_SNET (snet))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  if (!BSE_SNET_USER_SYNTH (snet) && !BSE_DVL_EXT)
    error = BSE_ERROR_PERMS;
  else if (!g_type_is_a (type, BSE_TYPE_SOURCE) ||
	   g_type_is_a (type, BSE_TYPE_CONTAINER))
    error = BSE_ERROR_SOURCE_TYPE_INVALID;
  
  /* set output parameters */
  g_value_set_enum (out_values++, error);
  
  return BSE_ERROR_NONE;
}

METHOD (BseSNet, create-source) {
  HELP	= "Insert a new module into a synthesis network";
  IN	= bse_param_spec_object ("snet", "Synth Net", NULL,
				 BSE_TYPE_SNET, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_string ("module_type", "Module Type", NULL,
			    "", SFI_PARAM_DEFAULT);
  OUT	= bse_param_spec_object ("module", "New Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseSNet *snet = bse_value_get_object (in_values++);
  const gchar *type_name = sfi_value_get_string (in_values++);
  BseContainer *container;
  BseSource *source;
  BseErrorType error;
  
  /* check parameters */
  if (!BSE_IS_SNET (snet))
    return BSE_ERROR_PROC_PARAM_INVAL;
  if (bse_item_exec (snet, "can-create-source", type_name, &error) != 0 ||
      error != 0)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  container = BSE_CONTAINER (snet);
  source = g_object_new (g_type_from_name (type_name), NULL);
  bse_container_add_item (container, BSE_ITEM (source));
  
  /* set output parameters */
  bse_value_set_object (out_values++, source);
  g_object_unref (source);
  
  return BSE_ERROR_NONE;
}

METHOD (BseSNet, remove-source) {
  HELP	= "Remove an existing module from its synthesis network";
  IN	= bse_param_spec_object ("snet", "Synth Net", NULL,
				 BSE_TYPE_SNET, SFI_PARAM_DEFAULT);
  IN	= bse_param_spec_object ("module", "Module", NULL,
				 BSE_TYPE_SOURCE, SFI_PARAM_DEFAULT);
  OUT   = bse_param_spec_genum ("error", "Error", NULL,
				BSE_TYPE_ERROR_TYPE, 0,
				SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseSNet *snet = bse_value_get_object (in_values++);
  BseSource *source = bse_value_get_object (in_values++);
  BseErrorType error = BSE_ERROR_NONE;
  
  /* check parameters */
  if (!BSE_IS_SNET (snet) || !BSE_IS_SOURCE (source) || BSE_ITEM (source)->parent != BSE_ITEM (snet) ||
      (!BSE_SNET_USER_SYNTH (snet) && !BSE_DVL_EXT))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  bse_container_remove_item (BSE_CONTAINER (snet), BSE_ITEM (source));
  
  /* set output parameters */
  g_value_set_enum (out_values++, error);
  
  return BSE_ERROR_NONE;
}
