/* BSE - Bedevilled Sound Engine	-*-mode: c;-*-
 * Copyright (C) 2002-2003 Tim Janik
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 */
#include        <bse/bseplugin.h>
#include        <bse/bseprocedure.h>
#include        <bse/bsepart.h>
#include        <bse/bsesong.h>


AUTHORS	= "Tim Janik <timj@gtk.org>";
CRIGHTS = "Copyright (C) 2002 Tim Janik";


METHOD (BsePart, insert-note) {
  HELP	= "Insert a new note into a part.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 1, BSE_PART_MAX_TICK, 384, SFI_PARAM_DEFAULT);
  IN	= bse_pspec_note_simple ("note", "Note", NULL,
				 SFI_PARAM_DEFAULT);
  IN	= bse_param_spec_fine_tune ("fine_tune", "Fine Tune", "Fine tune in cents per semitone");
  IN	= sfi_pspec_real ("velocity", "Velocity", NULL,
			  1.0, 0, 1.0, 0.01,
			  SFI_PARAM_DEFAULT SFI_PARAM_HINT_SCALE);
  OUT	= sfi_pspec_int ("id", "ID", NULL,
			 0, 0, BSE_PART_MAX_TICK, 1, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self      = bse_value_get_object (in_values++);
  guint    tick	     = sfi_value_get_int (in_values++);
  guint    duration  = sfi_value_get_int (in_values++);
  gint     note	     = sfi_value_get_note (in_values++);
  gint     fine_tune = sfi_value_get_int (in_values++);
  gfloat   velocity  = sfi_value_get_real (in_values++);
  BseUndoStack *ustack;
  guint id;
  
  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  ustack = bse_item_undo_open (self, "insert-note");
  id = bse_part_insert_note (self, tick, duration, note, fine_tune, velocity);
  if (id)
    bse_item_push_undo_proc (self, "delete-event", id);
  bse_item_undo_close (ustack);

  /* set output parameters */
  sfi_value_set_int (out_values++, id);
  
  return BSE_ERROR_NONE;
}

METHOD (BsePart, change-note) {
  HELP	= "Change an existing note within a part.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("id", "ID", NULL,
			 0, 0, BSE_PART_MAX_TICK, 1, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 1, BSE_PART_MAX_TICK, 384, SFI_PARAM_DEFAULT);
  IN	= bse_pspec_note_simple ("note", "Note", NULL,
				 SFI_PARAM_DEFAULT);
  IN	= bse_param_spec_fine_tune ("fine_tune", "Fine Tune", "Fine tune in cents per semitone");
  IN	= sfi_pspec_real ("velocity", "Velocity", NULL,
			  1.0, 0, 1.0, 0.01,
			  SFI_PARAM_DEFAULT SFI_PARAM_HINT_SCALE);
  OUT   = bse_param_spec_genum ("error", "Error", NULL,
				BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE,
				SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self             = bse_value_get_object (in_values++);
  guint    id	            = sfi_value_get_int (in_values++);
  guint    otick, tick	    = sfi_value_get_int (in_values++);
  guint    odur,  duration  = sfi_value_get_int (in_values++);
  gint     onote, note	    = sfi_value_get_note (in_values++);
  gint     oft,   fine_tune = sfi_value_get_int (in_values++);
  gfloat   ovel,  velocity  = sfi_value_get_real (in_values++);
  gboolean oselected, success = FALSE;

  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  if (bse_part_query_note (self, id, &otick, &odur, &onote, &oft, &ovel, &oselected))
    {
      BseUndoStack *ustack = bse_item_undo_open (self, "change-note");
      if (otick != tick || odur != duration || onote != note ||
          oft != fine_tune || ovel != velocity)
        {
          success = bse_part_change_note (self, id, tick, duration, note, fine_tune, velocity);
          if (success)
            bse_item_push_undo_proc (self, "change-note", id, otick, odur, onote, oft, ovel);
        }
      else
        success = TRUE;
      bse_item_undo_close (ustack);
    }

  /* set output parameters */
  g_value_set_enum (out_values++, success ? BSE_ERROR_NONE : BSE_ERROR_NO_EVENT);
  
  return BSE_ERROR_NONE;
}

METHOD (BsePart, delete-event) {
  HELP	= "Delete an existing event from a part.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("id", "ID", NULL,
			 0, 0, BSE_PART_MAX_TICK, 1, SFI_PARAM_DEFAULT);
  OUT   = bse_param_spec_genum ("error", "Error", NULL,
				BSE_TYPE_ERROR_TYPE, BSE_ERROR_NONE,
				SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self     = bse_value_get_object (in_values++);
  guint    id	    = sfi_value_get_int (in_values++);
  guint otick, odur;
  gint onote, oft;
  gfloat ovel;
  gboolean oselected, deleted = FALSE;

  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  if (bse_part_query_note (self, id, &otick, &odur, &onote, &oft, &ovel, &oselected))
    {
      BseUndoStack *ustack = bse_item_undo_open (self, "delete-event");
      deleted = bse_part_delete_event (self, id);
      if (deleted)
        bse_item_push_undo_proc (self, "insert-note", otick, odur, onote, oft, ovel);
      bse_item_undo_close (ustack);
    }

  /* set output parameters */
  g_value_set_enum (out_values++, deleted ? BSE_ERROR_NONE : BSE_ERROR_NO_EVENT);
  
  return BSE_ERROR_NONE;
}

METHOD (BsePart, is-selected-event) {
  HELP	= "Check whether a specific event is selected.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("id", "ID", NULL,
			 0, 0, BSE_PART_MAX_TICK, 1, SFI_PARAM_DEFAULT);
  OUT   = sfi_pspec_bool ("selected", "Selected", NULL,
			  FALSE, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self     = bse_value_get_object (in_values++);
  guint    id	    = sfi_value_get_int (in_values++);
  gboolean selected;
  
  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  selected = bse_part_is_selected_event (self, id);
  
  /* set output parameters */
  sfi_value_set_bool (out_values++, selected);
  
  return BSE_ERROR_NONE;
}

METHOD (BsePart, list-notes-crossing) {
  HELP	= "List all notes within or crossing a tick range.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 1, BSE_PART_MAX_TICK, 384, SFI_PARAM_DEFAULT);
  OUT   = bse_param_spec_boxed ("note_list", "Note List", NULL,
				BSE_TYPE_PART_NOTE_SEQ, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self     = bse_value_get_object (in_values++);
  guint    tick	    = sfi_value_get_int (in_values++);
  guint    duration = sfi_value_get_int (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  bse_value_take_boxed (out_values++, bse_part_list_notes_around (self, tick, duration, BSE_MIN_NOTE, BSE_MAX_NOTE));
  
  return BSE_ERROR_NONE;
}

METHOD (BsePart, queue-notes-within) {
  HELP	= "Queue updates for all notes starting within the given region.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 1, BSE_PART_MAX_TICK, 384, SFI_PARAM_DEFAULT);
  IN	= bse_pspec_note_simple ("min_note", "Minimum Note", NULL,
				 SFI_PARAM_DEFAULT);
  IN	= bse_pspec_note_simple ("max_note", "Maximum Note", NULL,
				 SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self     = bse_value_get_object (in_values++);
  guint    tick	    = sfi_value_get_int (in_values++);
  guint    duration = sfi_value_get_int (in_values++);
  gint     min_note = sfi_value_get_note (in_values++);
  gint     max_note = sfi_value_get_note (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  bse_part_queue_notes_within (self, tick, duration, min_note, max_note);
  
  return BSE_ERROR_NONE;
}

METHOD (BsePart, list-selected-notes) {
  HELP	= "List all currently selected notes.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  OUT   = bse_param_spec_boxed ("note_list", "Note List", NULL,
				BSE_TYPE_PART_NOTE_SEQ, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self     = bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  bse_value_take_boxed (out_values++, bse_part_list_selected_notes (self));
  
  return BSE_ERROR_NONE;
}

METHOD (BsePart, check-overlap) {
  HELP	= "Check whether a note would overlap with neighbours.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 0, BSE_PART_MAX_TICK, 384, SFI_PARAM_DEFAULT);
  IN	= bse_pspec_note_simple ("note", "Note", NULL, SFI_PARAM_DEFAULT);
  OUT   = bse_param_spec_boxed ("note_list", "Note List", NULL,
				BSE_TYPE_PART_NOTE_SEQ, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self     = bse_value_get_object (in_values++);
  guint    tick	    = sfi_value_get_int (in_values++);
  guint    duration = sfi_value_get_int (in_values++);
  gint     note     = sfi_value_get_note (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  bse_value_take_boxed (out_values++, bse_part_list_notes_around (self, tick, duration, note, note));
  
  return BSE_ERROR_NONE;
}

METHOD (BsePart, get-notes) {
  HELP	= "Retrieve all notes of specific frequency at a specific tick.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("tick", "Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_DEFAULT);
  IN	= bse_pspec_note_simple ("note", "Note", NULL,
				 SFI_PARAM_DEFAULT);
  OUT   = bse_param_spec_boxed ("note_list", "Note List", NULL,
				BSE_TYPE_PART_NOTE_SEQ, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self     = bse_value_get_object (in_values++);
  guint    tick	    = sfi_value_get_int (in_values++);
  gint     note     = sfi_value_get_note (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  bse_value_take_boxed (out_values++, bse_part_list_notes_at (self, tick, note));
  
  return BSE_ERROR_NONE;
}

METHOD (BsePart, get-min-note) {
  HELP	= "Retrieve the minimum note supported in this part.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  OUT	= bse_pspec_note_simple ("note", "Note", NULL,
				 SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self     = bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* it doesn't currently make sense to restrict the standard note range */
  sfi_value_set_int (out_values++, BSE_MIN_NOTE);
  
  return BSE_ERROR_NONE;
}

METHOD (BsePart, get-max-note) {
  HELP	= "Retrieve the maximum note supported in this part.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  OUT	= bse_pspec_note_simple ("note", "Note", NULL,
				 SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self     = bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* it doesn't currently make sense to restrict the standard note range */
  sfi_value_set_int (out_values++, BSE_MAX_NOTE);
  
  return BSE_ERROR_NONE;
}

METHOD (BsePart, get-max-tick) {
  HELP	= "Retrieve the maximum tick count represented in a part.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  OUT	= sfi_pspec_int ("tick", "Tick", "Maximum Tick",
			 0, 0, BSE_PART_MAX_TICK, 384, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self     = bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* output values */
  sfi_value_set_int (out_values++, BSE_PART_MAX_TICK);
  
  return BSE_ERROR_NONE;
}

METHOD (BsePart, select-rectangle-exclusive) {
  HELP	= "Select all notes within rectangle and deselect all others.";
  IN	= bse_param_spec_object ("part", "Part", "Part",
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("tick", "Tick", "Selection Tick",
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("duration", "Duration", "Selection Duration",
			 0, 0, BSE_PART_MAX_TICK, 384, SFI_PARAM_DEFAULT);
  IN	= bse_pspec_note_simple ("min_note", "Minimum Selection Note", NULL,
				 SFI_PARAM_DEFAULT);
  IN	= bse_pspec_note_simple ("max_note", "Maximum Selection Note", NULL,
				 SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self   = bse_value_get_object (in_values++);
  guint tick      = sfi_value_get_int (in_values++);
  guint duration  = sfi_value_get_int (in_values++);
  gint  min_note  = sfi_value_get_note (in_values++);
  gint  max_note  = sfi_value_get_note (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  bse_part_select_rectangle_ex (self, tick, duration, min_note, max_note);
  
  return BSE_ERROR_NONE;
}

METHOD (BsePart, select-rectangle) {
  HELP	= "Select all notes within rectangle.";
  IN	= bse_param_spec_object ("part", "Part", "Part",
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("tick", "Tick", "Selection Tick",
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("duration", "Duration", "Selection Duration",
			 0, 0, BSE_PART_MAX_TICK, 384, SFI_PARAM_DEFAULT);
  IN	= bse_pspec_note_simple ("min_note", "Minimum Selection Note", NULL,
				 SFI_PARAM_DEFAULT);
  IN	= bse_pspec_note_simple ("max_note", "Maximum Selection Note", NULL,
				 SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self   = bse_value_get_object (in_values++);
  guint tick      = sfi_value_get_int (in_values++);
  guint duration  = sfi_value_get_int (in_values++);
  gint  min_note  = sfi_value_get_note (in_values++);
  gint  max_note  = sfi_value_get_note (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  bse_part_select_rectangle (self, tick, duration, min_note, max_note);
  
  return BSE_ERROR_NONE;
}

METHOD (BsePart, deselect-rectangle) {
  HELP	= "Deselect all notes within rectangle.";
  IN	= bse_param_spec_object ("part", "Part", "Part",
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("tick", "Tick", "Selection Tick",
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("duration", "Duration", "Selection Duration",
			 0, 0, BSE_PART_MAX_TICK, 384, SFI_PARAM_DEFAULT);
  IN	= bse_pspec_note_simple ("min_note", "Minimum Selection Note", NULL,
				 SFI_PARAM_DEFAULT);
  IN	= bse_pspec_note_simple ("max_note", "Maximum Selection Note", NULL,
				 SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self   = bse_value_get_object (in_values++);
  guint tick      = sfi_value_get_int (in_values++);
  guint duration  = sfi_value_get_int (in_values++);
  gint  min_note  = sfi_value_get_note (in_values++);
  gint  max_note  = sfi_value_get_note (in_values++);
  
  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  bse_part_deselect_rectangle (self, tick, duration, min_note, max_note);
  
  return BSE_ERROR_NONE;
}

METHOD (BsePart, select-event) {
  HELP	= "Select an existing event.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("id", "ID", NULL,
			 0, 0, BSE_PART_MAX_TICK, 1, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self     = bse_value_get_object (in_values++);
  guint    id	    = sfi_value_get_int (in_values++);
  gboolean id_valid;
  
  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  id_valid = bse_part_select_event (self, id);
  
  return id_valid ? BSE_ERROR_NONE : BSE_ERROR_PROC_PARAM_INVAL;
}

METHOD (BsePart, deselect-event) {
  HELP	= "Deselect an existing event.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  IN	= sfi_pspec_int ("id", "ID", NULL,
			 0, 0, BSE_PART_MAX_TICK, 1, SFI_PARAM_DEFAULT);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self     = bse_value_get_object (in_values++);
  guint    id	    = sfi_value_get_int (in_values++);
  gboolean id_valid;
  
  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  id_valid = bse_part_deselect_event (self, id);
  
  return id_valid ? BSE_ERROR_NONE : BSE_ERROR_PROC_PARAM_INVAL;
}

METHOD (BsePart, get-timing) {
  HELP  = "Retrieve song timing information at a specific tick.";
  IN    = bse_param_spec_object ("part", "Part", NULL, BSE_TYPE_PART, SFI_PARAM_DEFAULT);
  IN    = sfi_pspec_int ("tick", "Tick", "Tick to retrieve timing info about", 0, 0, G_MAXINT, 384, SFI_PARAM_DEFAULT);
  OUT   = bse_param_spec_boxed ("timing", "Timing", "Song Timing", BSE_TYPE_SONG_TIMING, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = bse_value_get_object (in_values++);
  SfiInt   tick = sfi_value_get_int (in_values++);
  BseItem *parent;
  BseSongTiming timing = { 0, };

  /* check parameters */
  if (!BSE_IS_PART (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  parent = BSE_ITEM (self)->parent;
  if (BSE_IS_SONG (parent))
    bse_song_get_timing (BSE_SONG (parent), tick, &timing);
  else
    bse_song_timing_get_default (&timing);

  /* set output parameters */
  bse_value_set_boxed (out_values++, &timing);

  return BSE_ERROR_NONE;
}
