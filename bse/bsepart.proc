// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
#include <bse/bseplugin.hh>
#include <bse/bseprocedure.hh>
#include <bse/bsepart.hh>
#include <bse/bsesong.hh>
#include "bsecxxplugin.hh"


AUTHORS	= "Tim Janik <timj@gtk.org>";
LICENSE = "GNU Lesser General Public License";


METHOD (BsePart, insert-note-auto) {
  HELP	= "Insert a new note into a part with automatic channel selection.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 1, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  IN	= bse_pspec_note_simple ("note", "Note", NULL,
				 SFI_PARAM_STANDARD);
  IN	= bse_param_spec_fine_tune ("fine_tune", "Fine Tune", "Fine tune in cents per semitone");
  IN	= sfi_pspec_real ("velocity", "Velocity", NULL,
			  1.0, 0, 1.0, 0.01,
			  SFI_PARAM_STANDARD ":scale");
  OUT	= sfi_pspec_int ("id", "ID", NULL,
			 0, 0, BSE_PART_MAX_TICK, 1, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    tick	     = sfi_value_get_int (in_values++);
  guint    duration  = sfi_value_get_int (in_values++);
  gint     note	     = sfi_value_get_note (in_values++);
  gint     fine_tune = sfi_value_get_int (in_values++);
  gfloat   velocity  = sfi_value_get_real (in_values++);
  BseUndoStack *ustack;
  guint id;

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  ustack = bse_item_undo_open (self, "insert-note-auto");
  id = bse_part_insert_note (self, ~0, tick, duration, note, fine_tune, velocity);
  if (id)
    bse_item_push_undo_proc (self, "delete-event", id);
  bse_item_undo_close (ustack);

  /* set output parameters */
  sfi_value_set_int (out_values++, id);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, insert-note) {
  HELP	= "Insert a new note into a part.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("channel", "Channel", NULL,
			 0, 0, BSE_PART_MAX_CHANNELS, 4, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 1, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  IN	= bse_pspec_note_simple ("note", "Note", NULL,
				 SFI_PARAM_STANDARD);
  IN	= bse_param_spec_fine_tune ("fine_tune", "Fine Tune", "Fine tune in cents per semitone");
  IN	= sfi_pspec_real ("velocity", "Velocity", NULL,
			  1.0, 0, 1.0, 0.01,
			  SFI_PARAM_STANDARD ":scale");
  OUT	= sfi_pspec_int ("id", "ID", NULL,
			 0, 0, BSE_PART_MAX_TICK, 1, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    channel   = sfi_value_get_int (in_values++);
  guint    tick	     = sfi_value_get_int (in_values++);
  guint    duration  = sfi_value_get_int (in_values++);
  gint     note	     = sfi_value_get_note (in_values++);
  gint     fine_tune = sfi_value_get_int (in_values++);
  gfloat   velocity  = sfi_value_get_real (in_values++);
  BseUndoStack *ustack;
  guint id;

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  ustack = bse_item_undo_open (self, "insert-note");
  id = bse_part_insert_note (self, channel, tick, duration, note, fine_tune, velocity);
  if (id)
    bse_item_push_undo_proc (self, "delete-event", id);
  bse_item_undo_close (ustack);

  /* set output parameters */
  sfi_value_set_int (out_values++, id);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, insert-control) {
  HELP	= "Insert a new control event into a part.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_genum ("control_type", "Control Type", NULL,
                                BSE_TYPE_MIDI_SIGNAL_TYPE, Bse::MIDI_SIGNAL_PITCH_BEND,
                                SFI_PARAM_STANDARD);
  IN	= sfi_pspec_real ("value", "Value", NULL,
			  0.0, -1.0, +1.0, 0.1,
			  SFI_PARAM_STANDARD ":scale");
  OUT	= sfi_pspec_int ("id", "ID", NULL,
			 0, 0, BSE_PART_MAX_TICK, 1, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    tick	     = sfi_value_get_int (in_values++);
  guint    ctype     = g_value_get_enum (in_values++);
  gfloat   value     = sfi_value_get_real (in_values++);
  BseUndoStack *ustack;
  guint id;

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  ustack = bse_item_undo_open (self, "insert-event");
  id = bse_part_insert_control (self, tick, Bse::MidiSignalType (ctype), value);
  if (id)
    bse_item_push_undo_proc (self, "delete-event", id);
  bse_item_undo_close (ustack);

  /* set output parameters */
  sfi_value_set_int (out_values++, id);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, change-note) {
  HELP	= "Change an existing note within a part.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("id", "ID", NULL,
			 0, 0, BSE_PART_MAX_TICK, 1, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 1, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  IN	= bse_pspec_note_simple ("note", "Note", NULL,
				 SFI_PARAM_STANDARD);
  IN	= bse_param_spec_fine_tune ("fine_tune", "Fine Tune", "Fine tune in cents per semitone");
  IN	= sfi_pspec_real ("velocity", "Velocity", NULL,
			  1.0, 0, 1.0, 0.01,
			  SFI_PARAM_STANDARD ":scale");
  OUT   = bse_param_spec_genum ("error", "Error", NULL,
				BSE_TYPE_ERROR_TYPE, Bse::ERROR_NONE,
				SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    id	     = sfi_value_get_int (in_values++);
  guint    tick	     = sfi_value_get_int (in_values++);
  guint    duration  = sfi_value_get_int (in_values++);
  gint     note	     = sfi_value_get_note (in_values++);
  gint     fine_tune = sfi_value_get_int (in_values++);
  gfloat   velocity  = sfi_value_get_real (in_values++);
  gboolean success = FALSE;
  BsePartQueryEvent equery;

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  if (bse_part_query_event (self, id, &equery) == BSE_PART_EVENT_NOTE)
    {
      BseUndoStack *ustack = bse_item_undo_open (self, "change-note");
      if (equery.tick != tick || equery.duration != duration ||
          equery.note != note || equery.fine_tune != fine_tune ||
          equery.velocity != velocity)
        {
          success = bse_part_change_note (self, id, ~0, tick, duration, note, fine_tune, velocity);
          if (success)
            bse_item_push_undo_proc (self, "change-note", id, equery.tick, equery.duration,
                                     equery.note, equery.fine_tune, equery.velocity);
        }
      else
        success = TRUE;
      bse_item_undo_close (ustack);
    }

  /* set output parameters */
  g_value_set_enum (out_values++, success ? Bse::ERROR_NONE : Bse::ERROR_NO_EVENT);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, change-control) {
  HELP	= "Change an existing control event within a part.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("id", "ID", NULL,
			 0, 0, BSE_PART_MAX_TICK, 1, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_genum ("control_type", "Control Type", NULL,
                                BSE_TYPE_MIDI_SIGNAL_TYPE, Bse::MIDI_SIGNAL_PITCH_BEND,
                                SFI_PARAM_STANDARD);
  IN	= sfi_pspec_real ("value", "Value", NULL,
			  0.0, -1.0, +1.0, 0.1,
			  SFI_PARAM_STANDARD ":scale");
  OUT   = bse_param_spec_genum ("error", "Error", NULL,
				BSE_TYPE_ERROR_TYPE, Bse::ERROR_NONE,
				SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    id    = sfi_value_get_int (in_values++);
  guint    tick  = sfi_value_get_int (in_values++);
  guint    ctype = g_value_get_enum (in_values++);
  gfloat   value = sfi_value_get_real (in_values++);
  BsePartQueryEvent equery;
  gboolean success = FALSE;

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_part_query_event (self, id, &equery);
  if (equery.event_type == BSE_PART_EVENT_CONTROL && !BSE_PART_NOTE_CONTROL (ctype))
    {
      BseUndoStack *ustack = bse_item_undo_open (self, "change-control");
      if (equery.tick != tick || equery.control_type != ctype || equery.control_value != value)
        {
          success = bse_part_change_control (self, id, tick, Bse::MidiSignalType (ctype), value);
          if (success)
            bse_item_push_undo_proc (self, "change-control", id, equery.tick, equery.control_type, equery.control_value);
        }
      else
        success = TRUE;
      bse_item_undo_close (ustack);
    }
  else if (equery.event_type == BSE_PART_EVENT_NOTE && BSE_PART_NOTE_CONTROL (ctype))
    {
      BseUndoStack *ustack = bse_item_undo_open (self, "change-control");
      BsePartQueryEvent xquery;
      success = bse_part_change_control (self, id, tick, Bse::MidiSignalType (ctype), value);
      if (success && bse_part_query_event (self, id, &xquery) == BSE_PART_EVENT_NOTE &&
          (equery.fine_tune_value != xquery.fine_tune_value ||
           equery.velocity_value  != xquery.velocity_value))
        switch (ctype)
          {
          case Bse::MIDI_SIGNAL_VELOCITY:
            bse_item_push_undo_proc (self, "change-control", id, equery.tick, ctype, equery.velocity_value);
            break;
          case Bse::MIDI_SIGNAL_FINE_TUNE:
            bse_item_push_undo_proc (self, "change-control", id, equery.tick, ctype, equery.fine_tune_value);
            break;
          default: ;
          }
      bse_item_undo_close (ustack);
    }

  /* set output parameters */
  g_value_set_enum (out_values++, success ? Bse::ERROR_NONE : Bse::ERROR_NO_EVENT);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, delete-event) {
  HELP	= "Delete an existing event from a part.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("id", "ID", NULL,
			 0, 0, BSE_PART_MAX_TICK, 1, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_genum ("error", "Error", NULL,
				BSE_TYPE_ERROR_TYPE, Bse::ERROR_NONE,
				SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    id	    = sfi_value_get_int (in_values++);
  BsePartQueryEvent equery;
  gboolean deleted = FALSE;

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_part_query_event (self, id, &equery);
  if (equery.event_type == BSE_PART_EVENT_NOTE)
    {
      BseUndoStack *ustack = bse_item_undo_open (self, "delete-note");
      deleted = bse_part_delete_note (self, id, equery.channel);
      if (deleted)
        bse_item_push_undo_proc (self, "insert-note", equery.channel, equery.tick, equery.duration,
                                 equery.note, equery.fine_tune, equery.velocity);
      bse_item_undo_close (ustack);
    }
  else if (equery.event_type == BSE_PART_EVENT_CONTROL)
    {
      BseUndoStack *ustack = bse_item_undo_open (self, "delete-control");
      deleted = bse_part_delete_control (self, id);
      if (deleted)
        bse_item_push_undo_proc (self, "insert-control", equery.tick, equery.control_type, equery.control_value);
      bse_item_undo_close (ustack);
    }

  /* set output parameters */
  g_value_set_enum (out_values++, deleted ? Bse::ERROR_NONE : Bse::ERROR_NO_EVENT);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, is-event-selected) {
  HELP	= "Check whether an event is selected.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("id", "ID", NULL,
			 0, 0, BSE_PART_MAX_TICK, 1, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_bool ("selected", "Selected", NULL,
			  FALSE, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    id	    = sfi_value_get_int (in_values++);
  gboolean selected = FALSE;
  BsePartQueryEvent equery;

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  if (bse_part_query_event (self, id, &equery) != BSE_PART_EVENT_NONE)
    selected = equery.selected;

  /* set output parameters */
  sfi_value_set_bool (out_values++, selected);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, list-notes-crossing) {
  HELP	= "List all notes within or crossing a tick range.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 1, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("note_list", "Note List", NULL,
				BSE_TYPE_PART_NOTE_SEQ, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    tick	    = sfi_value_get_int (in_values++);
  guint    duration = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_value_take_boxed (out_values++, bse_part_list_notes (self, ~0, tick, duration, BSE_MIN_NOTE, BSE_MAX_NOTE, TRUE));

  return Bse::ERROR_NONE;
}

METHOD (BsePart, list-notes-within) {
  HELP	= "List all notes within a tick range.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("channel", "Channel", NULL,
			 0, 0, BSE_PART_MAX_CHANNELS, 4, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 1, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("note_list", "Note List", NULL,
				BSE_TYPE_PART_NOTE_SEQ, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    channel  = sfi_value_get_int (in_values++);
  guint    tick	    = sfi_value_get_int (in_values++);
  guint    duration = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_value_take_boxed (out_values++, bse_part_list_notes (self, channel, tick, duration, BSE_MIN_NOTE, BSE_MAX_NOTE, FALSE));

  return Bse::ERROR_NONE;
}


METHOD (BsePart, queue-notes) {
  HELP	= "Queue updates for all notes starting within the given rectangle.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 1, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  IN	= bse_pspec_note_simple ("min_note", "Minimum Note", NULL,
				 SFI_PARAM_STANDARD);
  IN	= bse_pspec_note_simple ("max_note", "Maximum Note", NULL,
				 SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    tick	    = sfi_value_get_int (in_values++);
  guint    duration = sfi_value_get_int (in_values++);
  gint     min_note = sfi_value_get_note (in_values++);
  gint     max_note = sfi_value_get_note (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_part_queue_notes_within (self, tick, duration, min_note, max_note);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, queue-controls) {
  HELP	= "Queue updates for all control events and notes starting within the given range.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 1, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    tick	    = sfi_value_get_int (in_values++);
  guint    duration = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_part_queue_controls (self, tick, duration);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, list-selected-notes) {
  HELP	= "List all currently selected notes.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("note_list", "Note List", NULL,
				BSE_TYPE_PART_NOTE_SEQ, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_value_take_boxed (out_values++, bse_part_list_selected_notes (self));

  return Bse::ERROR_NONE;
}


METHOD (BsePart, check-overlap) {
  HELP	= "Check whether a note would overlap with neighbours.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 0, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  IN	= bse_pspec_note_simple ("note", "Note", NULL, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("note_list", "Note List", NULL,
				BSE_TYPE_PART_NOTE_SEQ, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    tick	    = sfi_value_get_int (in_values++);
  guint    duration = sfi_value_get_int (in_values++);
  gint     note     = sfi_value_get_note (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_value_take_boxed (out_values++, bse_part_list_notes (self, ~0, tick, duration, note, note, TRUE));

  return Bse::ERROR_NONE;
}

METHOD (BsePart, get-notes) {
  HELP	= "Retrieve all notes of specific frequency at or crossing a specific tick.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= bse_pspec_note_simple ("note", "Note", NULL,
				 SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("note_list", "Note List", NULL,
				BSE_TYPE_PART_NOTE_SEQ, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    tick	    = sfi_value_get_int (in_values++);
  gint     note     = sfi_value_get_note (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_value_take_boxed (out_values++, bse_part_list_notes (self, ~0, tick, 1, note, note, TRUE));

  return Bse::ERROR_NONE;
}

METHOD (BsePart, get-min-note) {
  HELP	= "Retrieve the minimum note supported in this part.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  OUT	= bse_pspec_note_simple ("note", "Note", NULL,
				 SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* it doesn't currently make sense to restrict the standard note range */
  sfi_value_set_int (out_values++, BSE_MIN_NOTE);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, get-max-note) {
  HELP	= "Retrieve the maximum note supported in this part.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  OUT	= bse_pspec_note_simple ("note", "Note", NULL,
				 SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* it doesn't currently make sense to restrict the standard note range */
  sfi_value_set_int (out_values++, BSE_MAX_NOTE);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, select-notes-exclusive) {
  HELP	= "Select all notes within rectangle and deselect all others.";
  IN	= bse_param_spec_object ("part", "Part", "Part",
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Tick", "Selection Tick",
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Duration", "Selection Duration",
			 0, 0, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  IN	= bse_pspec_note_simple ("min_note", "Minimum Selection Note", NULL,
				 SFI_PARAM_STANDARD);
  IN	= bse_pspec_note_simple ("max_note", "Maximum Selection Note", NULL,
				 SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint tick      = sfi_value_get_int (in_values++);
  guint duration  = sfi_value_get_int (in_values++);
  gint  min_note  = sfi_value_get_note (in_values++);
  gint  max_note  = sfi_value_get_note (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  bse_part_select_notes_exclusive (self, ~0, tick, duration, min_note, max_note);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, select-controls-exclusive) {
  HELP	= "Select all control events within range and deselect all others.";
  IN	= bse_param_spec_object ("part", "Part", "Part",
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Tick", "Selection Tick",
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Duration", "Selection Duration",
			 0, 0, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_genum ("control_type", "Control Type", NULL,
                                BSE_TYPE_MIDI_SIGNAL_TYPE, Bse::MIDI_SIGNAL_PITCH_BEND,
                                SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint tick      = sfi_value_get_int (in_values++);
  guint duration  = sfi_value_get_int (in_values++);
  guint ctype     = g_value_get_enum (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  bse_part_select_controls_exclusive (self, tick, duration, Bse::MidiSignalType (ctype));

  return Bse::ERROR_NONE;
}

METHOD (BsePart, select-controls) {
  HELP	= "Select all control events within range.";
  IN	= bse_param_spec_object ("part", "Part", "Part",
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Tick", "Selection Tick",
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Duration", "Selection Duration",
			 0, 0, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_genum ("control_type", "Control Type", NULL,
                                BSE_TYPE_MIDI_SIGNAL_TYPE, Bse::MIDI_SIGNAL_PITCH_BEND,
                                SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint tick      = sfi_value_get_int (in_values++);
  guint duration  = sfi_value_get_int (in_values++);
  guint ctype     = g_value_get_enum (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  bse_part_select_controls (self, tick, duration, Bse::MidiSignalType (ctype), TRUE);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, select-notes) {
  HELP	= "Select all notes within rectangle.";
  IN	= bse_param_spec_object ("part", "Part", "Part",
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Tick", "Selection Tick",
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Duration", "Selection Duration",
			 0, 0, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  IN	= bse_pspec_note_simple ("min_note", "Minimum Selection Note", NULL,
				 SFI_PARAM_STANDARD);
  IN	= bse_pspec_note_simple ("max_note", "Maximum Selection Note", NULL,
				 SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint tick      = sfi_value_get_int (in_values++);
  guint duration  = sfi_value_get_int (in_values++);
  gint  min_note  = sfi_value_get_note (in_values++);
  gint  max_note  = sfi_value_get_note (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  bse_part_select_notes (self, ~0, tick, duration, min_note, max_note, TRUE);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, deselect-notes) {
  HELP	= "Deselect all notes within rectangle.";
  IN	= bse_param_spec_object ("part", "Part", "Part",
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Tick", "Selection Tick",
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Duration", "Selection Duration",
			 0, 0, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  IN	= bse_pspec_note_simple ("min_note", "Minimum Selection Note", NULL,
				 SFI_PARAM_STANDARD);
  IN	= bse_pspec_note_simple ("max_note", "Maximum Selection Note", NULL,
				 SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint tick      = sfi_value_get_int (in_values++);
  guint duration  = sfi_value_get_int (in_values++);
  gint  min_note  = sfi_value_get_note (in_values++);
  gint  max_note  = sfi_value_get_note (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  bse_part_select_notes (self, ~0, tick, duration, min_note, max_note, FALSE);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, deselect-controls) {
  HELP	= "Deselect all controls within given range.";
  IN	= bse_param_spec_object ("part", "Part", "Part",
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Tick", "Selection Tick",
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Duration", "Selection Duration",
			 0, 0, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_genum ("control_type", "Control Type", NULL,
                                BSE_TYPE_MIDI_SIGNAL_TYPE, Bse::MIDI_SIGNAL_PITCH_BEND,
                                SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint tick      = sfi_value_get_int (in_values++);
  guint duration  = sfi_value_get_int (in_values++);
  guint ctype     = g_value_get_enum (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  bse_part_select_controls (self, tick, duration, Bse::MidiSignalType (ctype), FALSE);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, select-event) {
  HELP	= "Select an existing event.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("id", "ID", NULL,
			 0, 0, BSE_PART_MAX_TICK, 1, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    id	    = sfi_value_get_int (in_values++);
  BsePartQueryEvent equery;

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_part_query_event (self, id, &equery);
  if (equery.event_type == BSE_PART_EVENT_CONTROL)
    bse_part_set_control_selected (self, id, TRUE);
  else if (equery.event_type == BSE_PART_EVENT_NOTE)
    bse_part_set_note_selected (self, id, equery.channel, TRUE);
  else
    return Bse::ERROR_PROC_PARAM_INVAL;
  return Bse::ERROR_NONE;
}

METHOD (BsePart, deselect-event) {
  HELP	= "Deselect an existing event.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("id", "ID", NULL,
			 0, 0, BSE_PART_MAX_TICK, 1, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    id	    = sfi_value_get_int (in_values++);
  BsePartQueryEvent equery;

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_part_query_event (self, id, &equery);
  if (equery.event_type == BSE_PART_EVENT_CONTROL)
    bse_part_set_control_selected (self, id, FALSE);
  else if (equery.event_type == BSE_PART_EVENT_NOTE)
    bse_part_set_note_selected (self, id, equery.channel, FALSE);
  else
    return Bse::ERROR_PROC_PARAM_INVAL;
  return Bse::ERROR_NONE;
}

METHOD (BsePart, get-timing) {
  HELP  = "Retrieve song timing information at a specific tick.";
  IN    = bse_param_spec_object ("part", "Part", NULL, BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("tick", "Tick", "Tick to retrieve timing info about", 0, 0, G_MAXINT, 384, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("timing", "Timing", "Song Timing", BSE_TYPE_SONG_TIMING, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  SfiInt   tick = sfi_value_get_int (in_values++);
  BseItem *parent;
  BseSongTiming timing = { 0, };

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  parent = BSE_ITEM (self)->parent;
  if (BSE_IS_SONG (parent))
    bse_song_get_timing (BSE_SONG (parent), tick, &timing);
  else
    bse_song_timing_get_default (&timing);

  /* set output parameters */
  bse_value_set_boxed (out_values++, &timing);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, list-links) {
  HELP  = "List all places where parts are used (linked) from tracks, sorted by tick.";
  IN    = bse_param_spec_object ("part", "Part", NULL, BSE_TYPE_PART, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("link_list", "Link List", NULL,
                                BSE_TYPE_PART_LINK_SEQ, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_value_take_boxed (out_values++, bse_part_list_links (self));

  return Bse::ERROR_NONE;
}
