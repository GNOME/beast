// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
#include <bse/bseplugin.hh>
#include <bse/bseprocedure.hh>
#include <bse/bsepart.hh>
#include <bse/bsesong.hh>
#include "bsecxxplugin.hh"


AUTHORS	= "Tim Janik <timj@gtk.org>";
LICENSE = "GNU Lesser General Public License";


METHOD (BsePart, list-notes-crossing) {
  HELP	= "List all notes within or crossing a tick range.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 1, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("note_list", "Note List", NULL,
				BSE_TYPE_PART_NOTE_SEQ, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    tick	    = sfi_value_get_int (in_values++);
  guint    duration = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_value_take_boxed (out_values++, bse_part_list_notes (self, ~0, tick, duration, BSE_MIN_NOTE, BSE_MAX_NOTE, TRUE));

  return Bse::ERROR_NONE;
}

METHOD (BsePart, list-notes-within) {
  HELP	= "List all notes within a tick range.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("channel", "Channel", NULL,
			 0, 0, BSE_PART_MAX_CHANNELS, 4, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 1, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("note_list", "Note List", NULL,
				BSE_TYPE_PART_NOTE_SEQ, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    channel  = sfi_value_get_int (in_values++);
  guint    tick	    = sfi_value_get_int (in_values++);
  guint    duration = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_value_take_boxed (out_values++, bse_part_list_notes (self, channel, tick, duration, BSE_MIN_NOTE, BSE_MAX_NOTE, FALSE));

  return Bse::ERROR_NONE;
}


METHOD (BsePart, list-selected-notes) {
  HELP	= "List all currently selected notes.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("note_list", "Note List", NULL,
				BSE_TYPE_PART_NOTE_SEQ, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_value_take_boxed (out_values++, bse_part_list_selected_notes (self));

  return Bse::ERROR_NONE;
}


METHOD (BsePart, check-overlap) {
  HELP	= "Check whether a note would overlap with neighbours.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Start Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("duration", "Tick Duration", NULL,
			 1, 0, BSE_PART_MAX_TICK, 384, SFI_PARAM_STANDARD);
  IN	= bse_pspec_note_simple ("note", "Note", NULL, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("note_list", "Note List", NULL,
				BSE_TYPE_PART_NOTE_SEQ, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    tick	    = sfi_value_get_int (in_values++);
  guint    duration = sfi_value_get_int (in_values++);
  gint     note     = sfi_value_get_note (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_value_take_boxed (out_values++, bse_part_list_notes (self, ~0, tick, duration, note, note, TRUE));

  return Bse::ERROR_NONE;
}

METHOD (BsePart, get-notes) {
  HELP	= "Retrieve all notes of specific frequency at or crossing a specific tick.";
  IN	= bse_param_spec_object ("part", "Part", NULL,
				 BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("tick", "Tick", NULL,
			 0, 0, BSE_PART_MAX_TICK - 1, 384, SFI_PARAM_STANDARD);
  IN	= bse_pspec_note_simple ("note", "Note", NULL,
				 SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("note_list", "Note List", NULL,
				BSE_TYPE_PART_NOTE_SEQ, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  guint    tick	    = sfi_value_get_int (in_values++);
  gint     note     = sfi_value_get_note (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_value_take_boxed (out_values++, bse_part_list_notes (self, ~0, tick, 1, note, note, TRUE));

  return Bse::ERROR_NONE;
}

METHOD (BsePart, get-timing) {
  HELP  = "Retrieve song timing information at a specific tick.";
  IN    = bse_param_spec_object ("part", "Part", NULL, BSE_TYPE_PART, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("tick", "Tick", "Tick to retrieve timing info about", 0, 0, G_MAXINT, 384, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("timing", "Timing", "Song Timing", BSE_TYPE_SONG_TIMING, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);
  SfiInt   tick = sfi_value_get_int (in_values++);
  BseItem *parent;
  BseSongTiming timing = { 0, };

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  parent = BSE_ITEM (self)->parent;
  if (BSE_IS_SONG (parent))
    bse_song_get_timing (BSE_SONG (parent), tick, &timing);
  else
    bse_song_timing_get_default (&timing);

  /* set output parameters */
  bse_value_set_boxed (out_values++, &timing);

  return Bse::ERROR_NONE;
}

METHOD (BsePart, list-links) {
  HELP  = "List all places where parts are used (linked) from tracks, sorted by tick.";
  IN    = bse_param_spec_object ("part", "Part", NULL, BSE_TYPE_PART, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("link_list", "Link List", NULL,
                                BSE_TYPE_PART_LINK_SEQ, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BsePart *self = (BsePart*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_PART (self))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* action */
  bse_value_take_boxed (out_values++, bse_part_list_links (self));

  return Bse::ERROR_NONE;
}
