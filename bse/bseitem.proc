/* BSE - Better Sound Engine	-*-mode: c;-*-
 * Copyright (C) 2000-2002 Tim Janik
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * A copy of the GNU Lesser General Public License should ship along
 * with this library; if not, see http://www.gnu.org/copyleft/.
 */
#include <bse/bseplugin.h>
#include <bse/bseprocedure.h>
#include <bse/bseitem.h>
#include <bse/bsecontainer.h>
#include <bse/bseundostack.h>
#include <bse/bseparasite.h>	// FIXME


AUTHORS	= "Tim Janik <timj@gtk.org>";
LICENSE = "GNU Lesser General Public License";


METHOD (BseItem, get-type) {
  HELP	= "Retrieve an item's type name.";
  IN	= bse_param_spec_object ("item", "Item", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("string", NULL, NULL,
			    NULL, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item = (BseItem*) bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (item))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_set_static_string (out_values++, g_type_name (G_OBJECT_TYPE (item)));
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, get-type-name) {
  HELP	= "Retrieve an item's type name.";
  IN	= bse_param_spec_object ("item", "Item", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("string", NULL, NULL,
			    NULL,
			    SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item = (BseItem*) bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (item))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_set_string (out_values++, g_type_name (G_OBJECT_TYPE (item)));
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, get-type-blurb) {
  HELP	= "Retrieve an item's type description.";
  IN	= bse_param_spec_object ("item", "Item", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("string", NULL, NULL,
			    NULL,
			    SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item = (BseItem*) bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (item))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_set_string (out_values++, bse_type_get_blurb (G_OBJECT_TYPE (item)));
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, get-type-authors) {
  HELP	= "Retrieve authors of an item's type implementation.";
  IN	= bse_param_spec_object ("item", "Item", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("string", NULL, NULL,
			    NULL,
			    SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item = (BseItem*) bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (item))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_set_string (out_values++, bse_type_get_authors (G_OBJECT_TYPE (item)));
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, get-type-license) {
  HELP	= "Retrieve the license for an item's type implementation.";
  IN	= bse_param_spec_object ("item", "Item", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("string", NULL, NULL,
			    NULL,
			    SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item = (BseItem*) bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (item))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_set_string (out_values++, bse_type_get_license (G_OBJECT_TYPE (item)));
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, get-parent) {
  HELP	= "Retrieve an item's parent.";
  IN	= bse_param_spec_object ("item", "Item", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT	= bse_param_spec_object ("parent", "Parent", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item = (BseItem*) bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (item))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  bse_value_set_object (out_values++, item->parent);
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, get-project) {
  HELP	= "Retrieve an item's project.";
  IN	= bse_param_spec_object ("item", "Item", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT	= bse_param_spec_object ("project", "Project", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item = (BseItem*) bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (item))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  bse_value_set_object (out_values++, bse_item_get_project (item));
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, get-uname-path) {
  HELP	= "Retrieve the project relative uname path for this item.";
  IN	= bse_param_spec_object ("item", NULL, NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("uname_path", NULL, NULL,
			    NULL, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item = bse_value_get_object (in_values++);
  BseProject *project;
  
  /* check parameters */
  if (!BSE_IS_ITEM (item))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  project = bse_item_get_project (item);
  
  /* set output parameters */
  sfi_value_take_string (out_values++,
			 project ? bse_container_make_upath (BSE_CONTAINER (project), item) : NULL);
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, internal) {
  HELP	= "Check whether an item is internal, i.e. owned by another non-internal item.";
  IN	= bse_param_spec_object ("item", "Item", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_bool ("internal", "Internal", NULL,
                          FALSE, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item = (BseItem*) bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (item))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_set_bool (out_values++, BSE_ITEM_INTERNAL (item));
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, use) {
  HELP	= "Increment use count to keep an item alive.";
  IN	= bse_param_spec_object ("item", "Item", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT	= bse_param_spec_object ("used_item", "Item", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item = (BseItem*) bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (item) || (!item->parent && !item->use_count))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  bse_item_use (item);
  
  /* set output parameters */
  bse_value_set_object (out_values++, item);
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, unuse) {
  HELP	= "Decrement use count for when an item is not needed anymore.";
  IN	= bse_param_spec_object ("item", "Item", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item = (BseItem*) bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (item))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  if (item->use_count < 1)
    return BSE_ERROR_NOT_OWNER;

  bse_item_unuse (item);
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, set-name) {
  HELP	= "Set an item's name.";
  IN	= bse_param_spec_object ("item", "Item", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_string ("name", "Name", NULL,
			    NULL, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item     = bse_value_get_object (in_values++);
  const gchar *name = g_value_get_string (in_values++);

  /* check parameters */
  if (!BSE_IS_ITEM (item))
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* action */
  if (!bse_string_equals (name, BSE_OBJECT_UNAME (item)))
    bse_item_set (item, "uname", name, NULL);

  return BSE_ERROR_NONE;
}


METHOD (BseItem, get-name) {
  HELP	= "Retrieve an item's name.";
  IN	= bse_param_spec_object ("item", "Item", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("name", "Name", NULL,
			    NULL, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item = (BseItem*) bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (item))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_set_string (out_values++, BSE_OBJECT_UNAME (item));
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, get-name-or-type) {
  HELP	= "Retrieve an item's name or type if it has no name.";
  IN	= bse_param_spec_object ("item", "Item", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("name", "Name", NULL,
			    NULL, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item = (BseItem*) bse_value_get_object (in_values++);
  gchar *name = NULL;
  
  /* check parameters */
  if (!BSE_IS_ITEM (item))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  name = BSE_OBJECT_UNAME (item);
  if (name)
    sfi_value_set_string (out_values++, name);
  else
    sfi_value_set_string (out_values++, BSE_OBJECT_TYPE_NAME (item));
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, common-ancestor) {
  HELP	= "Retrieve the common ancestor of two items if there's any.";
  IN	= bse_param_spec_object ("item", "Item", "First item",
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  IN	= bse_param_spec_object ("item2", "Item2", "Second item",
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT	= bse_param_spec_object ("ancestor", "ancestor", "Common ancestor of both items",
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item  = bse_value_get_object (in_values++);
  BseItem *item2 = bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (item) || !BSE_IS_ITEM (item2))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  bse_value_set_object (out_values++, bse_item_common_ancestor (item, item2));
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, get-seqid) {
  HELP	= ("Retrieve an item's sequential ID. The sequential ID depends "
	   "on the item's type an it's position inbetween siblings "
	   "of the same type within it's immediate container.");
  IN	= bse_param_spec_object ("item", "Item", NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_int ("seq_id", "Sequential ID", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item = (BseItem*) bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (item))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_set_int (out_values++, bse_item_get_seqid (item));
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, check-is-a) {
  HELP  = "Check whether an item has a certain type.";
  IN    = bse_param_spec_object ("item", "Item", "The Item",
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("type_name", "Type Name", NULL,
			    NULL, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_bool ("is_a", NULL, NULL,
			  FALSE, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *item    = bse_value_get_object (in_values++);
  gchar *type_name = sfi_value_get_string (in_values++);
  GType type;
  gboolean is_a;
  
  /* check parameters */
  if (!type_name)
    type_name = "";
  
  /* action */
  type = g_type_from_name (type_name);
  is_a = item && g_type_is_a (G_OBJECT_TYPE (item), type);
  
  /* set output parameters */
  sfi_value_set_bool (out_values++, is_a);
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, get-property-candidates) {
  HELP	= "Retrieve tentative values for an item or item sequence property.";
  IN	= bse_param_spec_object ("item", NULL, NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_string ("property_name", NULL, "Item property name",
			    NULL, SFI_PARAM_STANDARD);
  OUT	= bse_param_spec_boxed ("candidates", "Candidates", NULL, BSE_TYPE_PROPERTY_CANDIDATES, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *self     = bse_value_get_object (in_values++);
  gchar   *property = sfi_value_get_string (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (self) || !property)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  BsePropertyCandidates *pc = bse_property_candidates_new();
  if (!bse_item_get_candidates (self, property, pc))
    {
      bse_property_candidates_free (pc);
      pc = NULL;
    }
  bse_value_take_boxed (out_values++, pc);

  return BSE_ERROR_NONE;
}

METHOD (BseItem, editable-property) {
  HELP	= "Test whether a property is editable according to object state and property options.";
  IN	= bse_param_spec_object ("item", NULL, NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_string ("property_name", NULL, "Item property name",
			    NULL, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_bool ("editable", NULL, NULL, FALSE, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *self     = bse_value_get_object (in_values++);
  gchar   *property = sfi_value_get_string (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (self) || !property)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_set_bool (out_values++, bse_object_editable_property (self, property));

  return BSE_ERROR_NONE;
}

METHOD (BseItem, get-icon) {
  HELP	= "Get the current icon of an item.";
  IN	= bse_param_spec_object ("item", NULL, NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT	= bse_param_spec_boxed ("icon", NULL, NULL,
				BSE_TYPE_ICON, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *self     = bse_value_get_object (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (self))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  bse_value_set_boxed (out_values++, bse_object_get_icon (BSE_OBJECT (self)));
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, group-undo) {
  HELP	= "Request multiple modifying actions on an item to be grouped together as single undo operation.";
  IN	= bse_param_spec_object ("item", NULL, NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_string ("name", NULL, "A name for the undo group to be created",
                            NULL, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *self     = bse_value_get_object (in_values++);
  gchar *name       = sfi_value_get_string (in_values++);
  BseUndoStack *ustack;

  /* check parameters */
  if (!BSE_IS_ITEM (self) || !name)
    return BSE_ERROR_PROC_PARAM_INVAL;

  ustack = bse_item_undo_open (self, "item-group-undo");
  bse_undo_stack_add_merger (ustack, name);
  bse_item_undo_close (ustack);
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, ungroup-undo) {
  HELP	= "Ends the undo grouping opened up by a previous group-undo() call.";
  IN	= bse_param_spec_object ("item", NULL, NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *self     = bse_value_get_object (in_values++);
  BseUndoStack *ustack;

  /* check parameters */
  if (!BSE_IS_ITEM (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  ustack = bse_item_undo_open (self, "item-ungroup-undo");
  bse_undo_stack_remove_merger (ustack);
  bse_item_undo_close (ustack);
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, undo) {
  HELP	= "Call the undo function of the project corresponding to this item if any.";
  IN	= bse_param_spec_object ("item", NULL, NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *self     = bse_value_get_object (in_values++);
  BseProject *project;

  /* check parameters */
  if (!BSE_IS_ITEM (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  project = bse_item_get_project (self);
  if (project)
    bse_item_exec_void (project, "undo");

  return BSE_ERROR_NONE;
}

METHOD (BseItem, redo) {
  HELP	= "Call the redo function of the project corresponding to this item if any.";
  IN	= bse_param_spec_object ("item", NULL, NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *self     = bse_value_get_object (in_values++);
  BseProject *project;

  /* check parameters */
  if (!BSE_IS_ITEM (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  project = bse_item_get_project (self);
  if (project)
    bse_item_exec_void (project, "redo");

  return BSE_ERROR_NONE;
}

METHOD (BseItem, clear-undo) {
  HELP	= "Call the clear-undo function of the project corresponding to this item if any.";
  IN	= bse_param_spec_object ("item", NULL, NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *self     = bse_value_get_object (in_values++);
  BseProject *project;

  /* check parameters */
  if (!BSE_IS_ITEM (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  project = bse_item_get_project (self);
  if (project)
    bse_item_exec_void (project, "clear-undo");

  return BSE_ERROR_NONE;
}

METHOD (BseItem, undo-depth) {
  HELP  = "Call the undo-depth function of the project corresponding to this item if any.";
  IN    = bse_param_spec_object ("item", NULL, NULL,
                                 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_int ("undo_depth", NULL, "Number of times undo can be called",
                         0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseItem *self     = bse_value_get_object (in_values++);
  gint depth = 0;
  BseProject *project;

  /* check parameters */
  if (!BSE_IS_ITEM (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  project = bse_item_get_project (self);
  if (project)
    bse_item_exec (project, "undo-depth", &depth);

  /* set output parameters */
  sfi_value_set_int (out_values++, depth);

  return BSE_ERROR_NONE;
}

METHOD (BseItem, redo-depth) {
  HELP  = "Call the redo-depth function of the project corresponding to this item if any.";
  IN    = bse_param_spec_object ("item", NULL, NULL,
                                 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_int ("redo_depth", NULL, "Number of times redo can be called",
                         0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseItem *self     = bse_value_get_object (in_values++);
  gint depth = 0;
  BseProject *project;

  /* check parameters */
  if (!BSE_IS_ITEM (self))
    return BSE_ERROR_PROC_PARAM_INVAL;

  project = bse_item_get_project (self);
  if (project)
    bse_item_exec (project, "redo-depth", &depth);

  /* set output parameters */
  sfi_value_set_int (out_values++, depth);

  return BSE_ERROR_NONE;
}

METHOD (BseItem, fixme-set-parasite) {
  IN    = bse_param_spec_object ("item", NULL, NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("name", NULL, NULL, NULL, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_fblock ("parasite", NULL, NULL, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *self     = bse_value_get_object (in_values++);
  const gchar *name = sfi_value_get_string (in_values++);
  SfiFBlock *fblock = sfi_value_get_fblock (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (self) || !name || !fblock)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* action */
  bse_parasite_set_floats (BSE_OBJECT (self), name, fblock->n_values, fblock->values);
  
  return BSE_ERROR_NONE;
}

METHOD (BseItem, fixme-get-parasite) {
  IN    = bse_param_spec_object ("item", NULL, NULL,
				 BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("name", NULL, NULL, NULL, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_fblock ("parasite", NULL, NULL, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseItem *self     = bse_value_get_object (in_values++);
  const gchar *name = sfi_value_get_string (in_values++);
  
  /* check parameters */
  if (!BSE_IS_ITEM (self) || !name)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  sfi_value_take_fblock (out_values++, bse_parasite_get_floats (BSE_OBJECT (self), name));
  
  return BSE_ERROR_NONE;
}
