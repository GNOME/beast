/* BSE - Bedevilled Sound Engine        -*-mode: c;-*-
 * Copyright (C) 2002 Tim Janik
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 */
#include <bse/bseplugin.h>
#include <bse/bseprocedure.h>
#include <bse/bsescripthelper.h>
#include <bse/bseserver.h>
#include <bse/bswprivate.h>


AUTHOR  = "Tim Janik <timj@gtk.org>";
CRIGHTS = "Tim Janik";
DATE    = "2002";

PROCEDURE (bse-note-to-freq, "Utils/Notes/Note to Freq") {
  HELP  = "Retrive the frequency of a certain note.";
  IN    = bse_param_spec_uint ("note", "Note", NULL,
			       BSE_MIN_NOTE, BSE_MAX_NOTE,
			       BSE_KAMMER_NOTE, 1,
			       BSE_PARAM_DEFAULT);
  IN    = bse_param_spec_int ("fine_tune", "Fine Tune", NULL,
			      BSE_MIN_FINE_TUNE, BSE_MAX_FINE_TUNE,
			      0, 1, BSE_PARAM_DEFAULT);
  OUT   = bse_param_spec_float ("frequency", "Frequency", NULL,
				0, BSE_MAX_FREQUENCY_f, BSE_KAMMER_FREQUENCY_f, 0.1,
				BSE_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  gint       note       = g_value_get_uint (in_values++);
  gint       fine_tune  = g_value_get_int (in_values++);
  BswNoteDescription *info;
  gfloat freq;
  
  /* action */
  info = bsw_note_description (note, fine_tune);
  if (!info->name)
    freq = 0;
  else
    freq = info->freq;
  bsw_note_description_free (info);

  /* set out params */
  g_value_set_float (out_values++, freq);
  
  return BSE_ERROR_NONE;
}

PROCEDURE (bse-note-from-freq, "Utils/Notes/Note from Freq") {
  HELP  = "Retrive the note of a certain frequency.";
  IN    = bse_param_spec_float ("frequency", "Frequency", NULL,
				0, BSE_MAX_FREQUENCY_f, BSE_KAMMER_FREQUENCY_f, 0.1,
				BSE_PARAM_DEFAULT);
  OUT   = bse_param_spec_uint ("note", "Note", NULL,
			       BSE_MIN_NOTE, BSE_MAX_NOTE,
			       BSE_KAMMER_NOTE, 1,
			       BSE_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  gfloat frequency = g_value_get_float (in_values++);
  
  /* set out params */
  g_value_set_uint (out_values++, bse_note_from_freq (frequency));
  
  return BSE_ERROR_NONE;
}
