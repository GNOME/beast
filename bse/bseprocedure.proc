// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
#include "bseplugin.hh"
#include "bseprocedure.hh"
#include "bsescripthelper.hh"
#include "bseserver.hh"
#include "bsemath.hh"    /* bse_temp_freq */
#include "bsemain.hh"
#include "bsecxxplugin.hh"
#include "bsebuiltin_externs.cc"
#include <string.h>     /* strchr */
#include <stdlib.h>     /* strtol */


AUTHORS = "Tim Janik <timj@gtk.org>";
LICENSE = "GNU Lesser General Public License";

PROCEDURE (bse-note-to-freq, "Note to Freq") {
  HELP  = "Retrieve the frequency of a certain note.";
  IN    = bse_param_spec_enum ("musical_tuning", "Musical Tuning", NULL,
			       BSE_MUSICAL_TUNING_12_TET, BSE_TYPE_MUSICAL_TUNING_TYPE, SFI_PARAM_STANDARD);
  IN    = bse_pspec_note_simple ("note", "Note", NULL, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_fine_tune ("fine_tune", "Fine Tune", NULL);
  OUT   = sfi_pspec_real ("frequency", "Frequency", NULL,
			  BSE_KAMMER_FREQUENCY, 0, BSE_MAX_FREQUENCY, 0.1,
			  SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseMusicalTuningType musical_tuning = (BseMusicalTuningType) g_value_get_enum (in_values++);
  int                  note           = sfi_value_get_int (in_values++);
  int                  fine_tune      = sfi_value_get_int (in_values++);
  BseNoteDescription *info;
  gfloat freq;

  /* action */
  info = bse_note_description (musical_tuning, note, fine_tune);
  if (!info->name)
    freq = 0;
  else
    freq = info->freq;
  bse_note_description_free (info);

  /* set out params */
  sfi_value_set_real (out_values++, freq);

  return Bse::ERROR_NONE;
}

PROCEDURE (bse-note-from-freq, "Note from Freq") {
  HELP  = "Retrieve the note of a certain frequency.";
  IN    = bse_param_spec_enum ("musical_tuning", "Musical Tuning", NULL,
			       BSE_MUSICAL_TUNING_12_TET, BSE_TYPE_MUSICAL_TUNING_TYPE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_real ("frequency", "Frequency", NULL,
			  BSE_KAMMER_FREQUENCY, 0, BSE_MAX_FREQUENCY, 0.1,
			  SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_note ("note", "Note", NULL, SFI_KAMMER_NOTE, SFI_MIN_NOTE, SFI_MAX_NOTE, TRUE, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
        const GValue      *in_values,
        GValue            *out_values)
{
  /* extract parameter values */
  BseMusicalTuningType musical_tuning = (BseMusicalTuningType) g_value_get_enum (in_values++);
  float                frequency      = sfi_value_get_real (in_values++);

  /* set out params */
  sfi_value_set_int (out_values++, bse_note_from_freq (musical_tuning, frequency));

  return Bse::ERROR_NONE;
}

PROCEDURE (bse-note-describe, "Describe Note") {
  HELP	= "Describe a note, providing information about its octave, semitone, frequency, etc.";
  IN    = bse_param_spec_enum ("musical_tuning", "Musical Tuning", NULL,
			       BSE_MUSICAL_TUNING_12_TET, BSE_TYPE_MUSICAL_TUNING_TYPE, SFI_PARAM_STANDARD);
  IN    = bse_pspec_note_simple ("note", "Note", NULL, SFI_PARAM_STANDARD);
  IN    = bse_param_spec_fine_tune ("fine_tune", "Fine Tune", NULL);
  OUT   = bse_param_spec_boxed ("note-description", "Note Description", NULL,
                                BSE_TYPE_NOTE_DESCRIPTION, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseMusicalTuningType musical_tuning = (BseMusicalTuningType) g_value_get_enum (in_values++);
  int                  note	      = sfi_value_get_int (in_values++);
  int                  fine_tune      = sfi_value_get_int (in_values++);

  /* describe note */
  bse_value_take_boxed (out_values++, bse_note_description (musical_tuning, note, fine_tune));

  return Bse::ERROR_NONE;
}

PROCEDURE (bse-note-describe-from-freq, "Describe Note From Freq") {
  HELP	= "Describe a note, given its frequency.";
  IN    = bse_param_spec_enum ("musical_tuning", "Musical Tuning", NULL,
			       BSE_MUSICAL_TUNING_12_TET, BSE_TYPE_MUSICAL_TUNING_TYPE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_real ("freq", "Frequency", NULL,
			  BSE_KAMMER_FREQUENCY,
			  0, BSE_MAX_FREQUENCY,
			  10.0, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("note-description", "Note Description", NULL,
                                BSE_TYPE_NOTE_DESCRIPTION, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseMusicalTuningType musical_tuning = (BseMusicalTuningType) g_value_get_enum (in_values++);
  float                freq	      = sfi_value_get_real (in_values++);
  gint note;

  /* describe note */
  note = bse_note_from_freq (musical_tuning, freq);
  bse_value_take_boxed (out_values++, bse_note_description (musical_tuning, note, 0));

  return Bse::ERROR_NONE;
}

PROCEDURE (bse-note-from-string, "Note From String") {
  HELP	= "Describe a note, given its name and octave offset.";
  IN    = bse_param_spec_enum ("musical_tuning", "Musical Tuning", NULL,
			       BSE_MUSICAL_TUNING_12_TET, BSE_TYPE_MUSICAL_TUNING_TYPE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("name", "Name", NULL,
			    "", SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_boxed ("note-description", "Note Description", NULL,
                                BSE_TYPE_NOTE_DESCRIPTION, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseMusicalTuningType musical_tuning = (BseMusicalTuningType) g_value_get_enum (in_values++);
  const char *name = sfi_value_get_string (in_values++);
  gint note;

  /* describe note */
  note = bse_note_from_string (name);
  bse_value_take_boxed (out_values++, bse_note_description (musical_tuning, note, 0));

  return Bse::ERROR_NONE;
}

PROCEDURE (bse-note-construct, "Note Construction") {
  HELP	= "Describe a note, given its semitone, octave and fine tune.";
  IN    = bse_param_spec_enum ("musical_tuning", "Musical Tuning", NULL,
			       BSE_MUSICAL_TUNING_12_TET, BSE_TYPE_MUSICAL_TUNING_TYPE, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("semitone", NULL, NULL,
			 9, 0, 11, 1,
			 SFI_PARAM_STANDARD);
  IN    = bse_param_spec_octave ("octave", NULL, NULL);
  IN    = bse_param_spec_fine_tune ("fine_tune", "Fine Tune", NULL);
  OUT   = bse_param_spec_boxed ("note-description", "Note Description", NULL,
                                BSE_TYPE_NOTE_DESCRIPTION, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseMusicalTuningType musical_tuning = (BseMusicalTuningType) g_value_get_enum (in_values++);
  guint                semitone	      = sfi_value_get_int (in_values++);
  int                  octave	      = sfi_value_get_int (in_values++);
  int                  fine_tune      = sfi_value_get_int (in_values++);
  int note;

  /* describe note */
  note = BSE_NOTE_GENERIC (octave, semitone);
  bse_value_take_boxed (out_values++, bse_note_description (musical_tuning, note, fine_tune));

  return Bse::ERROR_NONE;
}
