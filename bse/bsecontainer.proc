// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
#include <bse/bseplugin.hh>
#include <bse/bseprocedure.hh>
#include <bse/bsecontainer.hh>
#include "bsecxxplugin.hh"
#include "bsebuiltin_externs.cc"


AUTHORS	= "Tim Janik <timj@gtk.org>";
LICENSE = "GNU Lesser General Public License";


METHOD (BseContainer, list-children) {
  HELP	= _("Retrieve all immediate children of a container");
  IN	= bse_param_spec_object ("container", NULL, NULL, BSE_TYPE_CONTAINER, SFI_PARAM_STANDARD);
  OUT	= bse_param_spec_boxed ("item_list", NULL, NULL, BSE_TYPE_ITEM_SEQ, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseContainer *container = (BseContainer*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_CONTAINER (container))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* set output parameters */
  bse_value_take_boxed (out_values++, bse_container_list_children (container));

  return Bse::ERROR_NONE;
}

METHOD (BseContainer, get-item) {
  HELP  = "Retrieve a containers immediate child from it's sequential id.";
  IN	= bse_param_spec_object ("container", NULL, NULL, BSE_TYPE_CONTAINER, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_string ("item_type", NULL, "Type of the item to retrieve",
			    NULL, SFI_PARAM_STANDARD);
  IN    = sfi_pspec_int ("seq_id", NULL, "Sequential ID",
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT   = bse_param_spec_object ("item", NULL, "The item with seqid as requested", BSE_TYPE_ITEM, SFI_PARAM_STANDARD);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseContainer *container = (BseContainer*) bse_value_get_object (in_values++);
  const char *type_name   = sfi_value_get_string (in_values++);
  guint seqid             = sfi_value_get_int (in_values++);
  GType type = type_name ? g_type_from_name (type_name) : 0;

  /* check parameters */
  if (!BSE_IS_CONTAINER (container) || !g_type_is_a (type, BSE_TYPE_ITEM))
    return Bse::ERROR_PROC_PARAM_INVAL;

  /* set output parameters */
  bse_value_set_object (out_values++, bse_container_get_item (container, type, seqid));

  return Bse::ERROR_NONE;
}
