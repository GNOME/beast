/* BSE - Bedevilled Sound Engine	-*-mode: c;-*-
 * Copyright (C) 2002 Tim Janik
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */
#include <bse/bseplugin.h>
#include <bse/bseprocedure.h>
#include <bse/bsecontainer.h>


AUTHOR	= "Tim Janik <timj@gtk.org>";
CRIGHTS	= "Tim Janik";
DATE	= "2002";


METHOD (BseContainer, list-items) {
  HELP	= "Retrive all items within a container";
  IN	= bse_param_spec_object ("container", NULL, NULL, BSE_TYPE_CONTAINER, SFI_PARAM_DEFAULT);
  OUT	= sfi_pspec_seq ("item_list", NULL, NULL,
			 sfi_pspec_proxy ("proxy", NULL, NULL, SFI_PARAM_DEFAULT),
			 SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseContainer *container = bse_value_get_object (in_values++);
  BseProxySeq *pseq;
  
  /* check parameters */
  if (!BSE_IS_CONTAINER (container))
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  pseq = bse_container_list_items (container);
  sfi_value_take_seq (out_values++, bse_proxy_seq_to_seq (pseq));
  bse_proxy_seq_free (pseq);
  
  return BSE_ERROR_NONE;
}

METHOD (BseContainer, lookup-item) {
  BLURB = "Find an item within a container.";
  HELP	= ("Lookup an immediate child of a container from its uname (the uname "
	   "is the name of the item, unique between all immediate children of a container).");
  IN	= bse_param_spec_object ("container", "Container", "The Container", BSE_TYPE_CONTAINER, SFI_PARAM_DEFAULT);
  IN    = sfi_pspec_string ("uname", "UName", "Unique item name", NULL, SFI_PARAM_DEFAULT);
  OUT   = bse_param_spec_object ("item", "Item", "The item named by uname", BSE_TYPE_ITEM, SFI_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	const GValue      *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  BseContainer *container = bse_value_get_object (in_values++);
  gchar *uname            = sfi_value_get_string (in_values++);
  
  /* check parameters */
  if (!BSE_IS_CONTAINER (container) || !uname)
    return BSE_ERROR_PROC_PARAM_INVAL;
  
  /* set output parameters */
  bse_value_set_object (out_values++, bse_container_lookup_item (container, uname));
  
  return BSE_ERROR_NONE;
}
