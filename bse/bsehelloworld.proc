/* BSE - Bedevilled Sound Engine	-*-mode: c;-*-
 * Copyright (C) 1999, 2000-2001 Tim Janik
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */
#include        <bse/bseplugin.h>
#include        <bse/bseprocedure.h>

#include	<stdlib.h>


AUTHOR	= "Tim Janik <timj@gtk.org>";
CRIGHTS	= "Tim Janik";
DATE	= "1999";


PROCEDURE (bse-hello-world, "Toys/Hello World") {
  HELP	= ("Hello World - First Plugin ever executed by BSE. "
	   "Its purpose is to say \"Hello World\" to BSE and the "
	   "general outside. This plugin takes no input or output"
	   "parameters.");
  /* no input/output parameters */
} BODY (BseProcedureClass *proc,
	GValue            *in_values,
	GValue            *out_values)
{
  /* issue a message */
  g_message ("Hello World");

  return BSE_ERROR_NONE;
}

PROCEDURE (bse-randomizer, "Toys/Randomizer") {
  HELP	= ("Randomizer will take on integer as input parameter, "
	   "use it as seed value and return a string containing "
	   "a random number. The deeper sense behind this plugin "
	   "is to test out the parameter passing functionality.");
  
  /* input parameters */
  IN	= bse_param_spec_bool ("use-seed", "Use seed value?", NULL,
			     FALSE, BSE_PARAM_DEFAULT);
  IN	= bse_param_spec_int ("seed", "Random Seed", NULL,
			    -32768, 32767, 42, 1, BSE_PARAM_DEFAULT);
  /* output parameters */
  OUT	= bse_param_spec_string ("text", "Random Text", NULL,
			       NULL, BSE_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	GValue            *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  gint use_seed = g_value_get_boolean (in_values++);
  gint seed     = g_value_get_int (in_values++);
  gchar *string;

  /* check parameters */
  if (use_seed && seed == 0)
    return BSE_ERROR_PROC_PARAM_INVAL;

  /* perform our duty */
  if (use_seed)
    srand (seed);

  string = g_strdup_printf ("Random Number: %d", rand ());

  /* set output parameters */
  g_value_set_string (out_values++, string);
  g_free (string);

  return BSE_ERROR_NONE;
}

PROCEDURE (bse-progressor, "Toys/Progressor") {
  HELP	= ("Progressor takes two seed values and then starts progressing. "
	   "It doesn't do anything particularly usefull, other than "
	   "sharing CPU time with the main program from time to time.");
  IN	= bse_param_spec_uint ("n-iterations", "Iterations", "Number of total Iterations",
			     0, 1024*1024, 1000, 512, BSE_PARAM_DEFAULT);
  IN	= bse_param_spec_uint ("n-wait-spins", "Cycles", "Number of internal iterations",
			     0, 1024*1024, 1000, 512, BSE_PARAM_DEFAULT);
  IN	= bse_param_spec_bool ("update-progress", "Update Progress Value?", NULL,
			     TRUE, BSE_PARAM_DEFAULT);
  /* output parameters */
  OUT	= bse_param_spec_string ("text1", "Status1", NULL,
			       NULL, BSE_PARAM_DEFAULT);
  OUT	= bse_param_spec_string ("text2", "Status2", NULL,
			       NULL, BSE_PARAM_DEFAULT);
} BODY (BseProcedureClass *proc,
	GValue            *in_values,
	GValue            *out_values)
{
  /* extract parameter values */
  guint n_iter  = g_value_get_uint (in_values++);
  guint n_spin  = g_value_get_uint (in_values++);
  gint progress = g_value_get_boolean (in_values++);
  gfloat total = n_iter;

  /* check parameters */
  /* return BSE_ERROR_PROC_PARAM_INVAL; */

  /* perform our duty */
  while (n_iter--)
    {
      guint n = n_spin;

      while (n--)
	{
	  g_free (g_strdup ("x"));
	}

      if (progress)
	{
	  if (bse_procedure_status (proc, 1.0 - ((gfloat) n_iter) / total))
	    return BSE_ERROR_PROC_ABORT;
	}
      else
	{
	  if (bse_procedure_status (proc, -1))
	    return BSE_ERROR_PROC_ABORT;
	}
    }

  /* set output parameters */
  g_value_set_string (out_values++, "Hooh, that was good!");
  g_value_set_string (out_values++, "Now gimme a break...");

  return BSE_ERROR_NONE;
}
