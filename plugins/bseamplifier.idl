// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
#include <bse/bsecore.idl>
namespace Bse { // FIXME: bad workaround
interface Effect;
};
namespace Bse {
interface Amplifier : Effect {
  Info    icon      = "icons/ampctrl.png";
  Info    authors   = "Tim Janik";
  Info    license   = _("GNU Lesser General Public License");
  Info    category  = _("/Routing/Amplifier");
  Info    blurb     = _("BseAmplifier provides input signal controlled amplification or "
                        "attenuation. "
                        "It supports two control inputs and two audio inputs which "
                        "are mixed together after balance and level adjustments. "
                        "The gain setting controls preamplification of the mixed audio "
                        "signal. The mixed control signal, weighted by a strength "
                        "setting, determines additional amplification, allowing for "
                        "external sources to modulate the overall volume (tremolo). "
                        "The mixed control signal can influence the amplification "
                        "linearly (to amplify other control signals) or exponentially "
                        "(to amplify audio signals). "
                        "Finally, the master volume controls amplification of the "
                        "resulting output signal.");
  IStream audio_in1  = (_("Audio In1"), _("First audio input"));
  IStream audio_in2  = (_("Audio In2"), _("Second audio input"));
  IStream ctrl_in1   = (_("Ctrl In1"), _("First control input"));
  IStream ctrl_in2   = (_("Ctrl In2"), _("Second control input"));
  OStream audio_out  = (_("Audio Out"), _("Amplified audio output"));
  group _("Audio Input") {
    Real  alevel1    = Perc (_("Input 1 [%]"), _("Attenuate the level of audio input 1"), 100, STANDARD);
    Real  alevel2    = Perc (_("Input 2 [%]"), _("Attenuate the level of audio input 2"), 100, STANDARD);
    Real  abalance   = Balance (_("Balance"), _("Balance audio input levels"), 0, GUI);
  };
  group _("Control Input") {
    Real  clevel1    = Perc (_("Input 1 [%]"), _("Attenuate the level of control input 1"), 100, STANDARD);
    Real  clevel2    = Perc (_("Input 2 [%]"), _("Attenuate the level of control input 2"), 100, STANDARD);
    Real  cbalance   = Balance (_("Balance"), _("Balance control input levels"), 0, GUI);
    Bool  ctrl_mul   = Bool (_("Multiply Controls"),
                             _("Switch the two control inputs to work like a chain of gain "
                               "controls, rather than mixing them together, weighted by balance."),
                             TRUE, STANDARD);
    Bool  ctrl_exp   = Bool (_("Exponential Control"), _("Toggle exponential and linear control response"), FALSE, STANDARD);
  };
  group _("Output") {
    Real  ostrength     = Perc (_("Control Strength"), _("Adjust how much the control signals affect the output volume"), 100, STANDARD);
    Real  base_level    = Perc (_("Base Volume"), _("Base amplification (the control signal adds up to this)"), 0, STANDARD);
    Real  master_volume = DBVolume (_("Master Volume"), _("Output stage amplification in decibel"), 0, MINDB, +24, STANDARD);
  };
  group "compat" {
    Real  audio_balance   = Balance (NULL, NULL, 0, "w");               /* -> abalance (v0.5.4) */
    Real  ctrl_balance    = Balance (NULL, NULL, 0, "w");               /* -> cbalance (v0.5.4) */
    Real  ctrl_strength_f = Real (NULL, NULL, 1, 0, 1, 0.1, "w");       /* *100 -> ostrength (v0.5.4) */
    Real  master_gain_f   = Real (NULL, NULL, 1, 0, 1, 0.1, "w");       /* *100 -> olevel (v0.5.4) */
    Real  audio_gain_f    = Real (NULL, NULL, 0, 0, 1, 0.1, "w");       /* *100 -> base_level (v0.5.4) */
    Real  olevel          = Perc (NULL, NULL, 100, "w");                /* -> master_volume (v0.6.2) */
  };
};
};
