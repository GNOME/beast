/* ArtsCompressor - aRts Compressor Effect                        -*-mode: c++;-*-
 * Copyright (C) 2001 Matthias Kretz <kretz@kde.org>
 * Copyright (C) 2003 Stefan Westerfeld <stefan@space.twc.de>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
#include <bse/bse.idl>

namespace Arts {

using namespace Bse;

class Compressor : Effect {
  Info    icon      = "icons/compressor.png";
  Info    authors   = "Matthias Kretz, Stefan Westerfeld";
  Info    license   = _("GNU General Public License");
  Info    category  = _("/Enhance/ArtsCompressor");
  Info    blurb     = _("ArtsCompressor compresses the sound.");
  IStream audio_in  = (_("Audio In"), _("Audio input"));
  OStream audio_out = (_("Audio Out"), _("Compressed audio output"));
  group _("Parameters") {
    Real attack    = Real (_("Attack [ms]"), _("Set the attack time in milliseconds"), 10.0, 0.1, 250.0, 10.0, STANDARD ":scale");
    Real release   = Real (_("Release [ms]"), _("Set the release time in milliseconds"), 10.0, 0.1, 250.0, 10.0, STANDARD ":scale");
    Real threshold = LogScale (_("Threshold"), _("Set the threshold"), 1, 0.00001, 1, 0.001, pow (2, -8), 2, 8, STANDARD);
    Real ratio     = Real (_("Ratio"), _("Set the compression ratio"), 0.8, 0.0, 1.0, 0.1, STANDARD ":scale");
    Real output    = LogScale (_("Output"), _("Set the output amplification"), 1, 0.1, 10.0, 1, pow (2, 0), 2, log (10) / log (2), STANDARD);
  };
};

class StereoCompressor : Effect {
  Info    icon            = "icons/compressor2.png";
  Info    authors         = "Matthias Kretz, Stefan Westerfeld";
  Info    license         = _("GNU General Public License");
  Info    category        = _("/Enhance/ArtsStereoCompressor");
  Info    blurb           = _("ArtsStereoCompressor compresses the sound.");
  IStream left_audio_in   = (_("Left Audio In"), _("Left audio input"));
  IStream right_audio_in  = (_("Right Audio In"), _("Right audio input"));
  OStream left_audio_out  = (_("Left Audio Out"), _("Compressed left audio output"));
  OStream right_audio_out = (_("Right Audio Out"), _("Compressed right audio output"));
  group _("Parameters") {
    Real attack    = Real (_("Attack [ms]"), _("Set the attack time in milliseconds"), 10.0, 0.1, 250.0, 10.0, STANDARD ":scale");
    Real release   = Real (_("Release [ms]"), _("Set the release time in milliseconds"), 10.0, 0.1, 250.0, 10.0, STANDARD ":scale");
    Real threshold = LogScale (_("Threshold"), _("Set the threshold"), 1, 0.00001, 1, 0.001, pow (2, -8), 2, 8, STANDARD);
    Real ratio     = Real (_("Ratio"), _("Set the compression ratio"), 0.8, 0.0, 1.0, 0.1, STANDARD ":scale");
    Real output    = LogScale (_("Output"), _("Set the output amplification"), 1, 0.1, 10.0, 1, pow(2, 0), 2, log(10)/log(2), STANDARD);
  };
};

}; // Arts

/* vim:set ts=8 sw=2 sts=2 syntax=cpp: */
