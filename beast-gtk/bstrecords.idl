/* BST - Bedevilled Audio System IDL	-*-mode: c++;-*-
 * Copyright (C) 2002 Tim Janik
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 */

namespace Bst {
/*
choice Test1 {
  FOO1,
  FOO2,
};
record Test2 {
  Test1 tval;
};
*/
using namespace Sfi;

Const STORAGE = ":r:w:S:";
Const STANDARD = STORAGE "G:";

choice Direction {
  UP    = (_("Up"), _("Move upwards")),
  LEFT  = (_("Left"), _("Move to the left")),
  RIGHT = (_("Right"), _("Move to the right")),
  DOWN  = (_("Down"), _("Move downwards"))
};

choice NoteLength {
  NOTE_LENGTH_NONE      = (Neutral,    _("None"), _("Unspecified length")),
  NOTE_LENGTH_1         = (_("1/1"),   _("Whole note")),
  NOTE_LENGTH_2         = (_("1/2"),   _("Half note")),
  NOTE_LENGTH_4         = (_("1/4"),   _("Quarter note")),
  NOTE_LENGTH_8         = (_("1/8"),   _("Eighths note")),
  NOTE_LENGTH_16        = (_("1/16"),  _("Sixteenth note")),
  NOTE_LENGTH_32        = (_("1/32"),  _("Thirty-secondth note")),
  NOTE_LENGTH_64        = (_("1/64"),  _("Sixty-fourth note")),
  NOTE_LENGTH_128       = (_("1/128"), _("Hundred twenty-eighth note")),
  NOTE_LENGTH_1P        = (_("1/1."),  _("Dotted whole note")),
  NOTE_LENGTH_2P        = (_("1/2."),  _("Dotted half note")),
  NOTE_LENGTH_4P        = (_("1/4."),  _("Dotted quarter note")),
  NOTE_LENGTH_8P        = (_("1/8."),  _("Dotted eighths note")),
  NOTE_LENGTH_16P       = (_("1/16."), _("Dotted sixteenth note")),
  NOTE_LENGTH_32P       = (_("1/32."), _("Dotted thirty-secondth note")),
  NOTE_LENGTH_64P       = (_("1/64."), _("Dotted sixty-fourth note")),
  NOTE_LENGTH_128P      = (_("1/128."),_("Dotted hundred twenty-eighth note")),
  NOTE_LENGTH_1T        = (_("1/1T"),  _("Triplet whole note")),
  NOTE_LENGTH_2T        = (_("1/2T"),  _("Triplet half note")),
  NOTE_LENGTH_4T        = (_("1/4T"),  _("Triplet quarter note")),
  NOTE_LENGTH_8T        = (_("1/8T"),  _("Triplet eighths note")),
  NOTE_LENGTH_16T       = (_("1/16T"), _("Triplet sixteenth note")),
  NOTE_LENGTH_32T       = (_("1/32T"), _("Triplet thirty-secondth note")),
  NOTE_LENGTH_64T       = (_("1/64T"), _("Triplet sixty-fourth note")),
  NOTE_LENGTH_128T      = (_("1/128T"),_("Triplet hundred twenty-eighth note")),
};

choice RowShading {
  ROW_SHADING_NONE    = (Neutral,       _("None")),
  ROW_SHADING_2       = (_("2"),        _("Every second row")),
  ROW_SHADING_4       = (_("4"),        _("Every fourth row")),
  ROW_SHADING_8       = (_("8"),        _("Every eighth row")),
  ROW_SHADING_16      = (_("16"),       _("Every sixteenth row")),
  ROW_SHADING_2_4     = (_("2 & 4"),    _("Every second and fourth row")),
  ROW_SHADING_4_8     = (_("4 & 8"),    _("Every fourth and eighth row")),
  ROW_SHADING_4_12    = (_("4 & 12"),   _("Every fourth and twelfth row")),
  ROW_SHADING_4_16    = (_("4 & 16"),   _("Every fourth and sixteenth row")),
  ROW_SHADING_8_16    = (_("8 & 16"),   _("Every eighth and sixteenth row")),
  ROW_SHADING_3       = (_("3"),        _("Every third row")),
  ROW_SHADING_6       = (_("6"),        _("Every sixth row")),
  ROW_SHADING_12      = (_("12"),       _("Every twelfth row")),
  ROW_SHADING_3_6     = (_("3 & 6"),    _("Every third and sixth row")),
  ROW_SHADING_3_12    = (_("3 & 12"),   _("Every third and twelfth row")),
  ROW_SHADING_6_12    = (_("6 & 12"),   _("Every sixth and twelfth row")),
};

/* BEAST Global Config */
record GConfig {
  String rc_version			= (NULL, _("Release counter"), NULL, STORAGE);
  group "Synthesis Networks" {
    Int         snet_font_size          = (_("Font Size"), _("Font size in pixels for labels displayed in synthesis networks"),
                                           10, 1, 48, 2, STANDARD);
    Bool        snet_anti_aliased	= (_("Anti-Alias"), _("Draw synthesis networks anti-aliased?"),
					    TRUE, STANDARD);
    Bool        snet_edit_fallback	= (_("Single Edit"), _("Fallback into Edit mode after creating synthesis modules?"),
					    TRUE, STANDARD);
    Bool        snet_swap_io_channels	= (_("Swap IO"), _("Swap input with output channels when displaying synthesis modules?"),
                                           FALSE, STANDARD);
  };
  group "Misc" {
    Int         tab_width		= (_("Tab Width"), _("Specify project tab width in pixels"),
                                           0, 0, 5000, 5, STANDARD);
    Bool        size_group_input_fields = (_("Homogeneous Input Fields"),
                                           _("Enable homogeneous sizes for most (numeric and text) input fields. "
                                             "For some fields, this will only take effect after a restart."),
                                           TRUE, STANDARD);
  };
};

/* skin config */
record SkinConfig {
  String         skin_name   = (_("Skin Name"), _("Name for the current skin configuration (used for skin selections)."), NULL, STANDARD);
  group "Pattern Editor" {
    String   pattern_image   = (_("Background Image"), _("Background image used by the pattern editor."), NULL, STANDARD ":filename:image");
    Real     pattern_shade   = (_("Image shade"), _("Percentage of background image pixel to blend over background color."), 2.5, 0, 100, 5, STANDARD ":scale");
    Int      pattern_color   = (_("Background Color"),      NULL, 0xf5f3ed, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int      pattern_scolor1 = (_("Background Shade 1"),    NULL, 0xd3d1cb, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int      pattern_scolor2 = (_("Background Shade 2"),    NULL, 0xe0ded8, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int      pattern_text0   = (_("Empty Field Color"),     NULL, 0x303030, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int      pattern_text1   = (_("Text Color"),            NULL, 0x000000, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int      pattern_vbar1   = (_("Vertical Bar Color"),    NULL, 0x7f7f7f, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
  };
  group "Piano Roll" {
    String       piano_image = (_("Background Image"), _("Background image used by the piano-roll editor."), NULL, STANDARD ":filename:image");
    Real         piano_shade = (_("Image shade"), _("Percentage of background image pixel to blend over background color."), 2.5, 0, 100, 5, STANDARD ":scale");
    Int          piano_color = (_("Background Color"),      NULL, 0xf5f3ed, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int          piano_hbar  = (_("Horizontal Bar Color"),  NULL, 0x7f7f7f, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int          piano_vbar  = (_("Vertical Bar Color"),    NULL, 0x7f7f7f, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int          piano_hgrid = (_("Horizontal Grid Color"), NULL, 0xbfbfbf, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int          piano_vgrid = (_("Vertical Grid Color"),   NULL, 0xbfbfbf, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int          piano_mbar  = (_("Middle Bar Color"),      NULL, 0xa0a0a0, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
  };
  group "Control Events" {
    String controls_image    = (_("Background Image"), _("Background image used by the control events editor."), NULL, STANDARD ":filename:image");
    Real   controls_shade    = (_("Image shade"), _("Percentage of background image pixel to blend over background color."), 2.5, 0, 100, 5, STANDARD ":scale");
    Int    controls_color    = (_("Background Color"),      NULL, 0xf5f3ed, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int    controls_hbar     = (_("Horizontal Bar Color"),  NULL, 0x7f7f7f, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int    controls_mbar     = (_("Middle Bar Color"),      NULL, 0xa0a0a0, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int    controls_positive = (_("Positive Value Color"),  NULL, 0x0000ff, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int    controls_zero     = (_("Zero Value Color"),      NULL, 0xff0000, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int    controls_negative = (_("Negative Value Color"),  NULL, 0x0000ff, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
  };
};

/* pattern editor key bindings */
record KeyBindingItem {
  String key_name   = (NULL, NULL, NULL, STANDARD);
  String func_name  = (NULL, NULL, NULL, STANDARD);
  Real   func_param = (NULL, NULL, 0, -1e37, 1e30, 100, STANDARD ":scale");
};
sequence KeyBindingItemSeq {
  KeyBindingItem items;
};

};
