// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html

namespace Bst {
/*
enum Test1 {
  FOO1,
  FOO2,
};
record Test2 {
  Test1 tval;
};
*/
using namespace Sfi;
Const STORAGE = ":r:w:S:";
Const STANDARD = STORAGE "G:";

/* BEAST Global Config */
record GConfig {
  SfiString rc_version			= ("", _("Release counter"), "", STORAGE);
  group "Synthesis Networks" {
    Int         snet_font_size          = (_("Font Size"), _("Font size in pixels for labels displayed in synthesis networks"),
                                           10, 1, 48, 2, STANDARD);
    Bool        snet_anti_aliased	= (_("Anti-Alias"), _("Draw synthesis networks anti-aliased?"),
					    TRUE, STANDARD);
    Bool        snet_edit_fallback	= (_("Single Edit"), _("Fallback into Edit mode after creating synthesis modules?"),
					    TRUE, STANDARD);
    Bool        snet_swap_io_channels	= (_("Swap IO"), _("Swap input with output channels when displaying synthesis modules?"),
                                           FALSE, STANDARD);
  };
  group "Misc" {
    Bool        gui_enable_error_bell   = (_("Enable Error Bell"), _("Notify users via error bells if edits cannot be carried out"),
                                           TRUE, STANDARD);
    Bool        size_group_input_fields = (_("Homogeneous Input Fields"),
                                           _("Enable homogeneous sizes for most (numeric and text) input fields. "
                                             "For some fields, this will only take effect after a restart."),
                                           TRUE, STANDARD);
    Bool        slow_scopes             = (_("Slow scopes"),
                                           _("Aggresively slows down the periodic update frequency of scopes. "
					     "Doing this may be desirable on particularly slow machines."),
                                           FALSE, STANDARD);
  };
};

/* message filter */
record MsgAbsorbString {
  SfiString version;
  SfiString cstring;
  Bool      enabled;
};
sequence MsgAbsorbStringSeq {
  MsgAbsorbString strings;
};

/* pattern editor key bindings */
record KeyBindingItem {
  SfiString key_name   = ("", "", "", STANDARD);
  SfiString func_name  = ("", "", "", STANDARD);
  Real      func_param = ("", "", 0, -1e37, 1e30, 100, STANDARD ":scale");
};
sequence KeyBindingItemSeq {
  KeyBindingItem items;
};

};
