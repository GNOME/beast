/* BST - Bedevilled Audio System IDL	-*-mode: c++;-*-
 * Copyright (C) 2002 Tim Janik
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 */

namespace Bst {
/*
choice Test1 {
  FOO1,
  FOO2,
};
record Test2 {
  Test1 tval;
};
*/
using namespace Sfi;

Const STORAGE = ":r:w:S:";
Const STANDARD = STORAGE "G:";

/* BEAST Global Config */
record GConfig {
  String rc_version			= (NULL, _("Release counter"), NULL, STORAGE);
  group "Synthesis Networks" {
    Int         snet_font_size          = (_("Font Size"), _("Font size in pixels for labels displayed in synthesis networks"),
                                           10, 1, 48, 2, STANDARD);
    Bool        snet_anti_aliased	= (_("Anti-Alias"), _("Draw synthesis networks anti-aliased?"),
					    TRUE, STANDARD);
    Bool        snet_edit_fallback	= (_("Single Edit"), _("Fallback into Edit mode after creating synthesis modules?"),
					    TRUE, STANDARD);
    Bool        snet_swap_io_channels	= (_("Swap IO"), _("Swap input with output channels when displaying synthesis modules?"),
                                           FALSE, STANDARD);
  };
  group "Misc" {
    Int         tab_width		= (_("Tab Width"), _("Specify project tab width in pixels"),
                                           0, 0, 5000, 5, STANDARD);
    Bool        size_group_input_fields = (_("Homogeneous Input Fields"),
                                           _("Enable homogeneous sizes for most (numeric and text) input fields. "
                                             "For some fields, this will only take effect after a restart."),
                                           TRUE, STANDARD);
  };
};

/* skin config */
record SkinConfig {
  String         skin_name   = (_("Skin Name"), _("Name for the current skin configuration (used for skin selections)."), NULL, STANDARD);
  group "Piano Roll" {
    String       piano_image = (_("Background Image"), _("Background image used by the piano-roll widget."), NULL, STANDARD ":filename:image");
    Real         piano_shade = (_("Image shade"), _("Percentage of background image pixel to blend over background color."), 10, 0, 100, 5, STANDARD ":scale");
    Int          piano_color = (_("Background Color"),      NULL, 0xf5f3ed, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int          piano_hbar  = (_("Horizontal Bar Color"),  NULL, 0x7f7f7f, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int          piano_vbar  = (_("Vertical Bar Color"),    NULL, 0x7f7f7f, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int          piano_hgrid = (_("Horizontal Grid Color"), NULL, 0xbfbfbf, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int          piano_vgrid = (_("Vertical Grid Color"),   NULL, 0xbfbfbf, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int          piano_mbar  = (_("Middle Bar Color"),      NULL, 0xa0a0a0, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
  };
  group "Control Events" {
    String controls_image    = (_("Background Image"), _("Background image used by the control events widget."), NULL, STANDARD ":filename:image");
    Real   controls_shade    = (_("Image shade"), _("Percentage of background image pixel to blend over background color."), 10, 0, 100, 5, STANDARD ":scale");
    Int    controls_color    = (_("Background Color"),      NULL, 0xf5f3ed, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int    controls_hbar     = (_("Horizontal Bar Color"),  NULL, 0x7f7f7f, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int    controls_mbar     = (_("Middle Bar Color"),      NULL, 0xa0a0a0, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int    controls_positive = (_("Positive Value Color"),  NULL, 0x0000ff, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int    controls_zero     = (_("Zero Value Color"),      NULL, 0xff0000, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int    controls_negative = (_("Negative Value Color"),  NULL, 0x0000ff, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
  };
};

};
