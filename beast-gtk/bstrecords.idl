// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html

namespace Bst {
/*
enum Test1 {
  FOO1,
  FOO2,
};
record Test2 {
  Test1 tval;
};
*/
using namespace Sfi;
Const STORAGE = ":r:w:S:";
Const STANDARD = STORAGE "G:";
enum Direction {
  UP    = Enum (_("Up"), _("Move upwards")),
  LEFT  = Enum (_("Left"), _("Move to the left")),
  RIGHT = Enum (_("Right"), _("Move to the right")),
  DOWN  = Enum (_("Down"), _("Move downwards"))
};
enum RowShading {
  ROW_SHADING_NONE    = Enum (0,       	     _("None")),
  ROW_SHADING_2       = Enum (_("2"),        _("Every second row")),
  ROW_SHADING_4       = Enum (_("4"),        _("Every fourth row")),
  ROW_SHADING_8       = Enum (_("8"),        _("Every eighth row")),
  ROW_SHADING_16      = Enum (_("16"),       _("Every sixteenth row")),
  ROW_SHADING_2_4     = Enum (_("2 & 4"),    _("Every second and fourth row")),
  ROW_SHADING_4_8     = Enum (_("4 & 8"),    _("Every fourth and eighth row")),
  ROW_SHADING_4_12    = Enum (_("4 & 12"),   _("Every fourth and twelfth row")),
  ROW_SHADING_4_16    = Enum (_("4 & 16"),   _("Every fourth and sixteenth row")),
  ROW_SHADING_8_16    = Enum (_("8 & 16"),   _("Every eighth and sixteenth row")),
  ROW_SHADING_3       = Enum (_("3"),        _("Every third row")),
  ROW_SHADING_6       = Enum (_("6"),        _("Every sixth row")),
  ROW_SHADING_12      = Enum (_("12"),       _("Every twelfth row")),
  ROW_SHADING_3_6     = Enum (_("3 & 6"),    _("Every third and sixth row")),
  ROW_SHADING_3_12    = Enum (_("3 & 12"),   _("Every third and twelfth row")),
  ROW_SHADING_6_12    = Enum (_("6 & 12"),   _("Every sixth and twelfth row")),
};

/* BEAST Global Config */
record GConfig {
  SfiString rc_version			= ("", _("Release counter"), "", STORAGE);
  group "Synthesis Networks" {
    Int         snet_font_size          = (_("Font Size"), _("Font size in pixels for labels displayed in synthesis networks"),
                                           10, 1, 48, 2, STANDARD);
    Bool        snet_anti_aliased	= (_("Anti-Alias"), _("Draw synthesis networks anti-aliased?"),
					    TRUE, STANDARD);
    Bool        snet_edit_fallback	= (_("Single Edit"), _("Fallback into Edit mode after creating synthesis modules?"),
					    TRUE, STANDARD);
    Bool        snet_swap_io_channels	= (_("Swap IO"), _("Swap input with output channels when displaying synthesis modules?"),
                                           FALSE, STANDARD);
  };
  group "Misc" {
    Bool        gui_enable_error_bell   = (_("Enable Error Bell"), _("Notify users via error bells if edits cannot be carried out"),
                                           TRUE, STANDARD);
    Bool        size_group_input_fields = (_("Homogeneous Input Fields"),
                                           _("Enable homogeneous sizes for most (numeric and text) input fields. "
                                             "For some fields, this will only take effect after a restart."),
                                           TRUE, STANDARD);
    Bool        slow_scopes             = (_("Slow scopes"),
                                           _("Aggresively slows down the periodic update frequency of scopes. "
					     "Doing this may be desirable on particularly slow machines."),
                                           FALSE, STANDARD);
  };
};

/* skin config */
record SkinConfig {
  SfiString     skin_name   = (_("Skin Name"), _("Name for the current skin configuration (used for skin selections)."), "", STANDARD);
  group "Pattern Editor" {
    SfiString   pattern_image   = (_("Background Image"), _("Background image used by the pattern editor."), "", STANDARD ":filename:image");
    Real     pattern_shade   = (_("Image shade"), _("Percentage of background image pixel to blend over background color."), 2.5, 0, 100, 5, STANDARD ":scale");
    Int      pattern_color   = (_("Background Color"),      "", 0xf5f3ed, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int      pattern_scolor1 = (_("Background Shade 1"),    "", 0xd3d1cb, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int      pattern_scolor2 = (_("Background Shade 2"),    "", 0xe0ded8, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int      pattern_text0   = (_("Empty Field Color"),     "", 0x303030, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int      pattern_text1   = (_("Text Color"),            "", 0x000000, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int      pattern_vbar1   = (_("Vertical Bar Color"),    "", 0x7f7f7f, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
  };
  group "Piano Roll" {
    SfiString    piano_image = (_("Background Image"), _("Background image used by the piano-roll editor."), "", STANDARD ":filename:image");
    Real         piano_shade = (_("Image shade"), _("Percentage of background image pixel to blend over background color."), 2.5, 0, 100, 5, STANDARD ":scale");
    Int          piano_color = (_("Background Color"),      "", 0xf5f3ed, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int          piano_hbar  = (_("Horizontal Bar Color"),  "", 0x7f7f7f, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int          piano_vbar  = (_("Vertical Bar Color"),    "", 0x7f7f7f, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int          piano_hgrid = (_("Horizontal Grid Color"), "", 0xbfbfbf, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int          piano_vgrid = (_("Vertical Grid Color"),   "", 0xbfbfbf, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int          piano_mbar  = (_("Middle Bar Color"),      "", 0xa0a0a0, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
  };
  group "Control Events" {
    SfiString controls_image    = (_("Background Image"), _("Background image used by the control events editor."), "", STANDARD ":filename:image");
    Real   controls_shade    = (_("Image shade"), _("Percentage of background image pixel to blend over background color."), 2.5, 0, 100, 5, STANDARD ":scale");
    Int    controls_color    = (_("Background Color"),      "", 0xf5f3ed, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int    controls_hbar     = (_("Horizontal Bar Color"),  "", 0x7f7f7f, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int    controls_mbar     = (_("Middle Bar Color"),      "", 0xa0a0a0, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int    controls_positive = (_("Positive Value Color"),  "", 0x0000ff, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int    controls_zero     = (_("Zero Value Color"),      "", 0xff0000, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
    Int    controls_negative = (_("Negative Value Color"),  "", 0x0000ff, 0, 0xffffff, 0x010101, STANDARD ":rgb:hex");
  };
};

/* message filter */
record MsgAbsorbString {
  SfiString version;
  SfiString cstring;
  Bool      enabled;
};
sequence MsgAbsorbStringSeq {
  MsgAbsorbString strings;
};

/* pattern editor key bindings */
record KeyBindingItem {
  SfiString key_name   = ("", "", "", STANDARD);
  SfiString func_name  = ("", "", "", STANDARD);
  Real      func_param = ("", "", 0, -1e37, 1e30, 100, STANDARD ":scale");
};
sequence KeyBindingItemSeq {
  KeyBindingItem items;
};

};
