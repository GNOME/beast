// Licensed GNU LGPL v3 or later: http://www.gnu.org/licenses/lgpl.html -*-mode:c++;-*-
/**
 * @file
 * @brief Generated BEAST structures.
 */

namespace Bst {

enum Direction {
  DIR_UP    = Enum (_("Up"), _("Move upwards")),
  DIR_LEFT  = Enum (_("Left"), _("Move to the left")),
  DIR_RIGHT = Enum (_("Right"), _("Move to the right")),
  DIR_DOWN  = Enum (_("Down"), _("Move downwards"))
};

enum FFTSize {
  FFT_SIZE_2     = Enum (    2, _("2 Value FFT Window"), _("A 2 value FFT window corresponds to a spectrum with 2 frequency peaks")),
  FFT_SIZE_4     = Enum (    4, _("4 Value FFT Window"), _("A 4 value FFT window corresponds to a spectrum with 3 frequency peaks")),
  FFT_SIZE_8     = Enum (    8, _("8 Value FFT Window"), _("A 8 value FFT window corresponds to a spectrum with 5 frequency peaks")),
  FFT_SIZE_16    = Enum (   16, _("16 Value FFT Window"), _("A 16 value FFT window corresponds to a spectrum with 9 frequency peaks")),
  FFT_SIZE_32    = Enum (   32, _("32 Value FFT Window"), _("A 32 value FFT window corresponds to a spectrum with 17 frequency peaks")),
  FFT_SIZE_64    = Enum (   64, _("64 Value FFT Window"), _("A 64 value FFT window corresponds to a spectrum with 33 frequency peaks")),
  FFT_SIZE_128   = Enum (  128, _("128 Value FFT Window"), _("A 128 value FFT window corresponds to a spectrum with 65 frequency peaks")),
  FFT_SIZE_256   = Enum (  256, _("256 Value FFT Window"), _("A 256 value FFT window corresponds to a spectrum with 129 frequency peaks")),
  FFT_SIZE_512   = Enum (  512, _("512 Value FFT Window"), _("A 512 value FFT window corresponds to a spectrum with 257 frequency peaks")),
  FFT_SIZE_1024  = Enum ( 1024, _("1024 Value FFT Window"), _("A 1024 value FFT window corresponds to a spectrum with 513 frequency peaks")),
  FFT_SIZE_2048  = Enum ( 2048, _("2048 Value FFT Window"), _("A 2048 value FFT window corresponds to a spectrum with 1025 frequency peaks")),
  FFT_SIZE_4096  = Enum ( 4096, _("4096 Value FFT Window"), _("A 4096 value FFT window corresponds to a spectrum with 2049 frequency peaks")),
  FFT_SIZE_8192  = Enum ( 8192, _("8192 Value FFT Window"), _("A 8192 value FFT window corresponds to a spectrum with 4097 frequency peaks")),
  FFT_SIZE_16384 = Enum (16384, _("16384 Value FFT Window"), _("A 16384 value FFT window corresponds to a spectrum with 8193 frequency peaks")),
  FFT_SIZE_32768 = Enum (32768, _("32768 Value FFT Window"), _("A 32768 value FFT window corresponds to a spectrum with 16385 frequency peaks")),
  FFT_SIZE_65536 = Enum (65536, _("65536 Value FFT Window"), _("A 65536 value FFT window corresponds to a spectrum with 32769 frequency peaks")),
};

enum NoteLength {
  NOTE_LENGTH_NONE      = Enum (0,	    _("None"), _("Unspecified length")),
  NOTE_LENGTH_1         = Enum (_("1/1"),   _("Whole note")),
  NOTE_LENGTH_2         = Enum (_("1/2"),   _("Half note")),
  NOTE_LENGTH_4         = Enum (_("1/4"),   _("Quarter note")),
  NOTE_LENGTH_8         = Enum (_("1/8"),   _("Eighths note")),
  NOTE_LENGTH_16        = Enum (_("1/16"),  _("Sixteenth note")),
  NOTE_LENGTH_32        = Enum (_("1/32"),  _("Thirty-secondth note")),
  NOTE_LENGTH_64        = Enum (_("1/64"),  _("Sixty-fourth note")),
  NOTE_LENGTH_128       = Enum (_("1/128"), _("Hundred twenty-eighth note")),
  NOTE_LENGTH_1P        = Enum (_("1/1."),  _("Dotted whole note")),
  NOTE_LENGTH_2P        = Enum (_("1/2."),  _("Dotted half note")),
  NOTE_LENGTH_4P        = Enum (_("1/4."),  _("Dotted quarter note")),
  NOTE_LENGTH_8P        = Enum (_("1/8."),  _("Dotted eighths note")),
  NOTE_LENGTH_16P       = Enum (_("1/16."), _("Dotted sixteenth note")),
  NOTE_LENGTH_32P       = Enum (_("1/32."), _("Dotted thirty-secondth note")),
  NOTE_LENGTH_64P       = Enum (_("1/64."), _("Dotted sixty-fourth note")),
  NOTE_LENGTH_128P      = Enum (_("1/128."),_("Dotted hundred twenty-eighth note")),
  NOTE_LENGTH_1T        = Enum (_("1/1T"),  _("Triplet whole note")),
  NOTE_LENGTH_2T        = Enum (_("1/2T"),  _("Triplet half note")),
  NOTE_LENGTH_4T        = Enum (_("1/4T"),  _("Triplet quarter note")),
  NOTE_LENGTH_8T        = Enum (_("1/8T"),  _("Triplet eighths note")),
  NOTE_LENGTH_16T       = Enum (_("1/16T"), _("Triplet sixteenth note")),
  NOTE_LENGTH_32T       = Enum (_("1/32T"), _("Triplet thirty-secondth note")),
  NOTE_LENGTH_64T       = Enum (_("1/64T"), _("Triplet sixty-fourth note")),
  NOTE_LENGTH_128T      = Enum (_("1/128T"),_("Triplet hundred twenty-eighth note")),
};

enum RowShading {
  ROW_SHADING_NONE    = Enum (0,       	     _("None")),
  ROW_SHADING_2       = Enum (_("2"),        _("Every second row")),
  ROW_SHADING_4       = Enum (_("4"),        _("Every fourth row")),
  ROW_SHADING_8       = Enum (_("8"),        _("Every eighth row")),
  ROW_SHADING_16      = Enum (_("16"),       _("Every sixteenth row")),
  ROW_SHADING_2_4     = Enum (_("2 & 4"),    _("Every second and fourth row")),
  ROW_SHADING_4_8     = Enum (_("4 & 8"),    _("Every fourth and eighth row")),
  ROW_SHADING_4_12    = Enum (_("4 & 12"),   _("Every fourth and twelfth row")),
  ROW_SHADING_4_16    = Enum (_("4 & 16"),   _("Every fourth and sixteenth row")),
  ROW_SHADING_8_16    = Enum (_("8 & 16"),   _("Every eighth and sixteenth row")),
  ROW_SHADING_3       = Enum (_("3"),        _("Every third row")),
  ROW_SHADING_6       = Enum (_("6"),        _("Every sixth row")),
  ROW_SHADING_12      = Enum (_("12"),       _("Every twelfth row")),
  ROW_SHADING_3_6     = Enum (_("3 & 6"),    _("Every third and sixth row")),
  ROW_SHADING_3_12    = Enum (_("3 & 12"),   _("Every third and twelfth row")),
  ROW_SHADING_6_12    = Enum (_("6 & 12"),   _("Every sixth and twelfth row")),
};

} // Bst
