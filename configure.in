dnl # Birnet
dnl # GNU Lesser General Public License version 2 or any later version.

# include BEAST specific macros
builtin(include, acbeast.m4)dnl

#
# Configure script for BEAST/BSE
#
AC_INIT
AC_CONFIG_SRCDIR([bse/bseconfig.h.in])
AM_CONFIG_HEADER(configure.h)
AC_PREREQ(2.57)

#
# BSE version numbers
#
AC_DIVERT_BEFORE_HELP([
BSE_MAJOR_VERSION=0
BSE_MINOR_VERSION=7
BSE_MICRO_VERSION=0
BSE_INTERFACE_AGE=0
BSE_BINARY_AGE=0
])
dnl#
dnl# Making releases:
dnl#   BSE_MICRO_VERSION += 1;
dnl#   BSE_INTERFACE_AGE += 1;
dnl#   BSE_BINARY_AGE += 1;
dnl# if any functions have been added, set BSE_INTERFACE_AGE to 0.
dnl# if backwards compatibility has been broken,
dnl# set BSE_BINARY_AGE _and_ BSE_INTERFACE_AGE to 0.
dnl# BST_RELEASE_CANDIDATE may contain rc[0-9]+ or nothing
BST_RELEASE_CANDIDATE= #rc1

# version number setup
BSE_VERSION=$BSE_MAJOR_VERSION.$BSE_MINOR_VERSION.$BSE_MICRO_VERSION
BST_VERSION=$BSE_VERSION # -rcZ to be appended...
if test -n "$BST_RELEASE_CANDIDATE" ; then
    BST_VERSION=$BST_VERSION-$BST_RELEASE_CANDIDATE
fi
BIN_VERSION=$BSE_VERSION    # binary version, used for binaries and paths
AC_SUBST(BSE_MAJOR_VERSION)
AC_SUBST(BSE_MINOR_VERSION)
AC_SUBST(BSE_MICRO_VERSION)
AC_SUBST(BSE_INTERFACE_AGE)
AC_SUBST(BSE_BINARY_AGE)
AC_SUBST(BSE_VERSION)
AC_SUBST(BST_VERSION)
AC_SUBST(BIN_VERSION)
AC_DEFINE_UNQUOTED(BIN_VERSION, "$BIN_VERSION", [Binary Version])

# compute libtool versions
LT_RELEASE=$BSE_MAJOR_VERSION.$BSE_MINOR_VERSION
LT_CURRENT=`expr $BSE_MICRO_VERSION - $BSE_INTERFACE_AGE`
LT_REVISION=$BSE_INTERFACE_AGE
LT_AGE=`expr $BSE_BINARY_AGE - $BSE_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

dnl # figure debugging default, prior to $ac_help setup
dnl
AC_DIVERT_BEFORE_HELP([
if test `expr $BSE_MINOR_VERSION \% 2 \| $BSE_MAJOR_VERSION \< 1` = 1 ; then
        debug_default=yes
else
        debug_default=minimum
fi
])

# architecture information
AC_CANONICAL_TARGET
AC_DEFINE_UNQUOTED(BST_ARCH_NAME, "$target", [Architecture Description])

# initialize automake, don't define PACKAGE and VERSION
AM_INIT_AUTOMAKE(beast, $BST_VERSION, no-define)

# We have subdirectories.
AC_PROG_MAKE_SET

# Disable automatic maintainer mode.
AM_MAINTAINER_MODE

# declare --enable-* args and collect ac_help strings
AC_ARG_ENABLE(debug,       [  --enable-debug=[no/minimum/yes] turn on debugging [default=$debug_default]],,enable_debug=$debug_default)
AC_ARG_ENABLE(toyprof,     [  --enable-toyprof=[no/yes]       turn on toy profiler, see sfi/toyprof.README],,)

dnl # setup DEBUG defaults
if test "x$enable_debug" = "xyes"; then
  DEBUG_FLAGS="-g -DG_ENABLE_DEBUG"
else if test "x$enable_debug" = "xno"; then
  DEBUG_FLAGS="-DG_DISABLE_CHECKS -DG_DISABLE_CAST_CHECKS" # -DG_DISABLE_ASSERT
else
  DEBUG_FLAGS="-DG_DISABLE_CAST_CHECKS"
fi fi
if test -z "$CFLAGS"; then
  CFLAGS="$DEBUG_FLAGS"
else
  CFLAGS="$CFLAGS $DEBUG_FLAGS"
fi
if test -z "$CXXFLAGS"; then
  CXXFLAGS="$DEBUG_FLAGS"
else
  CXXFLAGS="$CXXFLAGS $DEBUG_FLAGS"
fi

dnl # Foreign defaults:
MC_IF_VAR_EQ(enable_static, yes, , enable_static=no)
MC_IF_VAR_EQ(enable_shared, no, , enable_shared=yes)

# check compilers and their behaviour, setup CFLAGS
MC_PROG_CC_WITH_CFLAGS
MC_PROG_CXX_WITH_CXXFLAGS
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP
AC_C_CONST
AC_C_INLINE
AC_HEADER_STDC

# Checks for programs
AC_PROG_INSTALL
AC_PROG_LN_S

# initialize libtool, we need dynamic module support
AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL

# Check for package requirements.
MC_IF_VAR_EQ(GCC, yes,,
    AC_MSG_ERROR(This package requires GNU gcc)
)
MC_IF_VAR_EQ(GXX, yes,,
    AC_MSG_ERROR(This package requires GNU g++)
)

# Figure build requirement
AC_MSG_CHECKING(whether make is GNU Make)
STRIP_BEGIN=
STRIP_END=
if $ac_make --version 2>/dev/null | grep '^GNU Make ' >/dev/null ; then
        STRIP_BEGIN='$(strip $(STRIP_DUMMY)'
        STRIP_END=')'
        AC_MSG_RESULT(yes)
else
        AC_MSG_RESULT(no)
fi
dnl # some Make 3.79 $(strip ) versions are broken and require an empty arg
STRIP_DUMMY=
AC_SUBST(STRIP_DUMMY)
AC_SUBST(STRIP_BEGIN)
AC_SUBST(STRIP_END)

# require pkg-config
MC_ASSERT_PROG(PKG_CONFIG, pkg-config, [pkg-config can be found at http://www.freedesktop.org/software/pkgconfig/])


dnl #
dnl # Include sub-package macro definitions
dnl #
builtin(include, birnet/configure.inc)dnl
#include(birnet/configure.inc)
AC_DEFUN([DUMMY_DEFS],
[
    # work around stupid automake (doesn't figure includes)
    AC_SUBST(BIRNET_CFLAGS)
    AC_SUBST(BIRNET_LIBS)
])

dnl #
dnl # Define package requirements.
dnl #
AC_DEFUN([AC_I18N_REQUIREMENTS],
[
    dnl # TRANSLATORS: for each new translation added to ALL_LINGUAS, please also update
    dnl # the corresponding links in docs/site-development.texi (search for ALL_LINGUAS).
    ALL_LINGUAS="az bg ca cs de el en_CA en_GB eo es eu fr hr it ja mn ne nl pa pt pt_BR ru rw sq sr sr@Latn sv"
    dnl # TRANSLATORS: for each new translation added to ALL_LINGUAS, please also update
    dnl # the corresponding links in docs/site-development.texi (search for ALL_LINGUAS).
    AC_SUBST(ALL_LINGUAS)

    dnl # versioned BEAST gettext domain (po/)
    BST_GETTEXT_DOMAIN=beast-v$BIN_VERSION    # version without -rcZ
    AC_SUBST(BST_GETTEXT_DOMAIN)
    AC_DEFINE_UNQUOTED(BST_GETTEXT_DOMAIN, "$BST_GETTEXT_DOMAIN", [Versioned BEAST gettext domain])
    GETTEXT_PACKAGE=$BST_GETTEXT_DOMAIN
    AC_SUBST(GETTEXT_PACKAGE)

    dnl # locale directory for all domains
    dnl # (AM_GLIB_DEFINE_LOCALEDIR() could do this if it would do AC_SUBST())
    saved_prefix="$prefix"
    saved_exec_prefix="$exec_prefix"
    test "x$prefix" = xNONE && prefix=$ac_default_prefix
    test "x$exec_prefix" = xNONE && exec_prefix=$prefix
    if test "x$CATOBJEXT" = "x.mo" ; then
      beastlocaledir=`eval echo "${libdir}/locale"`
    else
      beastlocaledir=`eval echo "${datadir}/locale"`
    fi
    exec_prefix="$saved_exec_prefix"
    prefix="$saved_prefix"
    AC_SUBST(beastlocaledir)

    dnl # do gettext checks and provide INTLLIBS
    AM_GLIB_GNU_GETTEXT
    AC_PROG_INTLTOOL
])
AC_DEFUN([AC_SFI_REQUIREMENTS],
[
    dnl # We need GLib with friends
    PKG_CHECK_MODULES(GLIB_GOMT, glib-2.0 >= 2.4.11 gobject-2.0 gmodule-no-export-2.0 gthread-2.0)
    AC_SUBST(GLIB_GOMT_CFLAGS)
    AC_SUBST(GLIB_GOMT_LIBS)
    SFI_CFLAGS="$GLIB_GOMT_CFLAGS"
    SFI_LIBS="$GLIB_GOMT_LIBS"
    AC_SUBST(SFI_CFLAGS)
    AC_SUBST(SFI_LIBS)

    AC_CHECK_FUNCS(getpwnam_r getpwnam)
    AC_CHECK_FUNCS(timegm)
    
    dnl # --- toy profiler ---
    AM_CONDITIONAL(IF_TOYPROF, test x"$enable_toyprof" = xyes)

    dnl # --- SFI directories ---
    sfidlstdincdir=${includedir}
    AC_SUBST(sfidlstdincdir)
])
AC_DEFUN([AC_BSE_REQUIREMENTS],
[
    dnl # --- BSE version ---
    AC_DEFINE_UNQUOTED(BSE_VERSION, "$BSE_VERSION", [BSE Version])

    dnl # --- Ogg/Vorbis check ---
    OV_LIBS=
    ov_tests=0
    AC_CHECK_LIB(vorbisfile, ogg_stream_reset_serialno,
	[AC_CHECK_HEADER(ogg/ogg.h, ov_tests=`expr $ov_tests + 1`)]
	[AC_CHECK_HEADER(vorbis/vorbisfile.h, ov_tests=`expr $ov_tests + 1`)]
	[AC_CHECK_HEADER(vorbis/vorbisenc.h, ov_tests=`expr $ov_tests + 1`)]
	,
	ov_tests=0, -lvorbisenc -lvorbis -logg)
    if test $ov_tests = 3 ; then
	OV_LIBS="-lvorbisfile -lvorbisenc -lvorbis -logg"
    else
	AC_MSG_WARN([failed to detect Ogg/Vorbis library (>=1.0) or headers])
    fi
    
    dnl # --- libmad MPEG decoder check ---
    dnl # libmad doesn't come with a mad.pc file (just its debian package)
    dnl # PKG_CHECK_MODULES(MAD, mad >= 0.14.2,
    dnl #     BSE_HAVE_LIBMAD=1
    dnl #     ,
    dnl #     BSE_HAVE_LIBMAD=0
    dnl #     AC_MSG_WARN([failed to detect libmad (MPEG I-III audio decoder) or headers])
    dnl # )
    MAD_LIBS=
    mad_tests=0
    AC_CHECK_LIB(mad, mad_stream_errorstr,
        [AC_CHECK_HEADER(mad.h, mad_tests=`expr $mad_tests + 1`)]
        ,
        mad_tests=0, -lm)
    if test $mad_tests = 1 ; then
	BSE_HAVE_LIBMAD=1
        MAD_LIBS="-lmad -lm"
    else
        AC_MSG_WARN([failed to detect libmad (MPEG I-III audio decoder) or headers])
	BSE_HAVE_LIBMAD=0
    fi
    AC_DEFINE_UNQUOTED(BSE_HAVE_LIBMAD, $BSE_HAVE_LIBMAD, [Whether bse links against libmad])

    dnl # --- check codec requirements ---
    AC_MSG_CHECKING([the required GSL-Loader library set])
    if echo " $OV_LIBS" | grep ".*-lvorbis.*" >/dev/null ; then
      AC_MSG_RESULT([complete])
    else
      AC_MSG_RESULT([])
      AC_MSG_ERROR([Ogg/Vorbis is missing, but required])
    fi

    dnl # --- require libz ---
    if test -z "$LIBZ"; then
	AC_CHECK_LIB(z, gzsetparams,
	    [AC_CHECK_HEADER(zlib.h, LIBZ='-lz', LIBZ='')],
	    LIBZ='')
    fi
    if test -z "$LIBZ"; then
	AC_MSG_ERROR([Compression library libz is missing, but required])
    fi
    AC_SUBST(LIBZ)

    dnl # --- complete CFLAGS/LIBS setup ---
    BSE_CFLAGS="$MAD_CFLAGS $SFI_CFLAGS"
    BSE_LIBS="$OV_LIBS $MAD_LIBS $SFI_LIBS $LIBZ"
    AC_SUBST(BSE_CFLAGS)
    AC_SUBST(BSE_LIBS)
    dnl # --- figure stuff for bse.pc ---
    BSE_PC_REQUIRE=
    if test $BSE_HAVE_LIBMAD = 1 ; then
	BSE_PC_REQUIRE=mad
    fi
    BSE_PC_CFLAGS=
    BSE_PC_LIBS="$OV_LIBS $LIBZ"
    AC_SUBST(BSE_PC_REQUIRE)
    AC_SUBST(BSE_PC_CFLAGS)
    AC_SUBST(BSE_PC_LIBS)

    dnl # --- sizeof types ---
    GLIB_SIZEOF([#include <pthread.h>], pthread_mutex_t, pth_mutex_t)
    SFI_SIZEOF_PTH_MUTEX_T="$glib_cv_sizeof_pth_mutex_t"
    AC_SUBST(SFI_SIZEOF_PTH_MUTEX_T)
    GLIB_SIZEOF([#include <pthread.h>], pthread_cond_t, pth_cond_t)
    SFI_SIZEOF_PTH_COND_T="$glib_cv_sizeof_pth_cond_t"
    AC_SUBST(SFI_SIZEOF_PTH_COND_T)

    dnl # --- pthread_mutexattr_settype ---
    AC_MSG_CHECKING([for pthread_mutexattr_settype()])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
      #define _XOPEN_SOURCE   600
      #include <pthread.h>
    ]], [[
      int (*attr_settype) (pthread_mutexattr_t *__attr, int __kind) = pthread_mutexattr_settype;
      int val = PTHREAD_MUTEX_RECURSIVE;
      attr_settype = 0; val = 0;
    ]])],[
      SFI_HAVE_MUTEXATTR_SETTYPE=1
      AC_MSG_RESULT(yes)
    ],[
      SFI_HAVE_MUTEXATTR_SETTYPE=0
      AC_MSG_RESULT(no)
    ])
    AC_SUBST(SFI_HAVE_MUTEXATTR_SETTYPE)

    dnl # --- setup BSE search/install paths ---
    bseplugindir=\${libdir}/bse/v$BIN_VERSION/plugins
    AC_SUBST(bseplugindir)
    bsedriverdir=\${libdir}/bse/v$BIN_VERSION/drivers
    AC_SUBST(bsedriverdir)
    bseladspapath=${libdir}/ladspa
    AC_SUBST(bseladspapath)
    bsesampledir=\${datadir}/bse/samples
    AC_SUBST(bsesampledir)
    bsedatadir=\${datadir}/bse/v$BIN_VERSION
    bseeffectdir=$bsedatadir/effects
    AC_SUBST(bseeffectdir)
    bseinstrumentdir=$bsedatadir/instruments
    AC_SUBST(bseinstrumentdir)
    bsescriptdir=$bsedatadir/scripts
    AC_SUBST(bsescriptdir)
    bsedemodir=$bsedatadir/demo
    AC_SUBST(bsedemodir)
    bseuserdatadir='~/beast'
    AC_SUBST(bseuserdatadir)
])
AC_DEFUN([AC_BSE_SHELL_REQUIREMENTS],
[
    BSE_SHELL_CFLAGS="$BSE_CFLAGS"
    BSE_SHELL_LIBS="$BSE_LIBS"

    dnl # --- libguile check ---
    guile_tests=0
    GUILE_VERSION=none
    REQUIRED_VERSION=1.6
    AC_PATH_PROG(GUILE_CONFIG, guile-config)
    if test -n "$GUILE_CONFIG"; then
	guile_tests=`expr $guile_tests + 1`
	GUILE_VERSION=`$GUILE_CONFIG info guileversion`
	GUILE_CFLAGS=`$GUILE_CONFIG compile`
	GUILE_LDFLAGS=`$GUILE_CONFIG link`
	MC_CHECK_VERSION($GUILE_VERSION, $REQUIRED_VERSION, [guile_tests=`expr $guile_tests + 1`])
	dnl # check headers seperately, since some distributions ship on-devel guile packages with guile-config
	AC_CHECK_HEADER(guile/gh.h, guile_tests=`expr $guile_tests + 1`)
	AC_CHECK_HEADER(libguile/properties.h, guile_tests=`expr $guile_tests + 1`) dnl # guile-1.6 headerfile
    fi
    if test $guile_tests = 4 ; then
	BSE_SHELL_CFLAGS="$GUILE_CFLAGS $BSE_SHELL_CFLAGS"
	BSE_SHELL_LIBS="$GUILE_LDFLAGS $BSE_SHELL_LIBS" 
    else
	EMSG="failed to detect guile headers and library v$REQUIRED_VERSION"
	EMSG="$EMSG (available from http://www.gnu.org/software/guile/guile.html)"
	EMSG="$EMSG - detected library version: $GUILE_VERSION"
	AC_MSG_ERROR([$EMSG])
    fi

    AC_SUBST(BSE_SHELL_CFLAGS)
    AC_SUBST(BSE_SHELL_LIBS)
])
AC_DEFUN([AC_GXK_REQUIREMENTS],
[
    dnl # required libraries
    DEPENDANCIES=
    DEPENDANCIES="$DEPENDANCIES gtk+-2.0 >= 2.4.11"
    DEPENDANCIES="$DEPENDANCIES pangoft2 >= 1.4.0"
    DEPENDANCIES="$DEPENDANCIES libart-2.0 >= 2.3.8"
    DEPENDANCIES="$DEPENDANCIES libgnomecanvas-2.0 >= 2.4.0"
    dnl # define GUI_CFLAGS and GUI_LIBS:
    PKG_CHECK_MODULES(GUI, $DEPENDANCIES)
    
    GXK_CFLAGS="$GUI_CFLAGS"
    GXK_LIBS="$GUI_LIBS $LIBZ"
    AC_SUBST(GXK_CFLAGS)
    AC_SUBST(GXK_LIBS)
])
AC_DEFUN([AC_BEAST_REQUIREMENTS],
[
    dnl # start where GXK left off
    BEAST_CFLAGS="$GXK_CFLAGS"
    BEAST_LIBS="$GXK_LIBS"
    AC_SUBST(BEAST_CFLAGS)
    AC_SUBST(BEAST_LIBS)

    dnl # Feature XKB extension if present
    cflags=$CFLAGS
    ldflags=$LDFLAGS
    CFLAGS=$BEAST_CFLAGS
    LDFLAGS=$BEAST_LIBS
    have_xkb=
    AC_CHECK_LIB(X11, XkbOpenDisplay, have_xkb=1$have_xkb)
    AC_CHECK_LIB(X11, XkbGetKeyboard, have_xkb=2$have_xkb)
    AC_CHECK_HEADER(X11/XKBlib.h, have_xkb=3$have_xkb)
    AC_CHECK_HEADER(X11/extensions/XKBgeom.h, have_xkb=4$have_xkb, , X11/Xlib.h)
    MC_IF_VAR_EQ(have_xkb, 4321,
	AC_DEFINE_UNQUOTED(BST_WITH_XKB, 1, [XKB present]),
    )
    CFLAGS=$cflags
    LDFLAGS=$ldflags
	
    # BEAST version
    AC_DEFINE_UNQUOTED(BST_VERSION, "$BST_VERSION", [BEAST Version])
    BST_VERSION_STABLE=0
    case "$BST_VERSION" in
    0.99.*)     BST_VERSION_HINT=BETA ;;
    0.*)        BST_VERSION_HINT="ALPHA" ;;
    *)          if test `expr $BSE_MINOR_VERSION \% 2` = 1 ; then
                  BST_VERSION_HINT="Development Branch"
                else
		  BST_VERSION_STABLE=1
	 	  BST_VERSION_HINT="Stable Branch"
	        fi ;;
    esac
    AC_DEFINE_UNQUOTED(BST_VERSION_HINT, "$BST_VERSION_HINT", [Version classification])
    AC_DEFINE_UNQUOTED(BST_VERSION_STABLE, $BST_VERSION_STABLE, [On stable branch?])

    # --- BEAST paths ---
    beastbasedir=\${datadir}/beast
    beastdocsdir=$beastbasedir/v$BIN_VERSION/docs
    AC_SUBST(beastdocsdir)
    beastimagesdir=$beastbasedir/v$BIN_VERSION/images
    AC_SUBST(beastimagesdir)
    beastkeysdir=$beastbasedir/v$BIN_VERSION/keys
    AC_SUBST(beastkeysdir)
    beastskinsdir=$beastbasedir/v$BIN_VERSION/skins
    AC_SUBST(beastskinsdir)
])
AC_DEFUN([AC_SUIDMAIN_REQUIREMENTS],
[
    dnl # figure everything required by the suid wrapper
    AC_CHECK_FUNCS(seteuid)
    AC_CHECK_FUNCS(setreuid)
])
AC_DEFUN([AC_BSE_SNDDEV_CHECK],
[
    dnl # Check for potential pcm devices
	
    bse_have_pcmdev=
	
    dnl # OSS-Lite driver check
    AC_CHECK_HEADERS(sys/soundcard.h soundcard.h, have_oss_header=yes, have_oss_header=no)
    AC_ARG_ENABLE(osspcm,
	[  --enable-osspcm=DEVICE  force DEVICE as OSS PCM device name],
	[AC_MSG_WARN([Ignoring detection of PCM device])],
	[enable_osspcm=""])
    AC_ARG_ENABLE([ossmidi],
	[  --enable-ossmidi=DEVICE force DEVICE as OSS MIDI device name],
	[AC_MSG_WARN([Ignoring detection of MIDI device])],
	[enable_ossmidi=""])
    AC_MSG_CHECKING([for available OSS sound devices])
    result=
    dnl # Figure PCM device
    if test -n "$enable_osspcm" ; then
	dev="$enable_osspcm"
    else
	for dev in /dev/dsp /dev/sound \
	    /dev/dsp0 /dev/dsp1 /dev/dsp2 /dev/dsp3 ; do
	  if test -c $dev ; then
	      break;
	  else
	      dev=""
	  fi
        done
    fi
    if test -n "$dev" ; then
	bse_have_pcmdev=yes
	AC_DEFINE_UNQUOTED(BSE_PCM_DEVICE_CONF_OSS, "$dev", [Device used for PCM I/O])
	result="$result""PCM:$dev "
    else
	result="$result""PCM:none "
    fi
    dnl # Figure MIDI device
    if test -n "$enable_ossmidi" ; then
        dev="$enable_ossmidi"
    else
	for dev in /dev/midi \
	    /dev/midi0  /dev/midi1  /dev/midi2  /dev/midi3 \
	    /dev/rmidi0 /dev/rmidi1 /dev/rmidi2 /dev/rmidi3 ; do
	  if test -c $dev ; then
	      break;
	  else
	      dev=""
	  fi
        done
    fi
    if test -n "$dev" ; then
        AC_DEFINE_UNQUOTED(BSE_MIDI_DEVICE_CONF_OSS, "$dev", [Device used for MID I/O])
        result="$result""MIDI:$dev "
    else
        result="$result""MIDI:none "
    fi
    AC_MSG_RESULT($result)

    dnl # Error out if there is no sound device at all
    if test "x$bse_have_pcmdev" \!= "xyes"; then
	AC_MSG_ERROR([unable to find any sound drivers/devices])
    fi
])
AC_DEFUN([AC_DOC_REQUIREMENTS],
[
])

# find installation utilities
AC_PATH_PROG(UPDATE_MIME_DATABASE, update-mime-database)

# check for maintainer/development build rules
AC_MSG_CHECKING(whether maintainer and develoment build rules are to be used)
if test x"$enable_maintainer_mode" = xyes ; then
    AC_MSG_RESULT(yes)
    TEST_SRCDIR=$(cd $srcdir ; /bin/pwd)
    TEST_BUILDDIR=$(cd . ; /bin/pwd)
    AC_MSG_CHECKING(whether source dir equals build dir)
    if test "$TEST_SRCDIR" = "$TEST_BUILDDIR" ; then
	AC_MSG_RESULT(yes)
    else
	AC_MSG_RESULT(no)
	AC_MSG_ERROR([source dir must be the same as build dir for maintainer mode])
    fi
    AC_CHECK_PROGS(PERL, perl5 perl)
    if test -z "$PERL" || $PERL -e 'exit ($] >= 5.002)' >/dev/null ; then
	AC_MSG_ERROR([failed to detect perl (version >= 5.002) required for maintainer mode])
    fi
    AC_CHECK_PROGS(PYTHON, python2.4 python)
    if test -z "$PYTHON" || $PYTHON -c "import sys; sys.exit (sys.hexversion >= 0x20401f0)" 2>/dev/null ; then
	AC_MSG_ERROR([failed to detect python (version >= 2.4.1) required for maintainer mode])
    fi
    AC_CHECK_PROGS(XMLLINT, xmllint)
    if test -z "$XMLLINT" ; then
	AC_MSG_ERROR([failed to detect xmllint required for maintainer mode])
    fi
else
    AC_MSG_RESULT(no)
fi
AC_SUBST(DVLBUILD)
AC_SUBST(NOTDVLBUILD)
AM_CONDITIONAL(IF_DVLBUILD, test -z "$DVLBUILD")
AM_CONDITIONAL(IF_NOTDVLBUILD, test -z "$NOTDVLBUILD")

# Check sub-package requirements
AC_BIRNET_REQUIREMENTS

# Check requirement sets
AC_I18N_REQUIREMENTS
AC_SFI_REQUIREMENTS
AC_BSE_REQUIREMENTS
AC_BSE_SHELL_REQUIREMENTS
AC_BSE_SNDDEV_CHECK
AC_GXK_REQUIREMENTS
AC_BEAST_REQUIREMENTS
AC_SUIDMAIN_REQUIREMENTS
AC_DOC_REQUIREMENTS

# Decide on global --no-undefined linking
# we only force all libraries and symbols to be present for development builds,
# except for when building with toyprof which uses the GLIBC symbol _r_debug.
if test x"$enable_maintainer_mode" = xyes -a x"$enable_toyprof" != xyes ; then
	MC_EVAR_ADD(LDFLAGS, --no-undefined, -Xlinker --no-undefined)
fi

# Automake @VARIABLE@ exports.
AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)


# create output files
AC_CONFIG_FILES([
Makefile
data/Makefile
data/bse.pc
data/beast.applications
birnet/Makefile
birnet/tests/Makefile
sfi/Makefile
bse/bseconfig.h
bse/Makefile
bse/icons/Makefile
bse/zintern/Makefile
bse/tests/Makefile
plugins/Makefile
plugins/icons/Makefile
plugins/freeverb/Makefile
shell/Makefile
beast-gtk/Makefile
beast-gtk/gxk/Makefile
beast-gtk/dialogs/Makefile
beast-gtk/icons/Makefile
launchers/Makefile
library/Makefile
library/effects/Makefile
library/instruments/Makefile
library/scripts/Makefile
library/demo/Makefile
library/keys/Makefile
library/skins/Makefile
library/skins/images/Makefile
tools/Makefile
po/Makefile.in
po-helper.sh
tests/Makefile
tests/audio/Makefile
tests/latency/Makefile
tests/scripts/Makefile
tests/bse/Makefile
test/Makefile
doxer/Makefile
docs/Makefile
docs/images/Makefile
web/Makefile
])

AC_OUTPUT
