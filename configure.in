dnl ************************************
dnl *** include special BEAST macros ***
dnl ************************************
builtin(include, acbeast.m4)dnl

#
# Configure script for BEAST/BSE
#
AC_INIT(bse/bseconfig.h.in)
AM_CONFIG_HEADER(PKG_config.h)
AC_PREREQ(2.13)

#
# BSE version numbers
#
AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)dnl
BSE_MAJOR_VERSION=0
BSE_MINOR_VERSION=4
BSE_MICRO_VERSION=0
BSE_INTERFACE_AGE=0
BSE_BINARY_AGE=0
BSE_VERSION=$BSE_MAJOR_VERSION.$BSE_MINOR_VERSION.$BSE_MICRO_VERSION
AC_DIVERT_POP()dnl
dnl#
dnl# Making releases:
dnl#   BSE_MICRO_VERSION += 1;
dnl#   BSE_INTERFACE_AGE += 1;
dnl#   BSE_BINARY_AGE += 1;
dnl# if any functions have been added, set BSE_INTERFACE_AGE to 0.
dnl# if backwards compatibility has been broken,
dnl# set BSE_BINARY_AGE _and_ BSE_INTERFACE_AGE to 0.
dnl#
# BEAST version numbers
BST_VERSION=$BSE_VERSION
AC_SUBST(BSE_MAJOR_VERSION)
AC_SUBST(BSE_MINOR_VERSION)
AC_SUBST(BSE_MICRO_VERSION)
AC_SUBST(BSE_INTERFACE_AGE)
AC_SUBST(BSE_BINARY_AGE)
AC_SUBST(BSE_VERSION)
AC_SUBST(BST_VERSION)

# compute libtool versions
LT_RELEASE=$BSE_MAJOR_VERSION.$BSE_MINOR_VERSION
LT_CURRENT=`expr $BSE_MICRO_VERSION - $BSE_INTERFACE_AGE`
LT_REVISION=$BSE_INTERFACE_AGE
LT_AGE=`expr $BSE_BINARY_AGE - $BSE_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

dnl figure debugging default, prior to $ac_help setup
dnl
AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)dnl
if test `expr $BSE_MINOR_VERSION \% 2 \| $BSE_MAJOR_VERSION \< 1` = 1 ; then
        debug_default=yes
else
        debug_default=minimum
fi
AC_DIVERT_POP()dnl


# initialize automake, don't define PACKAGE and VERSION
AM_INIT_AUTOMAKE(beast, $BSE_VERSION, no-define)

# Support program name conversion.
AC_ARG_PROGRAM

# Disable automatic maintainer mode.
AM_MAINTAINER_MODE

# We have subdirectories.
AC_PROG_MAKE_SET

# Make sure else configure stuff exists.
AC_CANONICAL_HOST

# declare --enable-* args and collect ac_help strings
AC_ARG_ENABLE(debug, [  --enable-debug=[no/minimum/yes] turn on debugging [default=$debug_default]],,enable_debug=$debug_default)

dnl setup DEBUG defaults
if test "x$enable_debug" = "xyes"; then
  DEBUG_FLAGS="-DG_ENABLE_DEBUG"
else if test "x$enable_debug" = "xno"; then
  DEBUG_FLAGS="-DG_DISABLE_CHECKS -DBSE_DISABLE_CAST_CHECKS" # -DG_DISABLE_ASSERT
else
  DEBUG_FLAGS="-DGTK_NO_CHECK_CASTS"
fi fi
if test "$cflags_set" = set; then
  CFLAGS="$CFLAGS -g $DEBUG_FLAGS"
else
  CFLAGS="$DEBUG_FLAGS"
fi


dnl Foreign defaults:
MC_IF_VAR_EQ(enable_static, yes, , enable_static=no)
MC_IF_VAR_EQ(enable_shared, no, , enable_shared=yes)

dnl
dnl Define package requirements.
dnl
AC_DEFUN(AC_BSE_REQUIREMENTS,
[
    dnl Need pkg-config first
    MC_ASSERT_PKG_CONFIG()

    dnl Check for GLib and setup variables
    MC_PKG_CONFIG_REQUIRE(glib-2.0 gobject-2.0 gmodule-2.0 gthread-2.0, 1.3.11, GLIB_CFLAGS, GLIB_LIBS)
    BSE_CFLAGS="$GLIB_CFLAGS"
    BSE_LIBS="$GLIB_LIBS"
    AC_SUBST(BSE_CFLAGS)
    AC_SUBST(BSE_LIBS)

    # setup BSE install paths
    bselibdir=\${libdir}/bse/v$BSE_MAJOR_VERSION.$BSE_MINOR_VERSION.$BSE_MICRO_VERSION
    bseplugindir=$bselibdir/plugins
    AC_SUBST(bseplugindir)
])
AC_DEFUN(AC_BEAST_REQUIREMENTS,
[
    dnl Need pkg-config first
    MC_ASSERT_PKG_CONFIG()

    dnl Check for Gtk+ + pangoft2
    MC_PKG_CONFIG_REQUIRE(gtk+-2.0 pangoft2, 1.3.11, GTK_CFLAGS, GTK_LIBS)

    dnl Check for libart-2.0
    MC_PKG_CONFIG_REQUIRE(libart-2.0, 2.3.7, LIBART_CFLAGS, LIBART_LIBS)

    dnl Check for gnomecanvas-2.0
    MC_PKG_CONFIG_REQUIRE(libgnomecanvas-2.0, 1.105.0, CANVAS_CFLAGS, CANVAS_LIBS)

    BEAST_CFLAGS="$CANVAS_CFLAGS $GTK_CFLAGS $LIBART_CFLAGS"
    BEAST_LIBS="$CANVAS_LIBS $GTK_LIBS $LIBART_LIBS"
    AC_SUBST(BEAST_CFLAGS)
    AC_SUBST(BEAST_LIBS)

    dnl Feature XKB extension if present
    cflags=$CFLAGS
    ldflags=$LDFLAGS
    CFLAGS=$BEAST_CFLAGS
    LDFLAGS=$BEAST_LIBS
    have_xkb=
    AC_CHECK_LIB(X11, XkbOpenDisplay, have_xkb=1$have_xkb)
    AC_CHECK_LIB(X11, XkbGetKeyboard, have_xkb=2$have_xkb)
    AC_CHECK_HEADER(X11/XKBlib.h, have_xkb=3$have_xkb)
    AC_CHECK_HEADER(X11/extensions/XKBgeom.h, have_xkb=4$have_xkb)
    MC_IF_VAR_EQ(have_xkb, 4321,
	AC_DEFINE_UNQUOTED(BST_WITH_XKB),
    )
    CFLAGS=$cflags
    LDFLAGS=$ldflags
	
    dnl Default keytable patch
    AC_MSG_CHECKING(what the fallback keytable should be)
    AC_DEFINE_UNQUOTED(BST_DFL_KEYTABLE, "us")
    AC_MSG_RESULT([\"us\", there are more americans than germans ;( ])

    # BEAST version
    AC_DEFINE_UNQUOTED(BST_VERSION, "$BST_VERSION")
    case "$BST_VERSION" in
    0.99.*)     BST_VERSION_HINT=BETA ;;
    0.*)        BST_VERSION_HINT="Pre-ALPHA" ;;
    *)          if test `expr $BSE_MINOR_VERSION \% 2` = 1 ; then
                  BST_VERSION_HINT="Development Branch"
                else
	 	  BST_VERSION_HINT="Stable Branch"
	        fi ;;
    esac
    AC_DEFINE_UNQUOTED(BST_VERSION_HINT, "$BST_VERSION_HINT")


    # BEAST data from beast-data package
    beastbasedir=\${datadir}/beast
    beastdatadir=$beastbasedir/data-v$BEAST_DATA_VERSION
    beastsampledatadir=$beastdatadir/samples
    dnl FIXME: remove the next two lines for 0.4:
    beastdatadir=$beastbasedir/v$BSE_MAJOR_VERSION.$BSE_MINOR_VERSION
    beastsampledatadir=$beastdatadir

    # MINOR version specific data
    beastdocsdir=$beastbasedir/v$BSE_MAJOR_VERSION.$BSE_MINOR_VERSION.$BSE_MICRO_VERSION/docs

    AC_SUBST(beastsampledatadir)
    AC_SUBST(beastdocsdir)
])
AC_DEFUN(AC_BSE_SNDDEV_CHECK,
[
    dnl Check for potential pcm devices
	
    bse_have_pcmdev=
	
    dnl OSS-Lite driver check
    AC_MSG_CHECKING(for OSS-Lite sounddriver device)
    have_oss_sndstat=no
    if test -r /dev/sndstat; then
	have_oss_sndstat=yes
    elif test -r /proc/asound/oss-devices && test -r /proc/asound/sndstat; then
	have_oss_sndstat=yes
    fi
    result=
    if test -c /dev/dsp && test "$have_oss_sndstat" = yes; then
	bse_have_pcmdev=yes
        AC_DEFINE_UNQUOTED(BSE_PCM_DEVICE_CONF_OSS, "/dev/dsp")
        result="$result""PCM:/dev/dsp "
    else
        result="$result""PCM:none "
    fi
    if test -c /dev/midi && test "$have_oss_sndstat" = yes; then
        AC_DEFINE_UNQUOTED(BSE_MIDI_DEVICE_CONF_OSS, "/dev/midi")
        result="$result""MIDI:/dev/midi "
    else
        result="$result""MIDI:none "
    fi
    AC_MSG_RESULT($result)

    dnl feature ALSA with a minimum version requirement -
    dnl the logic here is as follows, even if /proc support
    dnl for ALSA is not currently present, we still check
    dnl for -lasound since the modules may be loaded at runtime
    dnl however, if /proc support is present but the ALSA version
    dnl is too old, we report that and skip ALSA support
    REQUIRED=0.5.0
    check_alsa_lib=
    AC_MSG_CHECKING(for ALSA modules - version >= $REQUIRED)
    if test -e /proc/asound/version; then
	ALSA_VERSION=[`cat /proc/asound/version | \
	    sed -e '/Version/!d' \
                -e 's/.*Version[^0-9]*\(.*[0-9]\)[^0-9]*$/\1/' `]
	MC_CHECK_VERSION($ALSA_VERSION, $REQUIRED,
	    AC_MSG_RESULT([yes ($ALSA_VERSION)])
            check_alsa_lib=yes
	    ,
	    check_alsa_lib=no
	    AC_MSG_RESULT([no (found $ALSA_VERSION - version too old)])
	)
    else
        check_alsa_lib=yes
	AC_MSG_RESULT(no)
    fi
    if test "x$check_alsa_lib" = "xyes"; then
        dnl check for -lasound
        dnl this check assumes that libasound.la is installed in some
        dnl standard path, e.g. /usr or /usr/local
	AC_MSG_CHECKING(for ALSA Sound Library)
        cflags=$CFLAGS
        ldflags=$LDFLAGS
        CFLAGS=$BSE_CFLAGS
        LDFLAGS="-lasound $BSE_LIBS"
        AC_TRY_LINK([
          #include <sys/asoundlib.h>
          #include <linux/asoundid.h>
        ],[{
          snd_pcm_open (0, 0, 0, SND_PCM_OPEN_CAPTURE);
          snd_pcm_channel_setup (0, 0);
          /* snd_card_get_longname (SND_CARD_TYPE_SHARE, NULL); */
        }],[
          bse_have_pcmdev=yes
	  AC_MSG_RESULT([found it - ALSA support enabled])
	  AC_DEFINE_UNQUOTED(BSE_PCM_DEVICE_CONF_ALSA)
	  AC_CHECK_FUNCS(snd_pcm_channel_flush)
	  BSE_LIBS="-lasound $BSE_LIBS"
        ],[
	  AC_MSG_RESULT([failed - disabling ALSA support])
        ])
        CFLAGS=$cflags
        LDFLAGS=$ldflags
    fi

    dnl Error out if there is no sound device at all
    if test "x$bse_have_pcmdev" \!= "xyes"; then
	AC_MSG_ERROR(unable to find any sound drivers/devices)
    fi
])

# check compilers and their behaviour, setup CFLAGS
MC_PROG_CC_WITH_CFLAGS
MC_PROG_CXX_WITH_CXXFLAGS
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP
AC_C_CONST
AC_C_INLINE
AC_HEADER_STDC

# Checks for programs
AC_PROG_INSTALL
AC_PROG_LN_S

# initialize libtool, we need dynamic module support
AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL

# Check for package requirements.
MC_IF_VAR_EQ(GCC, yes,,
    AC_MSG_ERROR(This package requires GNU gcc)
)
dnl MC_IF_VAR_EQ(GXX, yes,,
dnl	AC_MSG_ERROR(This package requires GNU g++)
dnl )

# Figure build requirement
AC_MSG_CHECKING(whether make is GNU Make)
STRIP_BEGIN=
STRIP_END=
if $ac_make --version 2>/dev/null | grep '^GNU Make ' >/dev/null ; then
        STRIP_BEGIN='$(strip $(STRIP_DUMMY)'
        STRIP_END=')'
        AC_MSG_RESULT(yes)
else
        AC_MSG_RESULT(no)
fi
dnl some Make 3.79 $(strip ) versions are broken and require an empty arg
STRIP_DUMMY=
AC_SUBST(STRIP_DUMMY)
AC_SUBST(STRIP_BEGIN)
AC_SUBST(STRIP_END)

# get us pkg-config
MC_ASSERT_PKG_CONFIG()

# BSE requirements
AC_BSE_REQUIREMENTS
# check for sound devices
AC_BSE_SNDDEV_CHECK
# BEAST requirements
AC_BEAST_REQUIREMENTS

# architecture information
AC_DEFINE_UNQUOTED(BST_ARCH_NAME, "${host_alias}")

# check for perl, python, etags and indent which are required
# to build generated sources
AC_PROG_AWK
AC_CHECK_PROGS(PERL, perl5 perl)
AC_CHECK_PROGS(PYTHON, python)
AC_CHECK_PROGS(FOLD, fold)
AC_CHECK_PROG(INDENT, indent, indent)
AC_CHECK_PROG(ETAGS, etags, etags)
MISSING_AWK=#
MISSING_PERL5=#
MISSING_PYTHON=#
MISSING_FOLD=#
MISSING_INDENT=#
MISSING_ETAGS=#
if test -n "$PERL" && $PERL -e 'exit !($] >= 5.002)' > /dev/null ; then
    MISSING_PERL5=
fi
if test -n "$PYTHON" && python -c "import sys ; print sys.version" | grep '^1.5.' > /dev/null ; then
    MISSING_PYTHON=
fi
if test -n "$FOLD" ; then
    MISSING_FOLD=
fi
if test -n "$AWK" ; then
    MISSING_AWK=
fi
if test -n "$INDENT" ; then
    MISSING_INDENT=
fi
if test -n "$ETAGS" ; then
    MISSING_ETAGS=
fi
AC_MSG_CHECKING(whether this is rambokid's machine)
if fgrep birgrave.birnet.private /etc/hosts >/dev/null 2>&1; then
    BIRNET_Y=
    BIRNET_N=\#
    AC_MSG_RESULT(yes)
else
    BIRNET_Y=\#
    BIRNET_N=
    AC_MSG_RESULT(no)
fi
AC_SUBST(MISSING_PERL5)
AC_SUBST(MISSING_PYTHON)
AC_SUBST(MISSING_FOLD)
AC_SUBST(MISSING_AWK)
AC_SUBST(MISSING_INDENT)
AC_SUBST(MISSING_ETAGS)
AC_SUBST(BIRNET_Y)
AC_SUBST(BIRNET_N)
AM_CONDITIONAL(IF_HAVE_PERL5, test -z "$MISSING_PERL5")

# Automake @VARIABLE@ exports.
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)


# create output files
AC_OUTPUT([
Makefile
bse/Makefile
bse/icons/Makefile
plugins/Makefile
plugins/icons/Makefile
bsw/Makefile
beast-gtk/Makefile
beast-gtk/icons/Makefile
docs/Makefile
docs/reference/Makefile
test/Makefile
bse/bseconfig.h
])
